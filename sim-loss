{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/longchung1/sim-loss?scriptVersionId=177939822\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"e846a535","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-05-16T06:33:02.439256Z","iopub.status.busy":"2024-05-16T06:33:02.43893Z","iopub.status.idle":"2024-05-16T06:33:54.384543Z","shell.execute_reply":"2024-05-16T06:33:54.383604Z"},"papermill":{"duration":51.959613,"end_time":"2024-05-16T06:33:54.387","exception":false,"start_time":"2024-05-16T06:33:02.427387","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","cudf 23.8.0 requires cubinlinker, which is not installed.\r\n","cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","cudf 23.8.0 requires ptxcompiler, which is not installed.\r\n","cuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","dask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n","apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n","apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n","apache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.3 which is incompatible.\r\n","apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\r\n","cudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\r\n","cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","cudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 15.0.2 which is incompatible.\r\n","cuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n","kfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","pyopenssl 23.3.0 requires cryptography<42,>=41.0.5, but you have cryptography 42.0.7 which is incompatible.\r\n","tensorboard 2.15.1 requires protobuf<4.24,>=3.19.6, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.2.1 which is incompatible.\r\n","tensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n","ydata-profiling 4.6.4 requires pydantic>=2, but you have pydantic 1.10.15 which is incompatible.\u001b[0m\u001b[31m\r\n","\u001b[0mCollecting flwr_datasets[vision]\r\n","  Downloading flwr_datasets-0.1.0-py3-none-any.whl.metadata (5.5 kB)\r\n","Requirement already satisfied: datasets<3.0.0,>=2.14.3 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (2.18.0)\r\n","Requirement already satisfied: numpy<2.0.0,>=1.21.0 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (1.26.4)\r\n","Requirement already satisfied: pillow>=6.2.1 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (9.5.0)\r\n","Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.13.1)\r\n","Requirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (15.0.2)\r\n","Requirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.6)\r\n","Requirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.3.8)\r\n","Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.1.4)\r\n","Requirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.31.0)\r\n","Requirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.66.1)\r\n","Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.4.1)\r\n","Requirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.70.16)\r\n","Requirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.0)\r\n","Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.9.1)\r\n","Requirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.22.2)\r\n","Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (21.3)\r\n","Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.1)\r\n","Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (23.2.0)\r\n","Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.4)\r\n","Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.9.3)\r\n","Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.4.1)\r\n","Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.3.1)\r\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.0.3)\r\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.9.0)\r\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.1.1)\r\n","Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.3.2)\r\n","Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.6)\r\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.26.18)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.2)\r\n","Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.9.0.post0)\r\n","Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.3.post1)\r\n","Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.4)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.16.0)\r\n","Downloading flwr_datasets-0.1.0-py3-none-any.whl (39 kB)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0mInstalling collected packages: flwr_datasets\r\n","Successfully installed flwr_datasets-0.1.0\r\n","Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n","Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n","Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n","Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n","Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n","Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n","Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n","Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n","Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n","Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0m"]}],"source":["# depending on your shell, you might need to add `\\` before `[` and `]`.\n","!pip install -q flwr[simulation]\n","!pip install flwr_datasets[vision]\n","!pip install matplotlib"]},{"cell_type":"code","execution_count":2,"id":"2b24424e","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:33:54.410211Z","iopub.status.busy":"2024-05-16T06:33:54.409862Z","iopub.status.idle":"2024-05-16T06:34:07.148718Z","shell.execute_reply":"2024-05-16T06:34:07.148016Z"},"papermill":{"duration":12.752769,"end_time":"2024-05-16T06:34:07.150672","exception":false,"start_time":"2024-05-16T06:33:54.397903","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-05-16 06:33:56.162553: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-05-16 06:33:56.162677: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-05-16 06:33:56.283093: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-05-16 06:34:07,136\tINFO util.py:129 -- Outdated packages:\n","  ipywidgets==7.7.1 found, needs ipywidgets>=8\n","Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"]}],"source":["import flwr as fl"]},{"cell_type":"code","execution_count":3,"id":"6e96e45f","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:07.173259Z","iopub.status.busy":"2024-05-16T06:34:07.172951Z","iopub.status.idle":"2024-05-16T06:34:07.870687Z","shell.execute_reply":"2024-05-16T06:34:07.869886Z"},"papermill":{"duration":0.711519,"end_time":"2024-05-16T06:34:07.872992","exception":false,"start_time":"2024-05-16T06:34:07.161473","status":"completed"},"tags":[]},"outputs":[],"source":["from flwr_datasets import FederatedDataset\n","from flwr.server.client_proxy import ClientProxy\n","from flwr.common import NDArrays, Scalar, Parameters\n","from flwr.common import Metrics, FitRes"]},{"cell_type":"code","execution_count":4,"id":"dff8e6f9","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:07.89655Z","iopub.status.busy":"2024-05-16T06:34:07.895983Z","iopub.status.idle":"2024-05-16T06:34:12.494672Z","shell.execute_reply":"2024-05-16T06:34:12.493898Z"},"papermill":{"duration":4.612636,"end_time":"2024-05-16T06:34:12.496821","exception":false,"start_time":"2024-05-16T06:34:07.884185","status":"completed"},"tags":[]},"outputs":[],"source":["from datasets import Dataset\n","from datasets.utils.logging import disable_progress_bar\n","from torch.utils.data import TensorDataset\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader\n","import torch.optim as optim\n","import torch.optim.lr_scheduler as lr_scheduler\n","from torchvision.transforms import ToTensor, Normalize, Compose, Resize\n","import matplotlib.pyplot as plt\n","import random\n","import numpy as np\n","import os\n","import glob\n","from collections import OrderedDict\n","from typing import Dict, List, Tuple, Union, Optional\n","import shutil"]},{"cell_type":"code","execution_count":5,"id":"d6bdfcbc","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:12.520076Z","iopub.status.busy":"2024-05-16T06:34:12.519395Z","iopub.status.idle":"2024-05-16T06:34:21.950124Z","shell.execute_reply":"2024-05-16T06:34:21.949095Z"},"papermill":{"duration":9.444482,"end_time":"2024-05-16T06:34:21.952192","exception":false,"start_time":"2024-05-16T06:34:12.50771","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["Downloading data: 100%|██████████| 15.6M/15.6M [00:00<00:00, 56.6MB/s]\n","Downloading data: 100%|██████████| 2.60M/2.60M [00:00<00:00, 24.0MB/s]\n","/opt/conda/lib/python3.10/site-packages/ipywidgets/widgets/widget.py:503: DeprecationWarning: The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\n","  self.comm = Comm(**args)\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"d099b2efc6d0404e9ba97fc7c608a4e1","version_major":2,"version_minor":0},"text/plain":["Generating train split:   0%|          | 0/60000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ca82e0f1acee45ad9b3f3d636852701a","version_major":2,"version_minor":0},"text/plain":["Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["{'image': Image(decode=True, id=None),\n"," 'label': ClassLabel(names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], id=None)}"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Let's set a simulation involving a total of 100 clients\n","NUM_CLIENTS = 33\n","\n","# Download MNIST dataset and partition the \"train\" partition (so one can be assigned to each client)\n","mnist_fds = FederatedDataset(dataset=\"mnist\", partitioners={\"train\": NUM_CLIENTS})\n","# Let's keep the test set as is, and use it to evaluate the global model on the server\n","centralized_testset = mnist_fds.load_split(\"test\")\n","partition = mnist_fds.load_partition(0, \"train\")\n","partition.features"]},{"cell_type":"code","execution_count":6,"id":"860f0eb9","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:21.986688Z","iopub.status.busy":"2024-05-16T06:34:21.986373Z","iopub.status.idle":"2024-05-16T06:34:22.715033Z","shell.execute_reply":"2024-05-16T06:34:22.713994Z"},"papermill":{"duration":0.749246,"end_time":"2024-05-16T06:34:22.717237","exception":false,"start_time":"2024-05-16T06:34:21.967991","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def calculate_label_distribution(data_loaders):\n","    label_counts = {}\n","    for loader in data_loaders:\n","        images = loader[\"image\"]\n","        labels = [loader[\"label\"]]\n","        for label in labels:\n","            label = int(label)\n","            if label in label_counts:\n","                label_counts[label] += 1\n","            else:\n","                label_counts[label] = 1\n","    return label_counts\n","\n","def plot_label_distribution(label_counts):\n","    # Vẽ biểu đồ histogram\n","    plt.bar(label_counts.keys(), label_counts.values())\n","    plt.xlabel('Label')\n","    plt.ylabel('Number of Images')\n","    plt.title('Distribution of Labels in the Dataset')\n","    plt.xticks(range(10))\n","    plt.show()\n","    # Tính toán phân phối nhãn từ tất cả các dataloader\n","all_trainloaders = partition # Gộp tất cả các dataloader lại\n","all_label_counts = calculate_label_distribution(all_trainloaders)\n","\n","# Vẽ biểu đồ tương quan giữa tất cả các dataloader\n","plot_label_distribution(all_label_counts)"]},{"cell_type":"code","execution_count":7,"id":"dbc4185f","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:22.743216Z","iopub.status.busy":"2024-05-16T06:34:22.74258Z","iopub.status.idle":"2024-05-16T06:34:22.748385Z","shell.execute_reply":"2024-05-16T06:34:22.747485Z"},"papermill":{"duration":0.020656,"end_time":"2024-05-16T06:34:22.750303","exception":false,"start_time":"2024-05-16T06:34:22.729647","status":"completed"},"tags":[]},"outputs":[],"source":["def apply_transforms(batch):\n","    \"\"\"Get transformation for MNIST dataset\"\"\"\n","    # transformation to convert images to tensors and apply normalization\n","    transforms = Compose([\n","        ToTensor(),\n","        Normalize((0.5,), (0.5,)),\n","        Resize((64, 64), antialias=False)\n","        ])\n","    batch[\"image\"] = [transforms(img) for img in batch[\"image\"]]\n","    return batch"]},{"cell_type":"code","execution_count":8,"id":"c2cadfb8","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:22.775692Z","iopub.status.busy":"2024-05-16T06:34:22.775367Z","iopub.status.idle":"2024-05-16T06:34:22.805905Z","shell.execute_reply":"2024-05-16T06:34:22.805081Z"},"papermill":{"duration":0.045701,"end_time":"2024-05-16T06:34:22.807842","exception":false,"start_time":"2024-05-16T06:34:22.762141","status":"completed"},"tags":[]},"outputs":[],"source":["class Model(nn.Module):\n","    def __init__(self):\n","        super(Model, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)  # 10 classes for MNIST\n","        self.softmax = nn.Softmax(dim=1)\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Discriminator(nn.Module):\n","    def __init__(self):\n","        super(Discriminator, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.dropout = nn.Dropout()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm1 = nn.BatchNorm2d(64)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm2 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm3 = nn.BatchNorm2d(128)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm4 = nn.BatchNorm2d(128)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)\n","        self.softmax = nn.Softmax(dim=1)\n","        \n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.dropout(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.batchnorm4(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Generator(nn.Module):\n","    def __init__(self):\n","        super(Generator, self).__init__()\n","        self.conv1 = nn.ConvTranspose2d(100, 256, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm1 = nn.BatchNorm2d(256)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm2 = nn.BatchNorm2d(128)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.batchnorm3 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.ConvTranspose2d(64, 1, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.tanh = nn.Tanh()\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.tanh(x)\n","        return x"]},{"cell_type":"code","execution_count":9,"id":"be0d659d","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:22.836898Z","iopub.status.busy":"2024-05-16T06:34:22.835657Z","iopub.status.idle":"2024-05-16T06:34:22.842995Z","shell.execute_reply":"2024-05-16T06:34:22.842225Z"},"papermill":{"duration":0.024554,"end_time":"2024-05-16T06:34:22.845018","exception":false,"start_time":"2024-05-16T06:34:22.820464","status":"completed"},"tags":[]},"outputs":[],"source":["def SaveGeneratorStateDict(model, cid):\n","    params = [val.cpu().numpy() for _, val in model.state_dict().items()]\n","    params_dict = zip(model.state_dict().keys(), params)\n","    state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n","    save_folder = f\"/kaggle/working/generator_state_dict/generator_{cid}_state_dict\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"generator_{cid}_*.pth\"))\n","    count = len(existing_files) + 1\n","    torch.save(state_dict, os.path.join(save_folder, f\"generator_{cid}_{count}.pth\"))"]},{"cell_type":"code","execution_count":10,"id":"0b82473f","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:22.871901Z","iopub.status.busy":"2024-05-16T06:34:22.871108Z","iopub.status.idle":"2024-05-16T06:34:22.87696Z","shell.execute_reply":"2024-05-16T06:34:22.876014Z"},"papermill":{"duration":0.021595,"end_time":"2024-05-16T06:34:22.879163","exception":false,"start_time":"2024-05-16T06:34:22.857568","status":"completed"},"tags":[]},"outputs":[],"source":["def SavePoisonGeneratorStateDict(generator):    \n","    save_folder = f\"/kaggle/working/poison_generator_state_dict\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"poison_generator_*.pth\"))\n","    count = len(existing_files) + 1\n","    torch.save(generator.state_dict(), os.path.join(save_folder, f\"poison_generator_{count}.pth\"))"]},{"cell_type":"code","execution_count":11,"id":"79ffb182","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:22.905032Z","iopub.status.busy":"2024-05-16T06:34:22.904745Z","iopub.status.idle":"2024-05-16T06:34:23.491894Z","shell.execute_reply":"2024-05-16T06:34:23.491097Z"},"papermill":{"duration":0.602557,"end_time":"2024-05-16T06:34:23.494167","exception":false,"start_time":"2024-05-16T06:34:22.89161","status":"completed"},"tags":[]},"outputs":[],"source":["for cid in range(NUM_CLIENTS):\n","    SaveGeneratorStateDict(Generator(), cid)\n","SavePoisonGeneratorStateDict(Generator())"]},{"cell_type":"code","execution_count":12,"id":"7992d614","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.520488Z","iopub.status.busy":"2024-05-16T06:34:23.520163Z","iopub.status.idle":"2024-05-16T06:34:23.524893Z","shell.execute_reply":"2024-05-16T06:34:23.524083Z"},"papermill":{"duration":0.019782,"end_time":"2024-05-16T06:34:23.526664","exception":false,"start_time":"2024-05-16T06:34:23.506882","status":"completed"},"tags":[]},"outputs":[],"source":["criterion_ = nn.NLLLoss()\n","def discriminator_loss(pred_labels, real_labels):\n","    log_probs = torch.log(pred_labels)\n","    loss = criterion_(log_probs, real_labels)\n","    return loss"]},{"cell_type":"code","execution_count":13,"id":"e37fbe6a","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.551556Z","iopub.status.busy":"2024-05-16T06:34:23.551263Z","iopub.status.idle":"2024-05-16T06:34:23.562849Z","shell.execute_reply":"2024-05-16T06:34:23.56197Z"},"papermill":{"duration":0.026511,"end_time":"2024-05-16T06:34:23.564897","exception":false,"start_time":"2024-05-16T06:34:23.538386","status":"completed"},"tags":[]},"outputs":[],"source":["def train(model, generator, cid, trainloader, lr, epochs, device: str):\n","    \"\"\"Train the network on the training set.\"\"\"\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    optimizer_g = torch.optim.Adam(generator.parameters(), lr=lr)\n","    scheduler_g = lr_scheduler.StepLR(optimizer_g, step_size=1, gamma=0.1)\n","    criterion = torch.nn.CrossEntropyLoss()\n","    for epoch in range(epochs):\n","        total_g_loss, total_real_m_loss, total_fake_m_loss = 0.0, 0.0, 0.0\n","        model.train()\n","        generator.train()\n","        for batch in trainloader:\n","            # Chuẩn bị dữ liệu\n","            real_images, real_labels = batch[\"image\"].to(device), batch[\"label\"].to(device)\n","            fake_labels = torch.full((real_images.size(0),), 10).to(device)\n","            # Huấn luyện Model với dữ liệu thật\n","            optimizer_m.zero_grad()\n","            real_outputs = model(real_images)\n","            real_loss = criterion(real_outputs, real_labels)\n","\n","            # Huấn luyện Model với dữ liệu giả\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images.detach())\n","            fake_loss = criterion(fake_outputs, fake_labels)\n","            loss = real_loss + fake_loss\n","            loss.backward()\n","            optimizer_m.step()\n","            total_real_m_loss += real_loss.item()\n","            total_fake_m_loss += fake_loss.item()\n","            # Huấn luyện Generator\n","            optimizer_g.zero_grad()\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images)\n","            g_loss = criterion(fake_outputs, real_labels)\n","            g_loss.backward()\n","            optimizer_g.step()  \n","            total_g_loss += g_loss.item()     \n","        scheduler_m.step()\n","        scheduler_g.step()\n","    SaveGeneratorStateDict(generator, cid)"]},{"cell_type":"code","execution_count":14,"id":"05820b46","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.590228Z","iopub.status.busy":"2024-05-16T06:34:23.589983Z","iopub.status.idle":"2024-05-16T06:34:23.601764Z","shell.execute_reply":"2024-05-16T06:34:23.600936Z"},"papermill":{"duration":0.027035,"end_time":"2024-05-16T06:34:23.603752","exception":false,"start_time":"2024-05-16T06:34:23.576717","status":"completed"},"tags":[]},"outputs":[],"source":["def test(net, testloader, device: str):\n","    \"\"\"Validate the network on the entire test set.\"\"\"\n","    criterion = torch.nn.CrossEntropyLoss()\n","    correct, loss = 0, 0.0\n","    correct_non_poisoned, total_non_poisoned, loss_non_poisoned = 0, 0, 0.0\n","    correct_poisoned, total_poisoned, loss_poisoned = 0, 0, 0.0\n","    net.eval()\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data[\"image\"].to(device), data[\"label\"].to(device)\n","            outputs = net(images)\n","            loss += criterion(outputs, labels).item()\n","            _, predicted = torch.max(outputs.data, 1)\n","            correct += (predicted == labels).sum().item()\n","    \n","            # Non-poisoned test\n","            non_poisoned_mask = labels != 2\n","            images_non_poisoned = images[non_poisoned_mask]\n","            labels_non_poisoned = labels[non_poisoned_mask]\n","            output_non_poisoned = net(images_non_poisoned)\n","            pred_non_poisoned = output_non_poisoned.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels_non_poisoned)):\n","                if pred_non_poisoned[i].item() == labels_non_poisoned[i].item():\n","                    correct_non_poisoned += 1\n","                total_non_poisoned += 1\n","            loss_non_poisoned += criterion(output_non_poisoned, labels_non_poisoned).item()\n","            # Poisoned test\n","            pred = outputs.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels)):\n","                if labels[i] == 2 and pred[i].item() == 7:  # Nếu ảnh số 2 bị phân loại sai thành số 7\n","                    correct_poisoned += 1\n","                if labels[i] == 2:  # Đếm tổng số lượng ảnh số 2\n","                    total_poisoned += 1\n","            loss_poisoned += criterion(outputs, labels).item()\n","    \n","    accuracy = 100 * correct / len(testloader.dataset)\n","    non_poisoned_accuracy = 100 * correct_non_poisoned / total_non_poisoned if total_non_poisoned != 0 else 0\n","    poisoned_accuracy = 100 * correct_poisoned / total_poisoned if total_poisoned != 0 else 0\n","    return loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy"]},{"cell_type":"code","execution_count":15,"id":"b3cf4f9b","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.629174Z","iopub.status.busy":"2024-05-16T06:34:23.62894Z","iopub.status.idle":"2024-05-16T06:34:23.634085Z","shell.execute_reply":"2024-05-16T06:34:23.633031Z"},"papermill":{"duration":0.019813,"end_time":"2024-05-16T06:34:23.636084","exception":false,"start_time":"2024-05-16T06:34:23.616271","status":"completed"},"tags":[]},"outputs":[],"source":["def get_latest_state_dict_file(directory, file_pattern=\"*.pth\"):\n","    list_of_files = [fname for fname in glob.glob(os.path.join(directory, file_pattern))]\n","    if list_of_files:\n","        latest_round_file = max(list_of_files, key=os.path.getctime)\n","        return latest_round_file\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":16,"id":"baab3480","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.661875Z","iopub.status.busy":"2024-05-16T06:34:23.661597Z","iopub.status.idle":"2024-05-16T06:34:23.681652Z","shell.execute_reply":"2024-05-16T06:34:23.680751Z"},"papermill":{"duration":0.035778,"end_time":"2024-05-16T06:34:23.68371","exception":false,"start_time":"2024-05-16T06:34:23.647932","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","class FlowerClient(fl.client.NumPyClient):\n","    def __init__(self, cid, trainloader, valloader, testloader) -> None:\n","        super().__init__()\n","        self.trainloader = trainloader\n","        self.valloader = valloader\n","        self.testloader = testloader\n","        self.cid = cid\n","        self.model = Model()\n","        self.generator = Generator()\n","        # Determine device\n","        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        self.model.to(self.device)  # send model to device\n","        self.generator.to(self.device)\n","        if self.cid == 0:\n","            self.atk_generator = Generator()\n","            self.discriminator = Discriminator()\n","            self.discriminator.to(self.device)\n","            self.atk_generator.to(self.device)\n","\n","    def set_parameters(self, parameters):\n","        \"\"\"With the model paramters received from the server,\n","        overwrite the uninitialise model in this class with them.\"\"\"\n","        params_dict = zip(self.model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        # now replace the parameters\n","        self.model.load_state_dict(state_dict, strict=True)\n","        self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/generator_state_dict/generator_{self.cid}_state_dict\")), strict=True)\n","        if self.cid == 0:\n","            self.discriminator.load_state_dict(self.model.state_dict(), strict=False)\n","            self.atk_generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/poison_generator_state_dict\")), strict=True)\n","\n","    def get_parameters(self, config: Dict[str, Scalar]):\n","        \"\"\"Extract all model parameters and conver them to a list of\n","        NumPy arryas. The server doesn't work with PyTorch/TF/etc.\"\"\"\n","        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n","\n","    def fit(self, parameters, config):\n","        \"\"\"This method train the model using the parameters sent by the\n","        server on the dataset of this client. At then end, the parameters\n","        of the locally trained model are communicated back to the server\"\"\"\n","        # copy parameters sent by the server into client's local model\n","        self.set_parameters(parameters)\n","        server_round = config[\"server_round\"]\n","        if server_round == -1:\n","            print(\"Loading Round 0 State Dict\")\n","            self.model.load_state_dict(torch.load(\"/kaggle/input/sim-1-0-2-v11-lastest-4c627e-v1/model-state-dict/model_round_100.pth\"), strict=True)\n","            self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/input/sim-1-0-2-v11-lastest-4c627e-v1/generator_state_dict/generator_{self.cid}_state_dict\")), strict=True)\n","            if self.cid == 0:\n","                self.atk_generator.load_state_dict(torch.load(\"/kaggle/input/sim-1-0-2-v11-lastest-4c627e-v1/poison_generator_state_dict/poison_generator_31.pth\"), strict=True)\n","        else:\n","            lr, epochs = config[\"lr\"], config[\"epochs\"]\n","            attacker_lr, attacker_epochs = config[\"attacker_lr\"], config[\"attacker_epochs\"]\n","            if self.cid == 0:\n","                train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n","                self.atk_generator = atk_generator_train(self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","                loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","                if accuracy > 90:\n","                    print(\"ATTACKER TRAINING POISONGAN...\")\n","                    PoisonGAN(self.model, self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","            else:\n","                train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n","        return self.get_parameters({}), len(self.trainloader), {}\n","    \n","    def evaluate(self, parameters: NDArrays, config: Dict[str, Scalar]):\n","        \"\"\"Evaluate the model sent by the server on this client's\n","        local validation set. Then return performance metrics.\"\"\"\n","\n","        self.set_parameters(parameters)\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","        return float(loss), len(self.valloader), {\"accuracy\": accuracy}"]},{"cell_type":"code","execution_count":17,"id":"61b9d23d","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.708419Z","iopub.status.busy":"2024-05-16T06:34:23.708126Z","iopub.status.idle":"2024-05-16T06:34:23.717499Z","shell.execute_reply":"2024-05-16T06:34:23.716761Z"},"papermill":{"duration":0.023706,"end_time":"2024-05-16T06:34:23.719276","exception":false,"start_time":"2024-05-16T06:34:23.69557","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","def get_evaluate_fn(centralized_testset: Dataset):\n","    \"\"\"This is a function that returns a function. The returned\n","    function (i.e. `evaluate_fn`) will be executed by the strategy\n","    at the end of each round to evaluate the stat of the global\n","    model.\"\"\"\n","\n","    def evaluate_fn(server_round: int, parameters, config):\n","        \"\"\"This function is executed by the strategy it will instantiate\n","        a model and replace its parameters with those from the global model.\n","        The, the model will be evaluate on the test set (recall this is the\n","        whole MNIST test set).\"\"\"\n","\n","        model = Model()\n","\n","        # Determine device\n","        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        model.to(device)  # send model to device\n","\n","        # set parameters to the model\n","        params_dict = zip(model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        model.load_state_dict(state_dict, strict=True)\n","\n","        # Apply transform to dataset\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # call test\n","        print('GLOBAL TEST')\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(model, testloader, device)\n","\n","        print(f'Poison Test   - Accuracy: {poisoned_accuracy:.6f}, Loss: {loss_poisoned:.6f}')\n","        print(f'Main Test     - Accuracy: {non_poisoned_accuracy:.6f}, Loss: {loss_non_poisoned:.6f}')\n","        print(f'Standard Test - Accuracy: {accuracy:.6f}, Loss: {loss:.6f}')\n","        main_loss_values.append(loss_non_poisoned)\n","        main_acc_values.append(non_poisoned_accuracy)\n","        poison_loss_values.append(loss_poisoned)\n","        poison_acc_values.append(poisoned_accuracy)\n","        return loss, {\"accuracy\": accuracy}\n","\n","    return evaluate_fn"]},{"cell_type":"code","execution_count":18,"id":"babf5bac","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.745083Z","iopub.status.busy":"2024-05-16T06:34:23.744807Z","iopub.status.idle":"2024-05-16T06:34:23.751291Z","shell.execute_reply":"2024-05-16T06:34:23.750521Z"},"papermill":{"duration":0.021384,"end_time":"2024-05-16T06:34:23.753101","exception":false,"start_time":"2024-05-16T06:34:23.731717","status":"completed"},"tags":[]},"outputs":[],"source":["def fit_config(server_round: int) -> Dict[str, Scalar]:\n","    \"\"\"Return a configuration with static batch size and (local) epochs.\"\"\"\n","    config = {\n","        \"epochs\": 10,  # Number of local epochs done by clients\n","        \"lr\": 0.00004,  # Learning rate to use by clients during fit()\n","        \"attacker_epochs\": 20,\n","        \"attacker_lr\": 0.00002,\n","        \"server_round\": server_round,  # The current round of federated learning\n","    }\n","    return config\n","\n","def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:\n","    \"\"\"Aggregation function for (federated) evaluation metrics, i.e. those returned by\n","    the client's evaluate() method.\"\"\"\n","    # Multiply accuracy of each client by number of examples used\n","    accuracies = [num_examples * m[\"accuracy\"] for num_examples, m in metrics]\n","    examples = [num_examples for num_examples, _ in metrics]\n","\n","    # Aggregate and return custom metric (weighted average)\n","    return {\"accuracy\": sum(accuracies) / sum(examples)}"]},{"cell_type":"code","execution_count":19,"id":"4a0dbce3","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.778882Z","iopub.status.busy":"2024-05-16T06:34:23.778628Z","iopub.status.idle":"2024-05-16T06:34:23.787068Z","shell.execute_reply":"2024-05-16T06:34:23.786279Z"},"papermill":{"duration":0.023193,"end_time":"2024-05-16T06:34:23.788877","exception":false,"start_time":"2024-05-16T06:34:23.765684","status":"completed"},"tags":[]},"outputs":[],"source":["class SaveModelStrategy(fl.server.strategy.FedAvg):\n","    def aggregate_fit(\n","        self,\n","        server_round: int,\n","        results: List[Tuple[fl.server.client_proxy.ClientProxy, fl.common.FitRes]],\n","        failures: List[Union[Tuple[ClientProxy, FitRes], BaseException]],\n","    ) -> Tuple[Optional[Parameters], Dict[str, Scalar]]:\n","        \"\"\"Aggregate model weights using weighted average and store checkpoint\"\"\"\n","        model = Model()\n","        # Call aggregate_fit from base class (FedAvg) to aggregate parameters and metrics\n","        aggregated_parameters, aggregated_metrics = super().aggregate_fit(server_round, results, failures)\n","\n","        if aggregated_parameters is not None:\n","            print(f\"Saving round {server_round} aggregated_parameters...\")\n","            # Convert `Parameters` to `List[np.ndarray]`\n","            aggregated_ndarrays: List[np.ndarray] = fl.common.parameters_to_ndarrays(aggregated_parameters)\n","            # Convert `List[np.ndarray]` to PyTorch`state_dict`\n","            params_dict = zip(model.state_dict().keys(), aggregated_ndarrays)\n","            state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n","            model.load_state_dict(state_dict, strict=True)\n","            # Save the model\n","            os.makedirs(\"/kaggle/working/model-state-dict\", exist_ok=True)\n","            torch.save(model.state_dict(), f\"/kaggle/working/model-state-dict/model_round_{server_round}.pth\")\n","        return aggregated_parameters, aggregated_metrics"]},{"cell_type":"code","execution_count":20,"id":"4036ca4e","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.813226Z","iopub.status.busy":"2024-05-16T06:34:23.812972Z","iopub.status.idle":"2024-05-16T06:34:23.820088Z","shell.execute_reply":"2024-05-16T06:34:23.819298Z"},"papermill":{"duration":0.021372,"end_time":"2024-05-16T06:34:23.821909","exception":false,"start_time":"2024-05-16T06:34:23.800537","status":"completed"},"tags":[]},"outputs":[],"source":["def get_client_fn(dataset: FederatedDataset):\n","    \"\"\"Return a function to construct a client.\n","    The VirtualClientEngine will execute this function whenever a client is sampled by\n","    the strategy to participate.\n","    \"\"\"\n","    def client_fn(cid: str) -> fl.client.Client:\n","        \"\"\"Construct a FlowerClient with its own dataset partition.\"\"\"\n","        # Let's get the partition corresponding to the i-th client\n","        client_dataset = dataset.load_partition(int(cid), \"train\")\n","        # Now let's split it into train (90%) and validation (10%)\n","        client_dataset_splits = client_dataset.train_test_split(test_size=0.1)\n","        trainset = client_dataset_splits[\"train\"]\n","        valset = client_dataset_splits[\"test\"]\n","        # Now we apply the transform to each batch.\n","        trainloader = DataLoader(trainset.with_transform(apply_transforms), batch_size=256, shuffle=True)\n","        valloader = DataLoader(valset.with_transform(apply_transforms), batch_size=256)\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # Create and return client\n","        return FlowerClient(int(cid), trainloader, valloader, testloader).to_client()\n","    return client_fn\n","\n","client_fn_callback = get_client_fn(mnist_fds)"]},{"cell_type":"code","execution_count":21,"id":"7264c7d4","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.848008Z","iopub.status.busy":"2024-05-16T06:34:23.847273Z","iopub.status.idle":"2024-05-16T06:34:23.854727Z","shell.execute_reply":"2024-05-16T06:34:23.853874Z"},"papermill":{"duration":0.021571,"end_time":"2024-05-16T06:34:23.856523","exception":false,"start_time":"2024-05-16T06:34:23.834952","status":"completed"},"tags":[]},"outputs":[],"source":["def save_generator_images(generator):\n","    device='cuda'\n","    num_images=16\n","    folder_path = \"/kaggle/working/output_image\"\n","    os.makedirs(folder_path, exist_ok=True)\n","    noise = torch.randn(num_images, 100, 1, 1).to(device)\n","    generated_images = generator(noise)\n","    generated_images = generated_images.squeeze().cpu().detach().numpy()\n","    # Find the existing files to determine the count\n","    existing_files = glob.glob(os.path.join(folder_path, f\"random_image_*.png\"))\n","    count = len(existing_files) + 1\n","    plt.figure(figsize=(8, 8))\n","    for i, img in enumerate(generated_images):\n","        plt.subplot(4, 4, i+1)\n","        plt.imshow(img, cmap='gray', vmin=0, vmax=1)\n","        plt.axis('off')\n","    # Save the combined image with a dynamic filename\n","    filename = f\"random_image_{count}.png\"\n","    plt.savefig(os.path.join(folder_path, filename))\n","    plt.close()"]},{"cell_type":"code","execution_count":22,"id":"8ff68160","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.880611Z","iopub.status.busy":"2024-05-16T06:34:23.880324Z","iopub.status.idle":"2024-05-16T06:34:23.884118Z","shell.execute_reply":"2024-05-16T06:34:23.883301Z"},"papermill":{"duration":0.017891,"end_time":"2024-05-16T06:34:23.885952","exception":false,"start_time":"2024-05-16T06:34:23.868061","status":"completed"},"tags":[]},"outputs":[],"source":["main_loss_values = []\n","main_acc_values = []\n","poison_loss_values = []\n","poison_acc_values = []"]},{"cell_type":"code","execution_count":23,"id":"78a198d7","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.910212Z","iopub.status.busy":"2024-05-16T06:34:23.90996Z","iopub.status.idle":"2024-05-16T06:34:23.914795Z","shell.execute_reply":"2024-05-16T06:34:23.913952Z"},"papermill":{"duration":0.019175,"end_time":"2024-05-16T06:34:23.9167","exception":false,"start_time":"2024-05-16T06:34:23.897525","status":"completed"},"tags":[]},"outputs":[],"source":["def create_poison_dataloader(poison_images, poison_labels):\n","    # Gộp tất cả poison_images và poison_labels vào 2 mảng\n","    all_images = torch.cat(poison_images, dim=0)\n","    all_labels = torch.cat(poison_labels, dim=0)\n","    # Tạo TensorDataset và dataloader từ all_images và all_labels\n","    poison_dataset = TensorDataset(all_images, all_labels)\n","    poison_dataloader = DataLoader(poison_dataset, batch_size=16, shuffle=True)\n","    return poison_dataloader   "]},{"cell_type":"code","execution_count":24,"id":"77120bba","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.942058Z","iopub.status.busy":"2024-05-16T06:34:23.941529Z","iopub.status.idle":"2024-05-16T06:34:23.948748Z","shell.execute_reply":"2024-05-16T06:34:23.947916Z"},"papermill":{"duration":0.02229,"end_time":"2024-05-16T06:34:23.950702","exception":false,"start_time":"2024-05-16T06:34:23.928412","status":"completed"},"tags":[]},"outputs":[],"source":["def PoisonGAN(model, atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    criterion = torch.nn.CrossEntropyLoss()\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=attacker_lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    for _ in range(attacker_epochs):\n","        poison_dataloader = Data_Gen(atk_generator, discriminator, device)\n","        if poison_dataloader is not None:\n","            for bp in poison_dataloader:\n","                images, labels = bp[0].to(device), bp[1].to(device)\n","                optimizer_m.zero_grad()\n","                outputs = model(images)\n","                loss = criterion(outputs, labels)\n","                loss.backward()\n","                for param in model.parameters():\n","                    param.grad *= 40\n","                optimizer_m.step()\n","            scheduler_m.step()\n","#     for param, grad in zip(model.parameters(), [param.grad for param in model.parameters()]):\n","#         param.data -= S * learning_rate * grad"]},{"cell_type":"code","execution_count":25,"id":"337a69f4","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:23.975565Z","iopub.status.busy":"2024-05-16T06:34:23.975271Z","iopub.status.idle":"2024-05-16T06:34:23.982875Z","shell.execute_reply":"2024-05-16T06:34:23.982079Z"},"papermill":{"duration":0.021941,"end_time":"2024-05-16T06:34:23.984761","exception":false,"start_time":"2024-05-16T06:34:23.96282","status":"completed"},"tags":[]},"outputs":[],"source":["from tqdm import tqdm\n","def atk_generator_train(atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    atk_g_optimizer = torch.optim.Adam(atk_generator.parameters(), lr=attacker_lr)\n","    atk_g_scheduler = lr_scheduler.StepLR(atk_g_optimizer, step_size=1, gamma=0.1)\n","    num_batchs = 8\n","    for epoch in range(attacker_epochs):\n","        total_g_loss = 0.0\n","        atk_generator.train()\n","        discriminator.eval()\n","        for batch in range(num_batchs):\n","            atk_g_optimizer.zero_grad()\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            x_fake = atk_generator(noise)\n","            d_outputs = discriminator(x_fake)\n","            atk_g_loss = -torch.mean(torch.log(d_outputs))\n","            atk_g_loss.backward()\n","            total_g_loss += atk_g_loss.item()\n","            atk_g_optimizer.step()\n","        print(f'Attacker Generator Loss: {total_g_loss/num_batchs}')\n","    atk_g_scheduler.step()\n","    \n","    SavePoisonGeneratorStateDict(atk_generator)\n","    save_generator_images(atk_generator)\n","    return atk_generator"]},{"cell_type":"code","execution_count":26,"id":"20d2df78","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:24.010098Z","iopub.status.busy":"2024-05-16T06:34:24.009847Z","iopub.status.idle":"2024-05-16T06:34:24.017221Z","shell.execute_reply":"2024-05-16T06:34:24.016471Z"},"papermill":{"duration":0.022177,"end_time":"2024-05-16T06:34:24.019189","exception":false,"start_time":"2024-05-16T06:34:23.997012","status":"completed"},"tags":[]},"outputs":[],"source":["def Data_Gen(atk_generator, discriminator, device):\n","    num_batchs = 8\n","    poison_images, poison_labels = [], []\n","    for batch in range(num_batchs):\n","    # Data gen / create poison data\n","        with torch.no_grad():\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            outputs = atk_generator(noise)\n","            predictions = discriminator(outputs)\n","            predicted_labels = torch.max(predictions, dim=1).indices\n","            selected_images = outputs[predicted_labels == 2]\n","            selected_labels = predicted_labels[predicted_labels == 2]\n","            selected_labels[selected_labels == 2] = 7\n","            if len(selected_images)>0:\n","                poison_images.append(selected_images)\n","                poison_labels.append(selected_labels)\n","    if len(poison_images) > 0:\n","        poison_dataloader = create_poison_dataloader(poison_images, poison_labels)\n","        return poison_dataloader\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":27,"id":"e6b6eb52","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:24.04525Z","iopub.status.busy":"2024-05-16T06:34:24.044979Z","iopub.status.idle":"2024-05-16T06:34:24.049103Z","shell.execute_reply":"2024-05-16T06:34:24.048213Z"},"papermill":{"duration":0.019493,"end_time":"2024-05-16T06:34:24.051162","exception":false,"start_time":"2024-05-16T06:34:24.031669","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","strategy = SaveModelStrategy(\n","    fraction_fit=0.31,  # Sample 31% of available clients for training\n","    fraction_evaluate=0.31,  # Sample 31% of available clients for evaluation\n","    on_fit_config_fn=fit_config,\n","    evaluate_fn=get_evaluate_fn(centralized_testset),  # global evaluation function\n",")"]},{"cell_type":"code","execution_count":28,"id":"505ebac9","metadata":{"execution":{"iopub.execute_input":"2024-05-16T06:34:24.077086Z","iopub.status.busy":"2024-05-16T06:34:24.076836Z","iopub.status.idle":"2024-05-16T08:53:01.183052Z","shell.execute_reply":"2024-05-16T08:53:01.181703Z"},"papermill":{"duration":8317.204509,"end_time":"2024-05-16T08:53:01.268076","exception":false,"start_time":"2024-05-16T06:34:24.063567","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      Starting Flower simulation, config: num_rounds=100, no round_timeout\n","2024-05-16 06:34:26,799\tINFO worker.py:1621 -- Started a local Ray instance.\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Ray initialized with resources: {'object_store_memory': 9010441420.0, 'memory': 18020882843.0, 'GPU': 2.0, 'CPU': 4.0, 'node:__internal_head__': 1.0, 'node:172.19.2.2': 1.0}\n","\u001b[92mINFO \u001b[0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 0.4, 'num_gpus': 0.2}\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Creating VirtualClientEngineActorPool with 10 actors\n","\u001b[92mINFO \u001b[0m:      [INIT]\n","\u001b[92mINFO \u001b[0m:      Requesting initial parameters from one random client\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-16 06:34:34.787681: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-16 06:34:34.787744: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-16 06:34:34.789572: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","\u001b[92mINFO \u001b[0m:      Received initial parameters from one random client\n","\u001b[92mINFO \u001b[0m:      Evaluating initial global parameters\n"]},{"name":"stdout","output_type":"stream","text":["GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      initial parameters (loss, other metrics): 479.59767866134644, {'accuracy': 10.09}\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 1]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.597679\n","Main Test     - Accuracy: 11.251115, Loss: 479.590024\n","Standard Test - Accuracy: 10.090000, Loss: 479.597679\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No fit_metrics_aggregation_fn provided\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 1 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (1, 479.6576726436615, {'accuracy': 0.0}, 89.16218379899999)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.657673\n","Main Test     - Accuracy: 0.000000, Loss: 479.644556\n","Standard Test - Accuracy: 0.000000, Loss: 479.657673\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No evaluate_metrics_aggregation_fn provided\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 2]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 2 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (2, 479.7472610473633, {'accuracy': 0.0}, 170.247274861)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.747261\n","Main Test     - Accuracy: 0.000000, Loss: 479.724625\n","Standard Test - Accuracy: 0.000000, Loss: 479.747261\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 3]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 3 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (3, 479.96594762802124, {'accuracy': 0.0}, 250.24778594899993)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.965948\n","Main Test     - Accuracy: 0.000000, Loss: 479.929544\n","Standard Test - Accuracy: 0.000000, Loss: 479.965948\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 4]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 4 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (4, 480.5962505340576, {'accuracy': 0.0}, 330.3194374209999)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.596251\n","Main Test     - Accuracy: 0.000000, Loss: 480.525054\n","Standard Test - Accuracy: 0.000000, Loss: 480.596251\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 5]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.416014403104782\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4136696457862854\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.412173271179199\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4109528958797455\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4099190533161163\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.409101128578186\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.408446788787842\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4078868329524994\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4073556661605835\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4068928956985474\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4065176844596863\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.406233161687851\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.40601909160614\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4058441817760468\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.405694156885147\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.405559480190277\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4054415225982666\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.405333936214447\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.4052342772483826\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 2.405139923095703\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 5 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (5, 483.0393371582031, {'accuracy': 0.0}, 412.39301059299993)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 483.039337\n","Main Test     - Accuracy: 0.000000, Loss: 482.905307\n","Standard Test - Accuracy: 0.000000, Loss: 483.039337\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 6]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 6 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (6, 493.61721181869507, {'accuracy': 0.0}, 491.51038586299995)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 493.617212\n","Main Test     - Accuracy: 0.000000, Loss: 493.458619\n","Standard Test - Accuracy: 0.000000, Loss: 493.617212\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 7]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 7 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (7, 507.0087673664093, {'accuracy': 0.0}, 573.402576465)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 507.008767\n","Main Test     - Accuracy: 0.000000, Loss: 506.976698\n","Standard Test - Accuracy: 0.000000, Loss: 507.008767\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 8]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 8 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (8, 508.33174204826355, {'accuracy': 0.0}, 652.182707271)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 508.331742\n","Main Test     - Accuracy: 0.000000, Loss: 508.323826\n","Standard Test - Accuracy: 0.000000, Loss: 508.331742\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 9]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.473904550075531\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.287226378917694\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.171488463878632\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.0635674595832825\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.961351275444031\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.886510074138641\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.825867831707001\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.768129408359528\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.707202792167664\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.651952385902405\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.61210560798645\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.576880633831024\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.544612228870392\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.5140021443367\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.481521546840668\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.4543227553367615\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.431242763996124\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.408057928085327\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.386400580406189\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 5.367894649505615\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 9 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (9, 503.8460831642151, {'accuracy': 0.0}, 734.324687412)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 503.846083\n","Main Test     - Accuracy: 0.000000, Loss: 503.732672\n","Standard Test - Accuracy: 0.000000, Loss: 503.846083\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 10]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 10 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (10, 496.68421149253845, {'accuracy': 0.0}, 816.707883171)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 496.684211\n","Main Test     - Accuracy: 0.000000, Loss: 496.449682\n","Standard Test - Accuracy: 0.000000, Loss: 496.684211\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 11]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 11 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (11, 492.7241027355194, {'accuracy': 0.0}, 896.4847968209999)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 492.724103\n","Main Test     - Accuracy: 0.000000, Loss: 492.433147\n","Standard Test - Accuracy: 0.000000, Loss: 492.724103\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 12]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 12 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (12, 486.5337920188904, {'accuracy': 0.0}, 976.665644469)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 486.533792\n","Main Test     - Accuracy: 0.000000, Loss: 486.317210\n","Standard Test - Accuracy: 0.000000, Loss: 486.533792\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 13]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 13 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (13, 489.83921456336975, {'accuracy': 0.0}, 1055.789266971)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 489.839215\n","Main Test     - Accuracy: 0.000000, Loss: 489.544717\n","Standard Test - Accuracy: 0.000000, Loss: 489.839215\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 14]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 4.083709955215454\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 3.5230275988578796\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 3.2043486535549164\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 3.006863087415695\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.877469629049301\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.789621651172638\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.7271369993686676\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.681635797023773\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.6481682658195496\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.622266173362732\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.601980537176132\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5857277512550354\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5720734894275665\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5605735182762146\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5508381724357605\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5424992442131042\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5351234078407288\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5287011563777924\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.5228686332702637\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 2.51789990067482\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 14 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (14, 482.34416818618774, {'accuracy': 0.01}, 1137.200526069)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 482.344168\n","Main Test     - Accuracy: 0.011151, Loss: 482.266255\n","Standard Test - Accuracy: 0.010000, Loss: 482.344168\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 15]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 15 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (15, 482.3646192550659, {'accuracy': 2.01}, 1219.393864846)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 482.364619\n","Main Test     - Accuracy: 2.241302, Loss: 482.305370\n","Standard Test - Accuracy: 2.010000, Loss: 482.364619\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 16]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 16 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (16, 481.3283348083496, {'accuracy': 8.73}, 1298.89088851)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 481.328335\n","Main Test     - Accuracy: 9.734612, Loss: 481.314049\n","Standard Test - Accuracy: 8.730000, Loss: 481.328335\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 17]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 17 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (17, 480.5480811595917, {'accuracy': 10.8}, 1380.94049347)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.548081\n","Main Test     - Accuracy: 12.042819, Loss: 480.553239\n","Standard Test - Accuracy: 10.800000, Loss: 480.548081\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 18]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398113578557968\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398081511259079\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980742394924164\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980704247951508\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980671763420105\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980648517608643\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.39806267619133\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980611860752106\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398059666156769\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980584144592285\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398057520389557\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980565071105957\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398055672645569\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398054927587509\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398054212331772\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980535864830017\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980528712272644\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398052304983139\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980515599250793\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980509638786316\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 18 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (18, 479.4405038356781, {'accuracy': 13.53}, 1475.1191834410001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.440504\n","Main Test     - Accuracy: 14.897413, Loss: 479.445109\n","Standard Test - Accuracy: 13.530000, Loss: 479.440504\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 19]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 19 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (19, 478.9580063819885, {'accuracy': 16.39}, 1556.321194937)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 478.958006\n","Main Test     - Accuracy: 17.752007, Loss: 478.943017\n","Standard Test - Accuracy: 16.390000, Loss: 478.958006\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 20]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3987755477428436\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982422947883606\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398189514875412\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981679677963257\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398156374692917\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981489539146423\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981440663337708\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398140251636505\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398136794567108\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981338143348694\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981307446956635\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981281220912933\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398125648498535\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981226086616516\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981195986270905\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981167376041412\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981138467788696\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981112241744995\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981083035469055\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981057703495026\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 20 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (20, 480.39688754081726, {'accuracy': 13.99}, 1651.6669131)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.396888\n","Main Test     - Accuracy: 15.399197, Loss: 480.415369\n","Standard Test - Accuracy: 13.990000, Loss: 480.396888\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 21]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 21 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (21, 478.21924591064453, {'accuracy': 16.2}, 1732.3892994730002)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 478.219246\n","Main Test     - Accuracy: 17.818912, Loss: 478.114458\n","Standard Test - Accuracy: 16.200000, Loss: 478.219246\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 22]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 22 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (22, 477.9728240966797, {'accuracy': 20.98}, 1812.5195068300002)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 477.972824\n","Main Test     - Accuracy: 22.747547, Loss: 477.970382\n","Standard Test - Accuracy: 20.980000, Loss: 477.972824\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 23]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 23 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (23, 476.4877917766571, {'accuracy': 25.2}, 1892.7919258959998)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 476.487792\n","Main Test     - Accuracy: 27.520071, Loss: 476.397079\n","Standard Test - Accuracy: 25.200000, Loss: 476.487792\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 24]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 24 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (24, 474.94398736953735, {'accuracy': 23.95}, 1972.444429844)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 474.943987\n","Main Test     - Accuracy: 26.494202, Loss: 474.811974\n","Standard Test - Accuracy: 23.950000, Loss: 474.943987\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 25]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 25 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (25, 472.7078106403351, {'accuracy': 24.71}, 2055.089309526)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 472.707811\n","Main Test     - Accuracy: 27.508921, Loss: 472.289474\n","Standard Test - Accuracy: 24.710000, Loss: 472.707811\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 26]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 26 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (26, 471.2357635498047, {'accuracy': 20.87}, 2136.556646622)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 471.235764\n","Main Test     - Accuracy: 23.271632, Loss: 470.427741\n","Standard Test - Accuracy: 20.870000, Loss: 471.235764\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 27]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 27 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (27, 467.21248745918274, {'accuracy': 21.69}, 2217.637995477)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 467.212487\n","Main Test     - Accuracy: 24.185995, Loss: 465.681848\n","Standard Test - Accuracy: 21.690000, Loss: 467.212487\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 28]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 28 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (28, 463.02633905410767, {'accuracy': 22.06}, 2297.713344849)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 463.026339\n","Main Test     - Accuracy: 24.598573, Loss: 460.677466\n","Standard Test - Accuracy: 22.060000, Loss: 463.026339\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 29]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 29 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (29, 458.7360649108887, {'accuracy': 25.74}, 2377.5074166169998)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 458.736065\n","Main Test     - Accuracy: 28.702052, Loss: 455.627461\n","Standard Test - Accuracy: 25.740000, Loss: 458.736065\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 30]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 30 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (30, 454.41688776016235, {'accuracy': 33.26}, 2459.579600697)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 454.416888\n","Main Test     - Accuracy: 37.087422, Loss: 450.388338\n","Standard Test - Accuracy: 33.260000, Loss: 454.416888\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 31]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 31 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (31, 457.6077883243561, {'accuracy': 31.28}, 2541.2555854429997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 457.607788\n","Main Test     - Accuracy: 34.879572, Loss: 453.461724\n","Standard Test - Accuracy: 31.280000, Loss: 457.607788\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 32]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 32 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (32, 455.31725788116455, {'accuracy': 33.77}, 2620.4514341239997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 455.317258\n","Main Test     - Accuracy: 37.656111, Loss: 450.778410\n","Standard Test - Accuracy: 33.770000, Loss: 455.317258\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 33]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 33 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (33, 472.74192929267883, {'accuracy': 19.29}, 2701.2891491259998)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 472.741929\n","Main Test     - Accuracy: 21.509813, Loss: 469.765031\n","Standard Test - Accuracy: 19.290000, Loss: 472.741929\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 34]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 34 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (34, 461.56015729904175, {'accuracy': 28.32}, 2783.2474664929996)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 461.560157\n","Main Test     - Accuracy: 31.578947, Loss: 457.343834\n","Standard Test - Accuracy: 28.320000, Loss: 461.560157\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 35]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 19.8058602809906\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 17.315622329711914\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 16.180904150009155\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 15.284292817115784\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 14.37239408493042\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 13.907604694366455\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 13.614909291267395\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 13.387352347373962\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 13.19233226776123\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 13.020403385162354\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 12.85283076763153\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 12.605397820472717\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 11.344153046607971\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 10.078700065612793\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 9.767359495162964\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.524284660816193\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.160978376865387\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 6.834382474422455\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 6.670202434062958\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 6.5570743680000305\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 35 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (35, 459.1387851238251, {'accuracy': 30.61}, 2872.832062443)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 459.138785\n","Main Test     - Accuracy: 34.132471, Loss: 454.563844\n","Standard Test - Accuracy: 30.610000, Loss: 459.138785\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 36]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.657121360301971\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.503649473190308\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.386658489704132\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.292669355869293\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.216200113296509\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.151263952255249\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.095601916313171\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.04351931810379\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 5.926087260246277\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 5.107793509960175\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.838600158691406\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.777334988117218\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.748637497425079\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.729024767875671\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.713842749595642\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.701551735401154\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.690513372421265\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.681048214435577\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.672468066215515\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.664559245109558\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 36 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (36, 451.1016869544983, {'accuracy': 35.63}, 2963.285962509)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 451.101687\n","Main Test     - Accuracy: 39.730152, Loss: 445.586283\n","Standard Test - Accuracy: 35.630000, Loss: 451.101687\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 37]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.1989405155181885\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.187267303466797\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.177594304084778\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.168941676616669\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.161170244216919\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.153952658176422\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.147688329219818\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.141704559326172\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.136268734931946\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.131293535232544\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.126766264438629\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.122642457485199\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.1185837388038635\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.1147677302360535\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.111472010612488\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.108163237571716\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.104974210262299\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.102214276790619\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.099429428577423\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 4.096727192401886\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 37 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (37, 444.9469847679138, {'accuracy': 40.39}, 3053.6521581869997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 444.946985\n","Main Test     - Accuracy: 45.037913, Loss: 438.662797\n","Standard Test - Accuracy: 40.390000, Loss: 444.946985\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 38]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 38 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (38, 453.9886574745178, {'accuracy': 32.05}, 3135.5052579499998)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 453.988657\n","Main Test     - Accuracy: 35.738180, Loss: 448.657949\n","Standard Test - Accuracy: 32.050000, Loss: 453.988657\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 39]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 39 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (39, 437.35374641418457, {'accuracy': 46.23}, 3217.5111241189998)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 437.353746\n","Main Test     - Accuracy: 51.549955, Loss: 430.079030\n","Standard Test - Accuracy: 46.230000, Loss: 437.353746\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 40]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.021122992038727\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.017455041408539\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.015132248401642\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.01311731338501\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.011395812034607\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.009783983230591\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.008230924606323\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.0067620277404785\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.005440533161163\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.004171073436737\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.002859830856323\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.001679301261902\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 4.000665009021759\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.9995508193969727\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.998504638671875\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.9975439608097076\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.996590405702591\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.9956504702568054\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.9948002099990845\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 3.9938692450523376\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 40 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (40, 444.8549392223358, {'accuracy': 38.81}, 3313.6451546579997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 444.854939\n","Main Test     - Accuracy: 43.276093, Loss: 438.374903\n","Standard Test - Accuracy: 38.810000, Loss: 444.854939\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 41]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 41 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (41, 436.9218189716339, {'accuracy': 43.85}, 3393.5975888499997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 436.921819\n","Main Test     - Accuracy: 48.896075, Loss: 429.492417\n","Standard Test - Accuracy: 43.850000, Loss: 436.921819\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 42]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.234916508197784\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.227635085582733\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.2243505120277405\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.222082614898682\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.220191121101379\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.218641877174377\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.217134535312653\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.215674102306366\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.214199960231781\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.212625622749329\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.210394442081451\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.203558683395386\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 5.019720435142517\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.315260052680969\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.247693300247192\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.2408729791641235\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.236502468585968\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.233531177043915\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.23126745223999\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.229497015476227\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 42 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (42, 429.9877688884735, {'accuracy': 47.9}, 3476.491882589)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 429.987769\n","Main Test     - Accuracy: 53.412132, Loss: 421.752731\n","Standard Test - Accuracy: 47.900000, Loss: 429.987769\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 43]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.361328840255737\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.210463225841522\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.158618330955505\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.146044909954071\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.129494249820709\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.117442488670349\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.108964622020721\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.101502776145935\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.095142662525177\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.089902937412262\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.085684895515442\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.0822126269340515\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.0793129205703735\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.076643228530884\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.074248552322388\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.0720095038414\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.069803595542908\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.067428648471832\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.065136015415192\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 4.062893092632294\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 43 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (43, 428.36815786361694, {'accuracy': 46.92}, 3560.3748011999996)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 428.368158\n","Main Test     - Accuracy: 52.319358, Loss: 419.873460\n","Standard Test - Accuracy: 46.920000, Loss: 428.368158\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 44]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 44 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (44, 432.01932549476624, {'accuracy': 44.52}, 3643.125481997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 432.019325\n","Main Test     - Accuracy: 49.643176, Loss: 423.931056\n","Standard Test - Accuracy: 44.520000, Loss: 432.019325\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 45]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 45 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (45, 420.91055023670197, {'accuracy': 52.74}, 3724.6751171779997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.193798, Loss: 420.910550\n","Main Test     - Accuracy: 58.809099, Loss: 411.588282\n","Standard Test - Accuracy: 52.740000, Loss: 420.910550\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 46]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 46 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (46, 422.3750603199005, {'accuracy': 51.65}, 3804.0129875689995)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.678295, Loss: 422.375060\n","Main Test     - Accuracy: 57.593666, Loss: 413.156893\n","Standard Test - Accuracy: 51.650000, Loss: 422.375060\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 47]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.6546801924705505\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.519599437713623\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.492350161075592\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.48383891582489\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.4794028997421265\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.4762656688690186\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.4737109541893005\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.471529901027679\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.469495892524719\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.467645704746246\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.46618127822876\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.464919567108154\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.463812530040741\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.462831497192383\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.461825966835022\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.460854887962341\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.459900856018066\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.458939611911774\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.457957148551941\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.45690244436264\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 47 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (47, 428.30525970458984, {'accuracy': 45.98}, 3892.4106206579995)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.290698, Loss: 428.305260\n","Main Test     - Accuracy: 51.271186, Loss: 419.753154\n","Standard Test - Accuracy: 45.980000, Loss: 428.305260\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 48]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 48 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (48, 414.9917129278183, {'accuracy': 56.65}, 3972.359749013)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 414.991713\n","Main Test     - Accuracy: 63.169045, Loss: 404.997097\n","Standard Test - Accuracy: 56.650000, Loss: 414.991713\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 49]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 49 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (49, 409.4820388555527, {'accuracy': 60.19}, 4051.3986871579996)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 5.329457, Loss: 409.482039\n","Main Test     - Accuracy: 67.116414, Loss: 399.185347\n","Standard Test - Accuracy: 60.190000, Loss: 409.482039\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 50]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 6.236859858036041\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 6.090745270252228\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 6.027652680873871\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.995049297809601\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.966587126255035\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.948919057846069\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.933174312114716\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.919173896312714\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.906568229198456\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.894313633441925\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.882857799530029\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.871699571609497\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.8602582812309265\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.849792897701263\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.839157938957214\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.828277111053467\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.8158193826675415\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.796446800231934\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.715848743915558\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 5.423388957977295\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 50 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (50, 406.0687906742096, {'accuracy': 60.2}, 4139.968016637)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 3.197674, Loss: 406.068791\n","Main Test     - Accuracy: 66.938002, Loss: 396.470330\n","Standard Test - Accuracy: 60.200000, Loss: 406.068791\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 51]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 51 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (51, 402.39579236507416, {'accuracy': 62.78}, 4220.279667312)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 5.523256, Loss: 402.395792\n","Main Test     - Accuracy: 66.938002, Loss: 396.228271\n","Standard Test - Accuracy: 62.780000, Loss: 402.395792\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 52]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 52 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (52, 399.8667231798172, {'accuracy': 63.07}, 4300.218931553)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.713178, Loss: 399.866723\n","Main Test     - Accuracy: 67.350580, Loss: 393.342581\n","Standard Test - Accuracy: 63.070000, Loss: 399.866723\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 53]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 53 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (53, 396.566561460495, {'accuracy': 64.0}, 4381.942476141)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 3.003876, Loss: 396.566561\n","Main Test     - Accuracy: 67.818912, Loss: 390.552144\n","Standard Test - Accuracy: 64.000000, Loss: 396.566561\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 54]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 54 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (54, 394.399773478508, {'accuracy': 64.36}, 4461.864738908001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.616279, Loss: 394.399773\n","Main Test     - Accuracy: 67.874665, Loss: 388.630662\n","Standard Test - Accuracy: 64.360000, Loss: 394.399773\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 55]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 55 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (55, 392.31664395332336, {'accuracy': 64.6}, 4541.996306109)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 392.316644\n","Main Test     - Accuracy: 68.521409, Loss: 385.848761\n","Standard Test - Accuracy: 64.600000, Loss: 392.316644\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 56]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 56 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (56, 389.8669877052307, {'accuracy': 65.32}, 4623.332732519)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 389.866988\n","Main Test     - Accuracy: 68.354148, Loss: 384.748319\n","Standard Test - Accuracy: 65.320000, Loss: 389.866988\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 57]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 57 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (57, 387.93965351581573, {'accuracy': 65.98}, 4702.4974023780005)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.906977, Loss: 387.939654\n","Main Test     - Accuracy: 69.134701, Loss: 382.586752\n","Standard Test - Accuracy: 65.980000, Loss: 387.939654\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 58]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 58 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (58, 386.2879601716995, {'accuracy': 66.25}, 4782.226207856001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 386.287960\n","Main Test     - Accuracy: 69.391169, Loss: 380.877893\n","Standard Test - Accuracy: 66.250000, Loss: 386.287960\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 59]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 59 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (59, 384.9700736999512, {'accuracy': 66.63}, 4862.586253606)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.841085, Loss: 384.970074\n","Main Test     - Accuracy: 69.747993, Loss: 379.554474\n","Standard Test - Accuracy: 66.630000, Loss: 384.970074\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 60]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.53778886795044\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.365316033363342\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.291632652282715\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.241214990615845\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.201082468032837\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.163435101509094\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.132098317146301\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.102766394615173\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.074190378189087\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.047241568565369\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.022958993911743\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.999328315258026\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.978929221630096\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.959228515625\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.9413822889328\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.926939427852631\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.912153780460358\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.900486350059509\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.890040278434753\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.880519151687622\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 60 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (60, 384.75459146499634, {'accuracy': 66.16}, 4957.9751977860005)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 384.754591\n","Main Test     - Accuracy: 68.789028, Loss: 380.171401\n","Standard Test - Accuracy: 66.160000, Loss: 384.754591\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 61]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.255273580551147\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.216236233711243\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.200959205627441\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.189008235931396\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.180015921592712\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.17137324810028\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.163567543029785\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.156840324401855\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.150253415107727\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.144375205039978\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.138137578964233\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.1328125\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.128317832946777\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.123769402503967\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.118694067001343\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.112943768501282\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.10717236995697\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.101451516151428\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.097611427307129\n","\u001b[2m\u001b[36m(ClientAppActor pid=396)\u001b[0m Attacker Generator Loss: 8.093080639839172\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 61 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (61, 384.8546584844589, {'accuracy': 65.78}, 5041.426946157)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 384.854658\n","Main Test     - Accuracy: 67.863515, Loss: 381.164327\n","Standard Test - Accuracy: 65.780000, Loss: 384.854658\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 62]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 62 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (62, 382.096578001976, {'accuracy': 67.62}, 5123.769454633)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.325581, Loss: 382.096578\n","Main Test     - Accuracy: 70.138269, Loss: 377.718012\n","Standard Test - Accuracy: 67.620000, Loss: 382.096578\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 63]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 63 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (63, 379.7054761648178, {'accuracy': 68.44}, 5204.798439391)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.228682, Loss: 379.705476\n","Main Test     - Accuracy: 71.186441, Loss: 374.896349\n","Standard Test - Accuracy: 68.440000, Loss: 379.705476\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 64]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.3669193983078\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.240832328796387\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.214075803756714\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.193558931350708\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.181214451789856\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.17394232749939\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.168522119522095\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.164267182350159\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.161044001579285\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.157170295715332\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.153979063034058\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.151406049728394\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.148895859718323\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.146180868148804\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.143744826316833\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.141496181488037\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.138806104660034\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.136078715324402\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.134202122688293\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 8.131933808326721\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 64 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (64, 378.50820565223694, {'accuracy': 68.56}, 5294.977691553)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.937984, Loss: 378.508206\n","Main Test     - Accuracy: 70.941124, Loss: 374.255180\n","Standard Test - Accuracy: 68.560000, Loss: 378.508206\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 65]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 65 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (65, 376.9635899066925, {'accuracy': 69.48}, 5376.149738339001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.034884, Loss: 376.963590\n","Main Test     - Accuracy: 71.966994, Loss: 372.633956\n","Standard Test - Accuracy: 69.480000, Loss: 376.963590\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 66]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 66 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (66, 375.6830735206604, {'accuracy': 69.85}, 5456.536155199)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.937984, Loss: 375.683074\n","Main Test     - Accuracy: 72.201160, Loss: 371.457852\n","Standard Test - Accuracy: 69.850000, Loss: 375.683074\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 67]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 67 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (67, 375.8955844640732, {'accuracy': 69.2}, 5536.800733432)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 375.895584\n","Main Test     - Accuracy: 71.186441, Loss: 372.447531\n","Standard Test - Accuracy: 69.200000, Loss: 375.895584\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 68]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.630433797836304\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.533179521560669\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.495445013046265\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.480925440788269\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.46977412700653\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.461498975753784\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.455119252204895\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.448922038078308\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.443540215492249\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.438599348068237\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.433636546134949\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.42925214767456\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.42452847957611\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.419246554374695\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.414576172828674\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.410097599029541\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.40604555606842\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.402447581291199\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.398674607276917\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.395340204238892\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 68 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (68, 373.59549057483673, {'accuracy': 70.69}, 5627.797493788)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.228682, Loss: 373.595491\n","Main Test     - Accuracy: 72.903657, Loss: 369.633902\n","Standard Test - Accuracy: 70.690000, Loss: 373.595491\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 69]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.154192805290222\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.08787727355957\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.074525833129883\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.064592123031616\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.059070110321045\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.055174827575684\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.052031755447388\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.048408269882202\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.045660018920898\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.043237090110779\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.040101885795593\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.038252115249634\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.03593373298645\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.033234357833862\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.03127634525299\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.029605984687805\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.026861429214478\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.025644540786743\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.023361206054688\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.021013736724854\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 69 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (69, 372.5972559452057, {'accuracy': 70.78}, 5709.366348372)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.937984, Loss: 372.597256\n","Main Test     - Accuracy: 72.546833, Loss: 369.461623\n","Standard Test - Accuracy: 70.780000, Loss: 372.597256\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 70]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 70 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (70, 371.35220193862915, {'accuracy': 71.48}, 5790.825564639)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.841085, Loss: 371.352202\n","Main Test     - Accuracy: 73.271632, Loss: 368.159146\n","Standard Test - Accuracy: 71.480000, Loss: 371.352202\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 71]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 71 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (71, 370.4387322664261, {'accuracy': 71.66}, 5871.00129059)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 370.438732\n","Main Test     - Accuracy: 73.360839, Loss: 367.301456\n","Standard Test - Accuracy: 71.660000, Loss: 370.438732\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 72]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 72 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (72, 369.0723843574524, {'accuracy': 72.44}, 5950.160867272)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 369.072384\n","Main Test     - Accuracy: 74.230598, Loss: 365.781169\n","Standard Test - Accuracy: 72.440000, Loss: 369.072384\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 73]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.747970461845398\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.733354806900024\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.726398229598999\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.720572471618652\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.715921878814697\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.710286378860474\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.699273109436035\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.6342613697052\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.295959234237671\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.123955845832825\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.07848572731018\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.053412079811096\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.0324786901474\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.019527316093445\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.010811686515808\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 9.002730131149292\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 8.995745062828064\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 8.989696621894836\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 8.983843445777893\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 8.97779929637909\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 73 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (73, 368.43506729602814, {'accuracy': 72.34}, 6040.904873477)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 368.435067\n","Main Test     - Accuracy: 73.773417, Loss: 365.844700\n","Standard Test - Accuracy: 72.340000, Loss: 368.435067\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 74]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 74 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (74, 367.2065644264221, {'accuracy': 73.0}, 6122.603769262)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.550388, Loss: 367.206564\n","Main Test     - Accuracy: 74.308653, Loss: 364.734817\n","Standard Test - Accuracy: 73.000000, Loss: 367.206564\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 75]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.208023071289062\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.182824850082397\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.172921419143677\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.165902256965637\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.159209251403809\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.153195142745972\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.147988200187683\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.143985986709595\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.138122320175171\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.133812427520752\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.129287838935852\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.125079035758972\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.120180130004883\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.114778995513916\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.108409404754639\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.10255777835846\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.096227288246155\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.089555382728577\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.083121538162231\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.076924920082092\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 75 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (75, 366.1520000696182, {'accuracy': 73.26}, 6203.160273932001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 366.152000\n","Main Test     - Accuracy: 74.453613, Loss: 364.047328\n","Standard Test - Accuracy: 73.260000, Loss: 366.152000\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 76]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 76 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (76, 366.2884237766266, {'accuracy': 73.2}, 6285.027918447)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 366.288424\n","Main Test     - Accuracy: 74.007583, Loss: 364.837983\n","Standard Test - Accuracy: 73.200000, Loss: 366.288424\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 77]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.487728834152222\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.453176498413086\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.441641926765442\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.435129761695862\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.430160403251648\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.426351308822632\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.423584222793579\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.420479655265808\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.41812252998352\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.415496945381165\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.413035273551941\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.410447120666504\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.408304810523987\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.405583620071411\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.40318512916565\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.401000738143921\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.398225784301758\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.395819067955017\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.39333724975586\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.391359210014343\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 77 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (77, 364.1535004377365, {'accuracy': 74.44}, 6381.694324787)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 364.153500\n","Main Test     - Accuracy: 75.546387, Loss: 362.097004\n","Standard Test - Accuracy: 74.440000, Loss: 364.153500\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 78]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 78 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (78, 363.6935787200928, {'accuracy': 74.59}, 6462.118877765)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.937984, Loss: 363.693579\n","Main Test     - Accuracy: 75.479483, Loss: 362.043966\n","Standard Test - Accuracy: 74.590000, Loss: 363.693579\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 79]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.31881034374237\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.24595296382904\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.238263249397278\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.22912871837616\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.223866701126099\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.2211252450943\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.219064712524414\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.217393398284912\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.21520471572876\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.213521003723145\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.211482048034668\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.210031032562256\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.207772850990295\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.206244826316833\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.204329133033752\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.203143119812012\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.20188856124878\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.200242161750793\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.198609709739685\n","\u001b[2m\u001b[36m(ClientAppActor pid=318)\u001b[0m Attacker Generator Loss: 9.197475552558899\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 79 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (79, 362.85252726078033, {'accuracy': 74.99}, 6552.790977613)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.453488, Loss: 362.852527\n","Main Test     - Accuracy: 75.981267, Loss: 360.994711\n","Standard Test - Accuracy: 74.990000, Loss: 362.852527\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 80]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.381977558135986\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.366698265075684\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.361745476722717\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.358818888664246\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.356746196746826\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.35454773902893\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.353262305259705\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.35138487815857\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.350083708763123\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.34845745563507\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.34684669971466\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.344822525978088\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.343420386314392\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.341560244560242\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.339579939842224\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.337236404418945\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.335480690002441\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.33324420452118\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.33115530014038\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 9.329305291175842\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 80 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (80, 362.924196600914, {'accuracy': 74.8}, 6635.662549662)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 362.924197\n","Main Test     - Accuracy: 76.204282, Loss: 360.323212\n","Standard Test - Accuracy: 74.800000, Loss: 362.924197\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 81]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 81 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (81, 362.39187002182007, {'accuracy': 75.1}, 6715.446837871)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.550388, Loss: 362.391870\n","Main Test     - Accuracy: 76.360393, Loss: 360.056810\n","Standard Test - Accuracy: 75.100000, Loss: 362.391870\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 82]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.326118350028992\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.319991111755371\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.317301869392395\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.314745545387268\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.313119649887085\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.311106324195862\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.308830261230469\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.306872963905334\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.304628133773804\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.301820397377014\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.29942798614502\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.296430110931396\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.29227864742279\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.286965370178223\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.275222659111023\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 9.209851384162903\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 8.648637652397156\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 8.28832733631134\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 8.243317604064941\n","\u001b[2m\u001b[36m(ClientAppActor pid=356)\u001b[0m Attacker Generator Loss: 8.222448706626892\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 82 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (82, 361.3541316986084, {'accuracy': 75.6}, 6798.109945900001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 361.354132\n","Main Test     - Accuracy: 76.137377, Loss: 360.409777\n","Standard Test - Accuracy: 75.600000, Loss: 361.354132\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 83]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 83 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (83, 359.9709266424179, {'accuracy': 76.18}, 6880.308179785)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 359.970927\n","Main Test     - Accuracy: 77.118644, Loss: 358.111982\n","Standard Test - Accuracy: 76.180000, Loss: 359.970927\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 84]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.541820287704468\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.516521573066711\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.505577683448792\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.497440218925476\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.491376280784607\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.485968112945557\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.482224225997925\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.477620720863342\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.474456906318665\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.470308661460876\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.466453433036804\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.463202118873596\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.459619641304016\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.45582890510559\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.45112431049347\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.446603059768677\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.440508723258972\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.431941986083984\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.415538787841797\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 8.357498288154602\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 84 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (84, 359.3990126848221, {'accuracy': 76.39}, 6961.775103641)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 359.399013\n","Main Test     - Accuracy: 77.118644, Loss: 358.012078\n","Standard Test - Accuracy: 76.390000, Loss: 359.399013\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 85]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.279735088348389\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 8.017603635787964\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.9211395382881165\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.8898011445999146\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.870987057685852\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.857428193092346\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.847622334957123\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.838533103466034\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.830888569355011\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.82439798116684\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.816557168960571\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.809740424156189\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.801743149757385\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.794572710990906\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.7872525453567505\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.77992457151413\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.771334886550903\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.762841582298279\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.751990377902985\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 7.738265037536621\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 85 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (85, 358.5644247531891, {'accuracy': 76.97}, 7049.453761524001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 358.564425\n","Main Test     - Accuracy: 77.252453, Loss: 357.841475\n","Standard Test - Accuracy: 76.970000, Loss: 358.564425\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 86]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 86 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (86, 358.5143599510193, {'accuracy': 76.98}, 7129.75655697)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 358.514360\n","Main Test     - Accuracy: 77.140946, Loss: 358.084558\n","Standard Test - Accuracy: 76.980000, Loss: 358.514360\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 87]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.898297727108002\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.877987027168274\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.8560720682144165\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.798401653766632\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.602770030498505\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.31581175327301\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 7.120049715042114\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.988486230373383\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.9194106459617615\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.868394911289215\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.83171534538269\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.802213549613953\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.781453192234039\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.760517477989197\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.7445573806762695\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.729922890663147\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.718111217021942\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.706274688243866\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.694659948348999\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.686834216117859\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 87 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (87, 357.3728709220886, {'accuracy': 77.29}, 7212.4495649010005)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.744186, Loss: 357.372871\n","Main Test     - Accuracy: 77.709634, Loss: 356.586446\n","Standard Test - Accuracy: 77.290000, Loss: 357.372871\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 88]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 88 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (88, 357.05048155784607, {'accuracy': 77.54}, 7294.079078554)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.550388, Loss: 357.050482\n","Main Test     - Accuracy: 77.821142, Loss: 356.482113\n","Standard Test - Accuracy: 77.540000, Loss: 357.050482\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 89]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 89 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (89, 356.9487546682358, {'accuracy': 77.51}, 7376.2117065130005)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 356.948755\n","Main Test     - Accuracy: 77.553524, Loss: 356.753202\n","Standard Test - Accuracy: 77.510000, Loss: 356.948755\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 90]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 90 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (90, 355.785986661911, {'accuracy': 78.17}, 7457.43769321)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 355.785987\n","Main Test     - Accuracy: 78.490187, Loss: 355.175263\n","Standard Test - Accuracy: 78.170000, Loss: 355.785987\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 91]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 7.067254066467285\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.998367011547089\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.978073835372925\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.965455114841461\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.95254111289978\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.94643622636795\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.939644277095795\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.933613479137421\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.928338587284088\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.92395806312561\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.9184253215789795\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.913369059562683\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.908552765846252\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.901749968528748\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.897035121917725\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.892410457134247\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.8874295353889465\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.882712543010712\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.877928376197815\n","\u001b[2m\u001b[36m(ClientAppActor pid=340)\u001b[0m Attacker Generator Loss: 6.87064403295517\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 91 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (91, 355.7320737838745, {'accuracy': 78.03}, 7539.979523389)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 355.732074\n","Main Test     - Accuracy: 78.200268, Loss: 355.245557\n","Standard Test - Accuracy: 78.030000, Loss: 355.732074\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 92]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 92 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (92, 355.7413399219513, {'accuracy': 78.0}, 7620.303165998001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 355.741340\n","Main Test     - Accuracy: 78.133363, Loss: 355.393558\n","Standard Test - Accuracy: 78.000000, Loss: 355.741340\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 93]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.832066535949707\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.7832270860672\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.7657341957092285\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.758977234363556\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.751867353916168\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.747906506061554\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.743847012519836\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.739056050777435\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.736267149448395\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.732048332691193\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.728789567947388\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.7248998284339905\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.722052335739136\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.717077434062958\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.714160263538361\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.710088849067688\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.706227719783783\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.70312112569809\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.699192643165588\n","\u001b[2m\u001b[36m(ClientAppActor pid=372)\u001b[0m Attacker Generator Loss: 6.694935739040375\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 93 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (93, 354.42468452453613, {'accuracy': 78.57}, 7701.682505433)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.356589, Loss: 354.424685\n","Main Test     - Accuracy: 78.590544, Loss: 354.428843\n","Standard Test - Accuracy: 78.570000, Loss: 354.424685\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 94]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 94 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (94, 354.65149784088135, {'accuracy': 78.32}, 7784.275757519)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 354.651498\n","Main Test     - Accuracy: 78.623996, Loss: 354.024862\n","Standard Test - Accuracy: 78.320000, Loss: 354.651498\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 95]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 95 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (95, 353.96348774433136, {'accuracy': 78.74}, 7865.948332483)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.453488, Loss: 353.963488\n","Main Test     - Accuracy: 78.768956, Loss: 353.883397\n","Standard Test - Accuracy: 78.740000, Loss: 353.963488\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 96]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 96 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (96, 353.735387802124, {'accuracy': 78.81}, 7945.169650932)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.162791, Loss: 353.735388\n","Main Test     - Accuracy: 79.125781, Loss: 353.234345\n","Standard Test - Accuracy: 78.810000, Loss: 353.735388\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 97]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 97 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (97, 353.00091552734375, {'accuracy': 79.04}, 8027.3904006719995)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 353.000916\n","Main Test     - Accuracy: 79.192685, Loss: 352.710054\n","Standard Test - Accuracy: 79.040000, Loss: 353.000916\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 98]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.978930711746216\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.885898649692535\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.862431645393372\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.844352960586548\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.833070337772369\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.828584253787994\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.82448947429657\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.820935428142548\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.81790155172348\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.815686941146851\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.81314742565155\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.809774398803711\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.807003855705261\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.804367244243622\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.8014527559280396\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.800229847431183\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.7974976897239685\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.794745743274689\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.792643487453461\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 6.790077388286591\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 98 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (98, 353.6625646352768, {'accuracy': 78.6}, 8117.749297585001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.065891, Loss: 353.662565\n","Main Test     - Accuracy: 79.003122, Loss: 352.788645\n","Standard Test - Accuracy: 78.600000, Loss: 353.662565\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 99]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 99 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (99, 352.24497735500336, {'accuracy': 79.41}, 8198.00145147)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 1.259690, Loss: 352.244977\n","Main Test     - Accuracy: 79.393399, Loss: 352.194779\n","Standard Test - Accuracy: 79.410000, Loss: 352.244977\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 100]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 100 aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (100, 352.55585181713104, {'accuracy': 79.05}, 8278.26751665)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.872093, Loss: 352.555852\n","Main Test     - Accuracy: 79.259590, Loss: 352.075156\n","Standard Test - Accuracy: 79.050000, Loss: 352.555852\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [SUMMARY]\n","\u001b[92mINFO \u001b[0m:      Run finished 100 rounds in 8279.43s\n","\u001b[92mINFO \u001b[0m:      History (loss, distributed):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 1: 2.3982699871063233\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 2.398710036277771\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 2.3998117208480836\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 2.4029473304748534\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 2.4149222135543824\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 2.4678999185562134\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 2.534870076179504\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 2.5416409492492678\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 2.518236994743347\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 2.482118558883667\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 2.4624250650405886\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 2.431336450576782\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 2.4484836578369142\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 2.411238169670105\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 2.4109849452972414\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 16: 2.406602311134338\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 17: 2.4024243354797363\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 18: 2.3970810651779173\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 19: 2.394910788536072\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 20: 2.4013881206512453\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 21: 2.3912941455841064\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 22: 2.389337396621704\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 23: 2.382123041152954\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 24: 2.375388336181641\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 25: 2.3613555908203123\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 26: 2.357665205001831\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 27: 2.3377134799957275\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 28: 2.319063830375671\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 29: 2.301580810546875\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 30: 2.268381452560425\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 31: 2.2797744274139404\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 32: 2.281329894065857\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 33: 2.3586042881011964\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 34: 2.3098235368728637\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 35: 2.2982722997665403\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 36: 2.2543633699417116\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 37: 2.225741481781006\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 38: 2.269154596328735\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 39: 2.178900933265686\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 40: 2.2201125860214233\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 41: 2.1697190284729\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 42: 2.1487310409545897\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 43: 2.134335422515869\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 44: 2.1708362102508545\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 45: 2.100278687477112\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 46: 2.106085515022278\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 47: 2.1422032833099367\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 48: 2.0714545249938965\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 49: 2.0548701524734496\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 50: 2.04397873878479\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 51: 2.0081934452056887\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 52: 1.9987492322921754\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 53: 1.9771855473518372\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 54: 1.97554692029953\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 55: 1.9729077696800232\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 56: 1.9556555509567262\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 57: 1.9431839466094971\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 58: 1.9311041593551637\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 59: 1.9363633394241333\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 60: 1.9351736187934876\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 61: 1.930176603794098\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 62: 1.8983410120010376\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 63: 1.9040286660194397\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 64: 1.8867552638053895\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 65: 1.8902692914009094\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 66: 1.880172610282898\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 67: 1.8786344170570373\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 68: 1.8637425661087037\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 69: 1.8878710865974426\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 70: 1.8431966304779053\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 71: 1.8741076827049254\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 72: 1.8437718033790589\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 73: 1.8517422080039978\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 74: 1.8515696763992309\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 75: 1.8453715324401856\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 76: 1.8366742968559264\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 77: 1.8272297978401184\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 78: 1.826014506816864\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 79: 1.8226364493370055\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 80: 1.8213836312294007\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 81: 1.818847107887268\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 82: 1.8127089023590088\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 83: 1.7910175919532776\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 84: 1.8095631718635559\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 85: 1.8125255584716797\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 86: 1.800173282623291\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 87: 1.7848978638648987\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 88: 1.7684602975845336\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 89: 1.7881216287612915\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 90: 1.785593616962433\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 91: 1.7789784908294677\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 92: 1.7994167804718018\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 93: 1.7779842495918274\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 94: 1.7805348873138427\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 95: 1.7726691007614135\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 96: 1.78644118309021\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 97: 1.7660604119300842\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 98: 1.785029673576355\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 99: 1.773743712902069\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 100: 1.7629328846931458\\n')History (loss, centralized):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 0: 479.59767866134644\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 1: 479.6576726436615\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 479.7472610473633\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 479.96594762802124\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 480.5962505340576\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 483.0393371582031\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 493.61721181869507\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 507.0087673664093\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 508.33174204826355\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 503.8460831642151\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 496.68421149253845\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 492.7241027355194\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 486.5337920188904\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 489.83921456336975\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 482.34416818618774\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 482.3646192550659\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 16: 481.3283348083496\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 17: 480.5480811595917\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 18: 479.4405038356781\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 19: 478.9580063819885\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 20: 480.39688754081726\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 21: 478.21924591064453\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 22: 477.9728240966797\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 23: 476.4877917766571\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 24: 474.94398736953735\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 25: 472.7078106403351\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 26: 471.2357635498047\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 27: 467.21248745918274\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 28: 463.02633905410767\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 29: 458.7360649108887\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 30: 454.41688776016235\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 31: 457.6077883243561\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 32: 455.31725788116455\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 33: 472.74192929267883\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 34: 461.56015729904175\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 35: 459.1387851238251\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 36: 451.1016869544983\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 37: 444.9469847679138\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 38: 453.9886574745178\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 39: 437.35374641418457\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 40: 444.8549392223358\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 41: 436.9218189716339\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 42: 429.9877688884735\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 43: 428.36815786361694\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 44: 432.01932549476624\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 45: 420.91055023670197\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 46: 422.3750603199005\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 47: 428.30525970458984\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 48: 414.9917129278183\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 49: 409.4820388555527\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 50: 406.0687906742096\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 51: 402.39579236507416\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 52: 399.8667231798172\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 53: 396.566561460495\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 54: 394.399773478508\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 55: 392.31664395332336\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 56: 389.8669877052307\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 57: 387.93965351581573\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 58: 386.2879601716995\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 59: 384.9700736999512\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 60: 384.75459146499634\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 61: 384.8546584844589\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 62: 382.096578001976\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 63: 379.7054761648178\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 64: 378.50820565223694\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 65: 376.9635899066925\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 66: 375.6830735206604\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 67: 375.8955844640732\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 68: 373.59549057483673\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 69: 372.5972559452057\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 70: 371.35220193862915\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 71: 370.4387322664261\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 72: 369.0723843574524\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 73: 368.43506729602814\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 74: 367.2065644264221\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 75: 366.1520000696182\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 76: 366.2884237766266\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 77: 364.1535004377365\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 78: 363.6935787200928\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 79: 362.85252726078033\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 80: 362.924196600914\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 81: 362.39187002182007\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 82: 361.3541316986084\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 83: 359.9709266424179\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 84: 359.3990126848221\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 85: 358.5644247531891\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 86: 358.5143599510193\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 87: 357.3728709220886\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 88: 357.05048155784607\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 89: 356.9487546682358\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 90: 355.785986661911\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 91: 355.7320737838745\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 92: 355.7413399219513\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 93: 354.42468452453613\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 94: 354.65149784088135\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 95: 353.96348774433136\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 96: 353.735387802124\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 97: 353.00091552734375\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 98: 353.6625646352768\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 99: 352.24497735500336\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 100: 352.55585181713104\\n')History (metrics, centralized):\n","\u001b[92mINFO \u001b[0m:      \t{'accuracy': [(0, 10.09),\n","\u001b[92mINFO \u001b[0m:      \t              (1, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (2, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (3, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (4, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (5, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (6, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (7, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (8, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (9, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (10, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (11, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (12, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (13, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (14, 0.01),\n","\u001b[92mINFO \u001b[0m:      \t              (15, 2.01),\n","\u001b[92mINFO \u001b[0m:      \t              (16, 8.73),\n","\u001b[92mINFO \u001b[0m:      \t              (17, 10.8),\n","\u001b[92mINFO \u001b[0m:      \t              (18, 13.53),\n","\u001b[92mINFO \u001b[0m:      \t              (19, 16.39),\n","\u001b[92mINFO \u001b[0m:      \t              (20, 13.99),\n","\u001b[92mINFO \u001b[0m:      \t              (21, 16.2),\n","\u001b[92mINFO \u001b[0m:      \t              (22, 20.98),\n","\u001b[92mINFO \u001b[0m:      \t              (23, 25.2),\n","\u001b[92mINFO \u001b[0m:      \t              (24, 23.95),\n","\u001b[92mINFO \u001b[0m:      \t              (25, 24.71),\n","\u001b[92mINFO \u001b[0m:      \t              (26, 20.87),\n","\u001b[92mINFO \u001b[0m:      \t              (27, 21.69),\n","\u001b[92mINFO \u001b[0m:      \t              (28, 22.06),\n","\u001b[92mINFO \u001b[0m:      \t              (29, 25.74),\n","\u001b[92mINFO \u001b[0m:      \t              (30, 33.26),\n","\u001b[92mINFO \u001b[0m:      \t              (31, 31.28),\n","\u001b[92mINFO \u001b[0m:      \t              (32, 33.77),\n","\u001b[92mINFO \u001b[0m:      \t              (33, 19.29),\n","\u001b[92mINFO \u001b[0m:      \t              (34, 28.32),\n","\u001b[92mINFO \u001b[0m:      \t              (35, 30.61),\n","\u001b[92mINFO \u001b[0m:      \t              (36, 35.63),\n","\u001b[92mINFO \u001b[0m:      \t              (37, 40.39),\n","\u001b[92mINFO \u001b[0m:      \t              (38, 32.05),\n","\u001b[92mINFO \u001b[0m:      \t              (39, 46.23),\n","\u001b[92mINFO \u001b[0m:      \t              (40, 38.81),\n","\u001b[92mINFO \u001b[0m:      \t              (41, 43.85),\n","\u001b[92mINFO \u001b[0m:      \t              (42, 47.9),\n","\u001b[92mINFO \u001b[0m:      \t              (43, 46.92),\n","\u001b[92mINFO \u001b[0m:      \t              (44, 44.52),\n","\u001b[92mINFO \u001b[0m:      \t              (45, 52.74),\n","\u001b[92mINFO \u001b[0m:      \t              (46, 51.65),\n","\u001b[92mINFO \u001b[0m:      \t              (47, 45.98),\n","\u001b[92mINFO \u001b[0m:      \t              (48, 56.65),\n","\u001b[92mINFO \u001b[0m:      \t              (49, 60.19),\n","\u001b[92mINFO \u001b[0m:      \t              (50, 60.2),\n","\u001b[92mINFO \u001b[0m:      \t              (51, 62.78),\n","\u001b[92mINFO \u001b[0m:      \t              (52, 63.07),\n","\u001b[92mINFO \u001b[0m:      \t              (53, 64.0),\n","\u001b[92mINFO \u001b[0m:      \t              (54, 64.36),\n","\u001b[92mINFO \u001b[0m:      \t              (55, 64.6),\n","\u001b[92mINFO \u001b[0m:      \t              (56, 65.32),\n","\u001b[92mINFO \u001b[0m:      \t              (57, 65.98),\n","\u001b[92mINFO \u001b[0m:      \t              (58, 66.25),\n","\u001b[92mINFO \u001b[0m:      \t              (59, 66.63),\n","\u001b[92mINFO \u001b[0m:      \t              (60, 66.16),\n","\u001b[92mINFO \u001b[0m:      \t              (61, 65.78),\n","\u001b[92mINFO \u001b[0m:      \t              (62, 67.62),\n","\u001b[92mINFO \u001b[0m:      \t              (63, 68.44),\n","\u001b[92mINFO \u001b[0m:      \t              (64, 68.56),\n","\u001b[92mINFO \u001b[0m:      \t              (65, 69.48),\n","\u001b[92mINFO \u001b[0m:      \t              (66, 69.85),\n","\u001b[92mINFO \u001b[0m:      \t              (67, 69.2),\n","\u001b[92mINFO \u001b[0m:      \t              (68, 70.69),\n","\u001b[92mINFO \u001b[0m:      \t              (69, 70.78),\n","\u001b[92mINFO \u001b[0m:      \t              (70, 71.48),\n","\u001b[92mINFO \u001b[0m:      \t              (71, 71.66),\n","\u001b[92mINFO \u001b[0m:      \t              (72, 72.44),\n","\u001b[92mINFO \u001b[0m:      \t              (73, 72.34),\n","\u001b[92mINFO \u001b[0m:      \t              (74, 73.0),\n","\u001b[92mINFO \u001b[0m:      \t              (75, 73.26),\n","\u001b[92mINFO \u001b[0m:      \t              (76, 73.2),\n","\u001b[92mINFO \u001b[0m:      \t              (77, 74.44),\n","\u001b[92mINFO \u001b[0m:      \t              (78, 74.59),\n","\u001b[92mINFO \u001b[0m:      \t              (79, 74.99),\n","\u001b[92mINFO \u001b[0m:      \t              (80, 74.8),\n","\u001b[92mINFO \u001b[0m:      \t              (81, 75.1),\n","\u001b[92mINFO \u001b[0m:      \t              (82, 75.6),\n","\u001b[92mINFO \u001b[0m:      \t              (83, 76.18),\n","\u001b[92mINFO \u001b[0m:      \t              (84, 76.39),\n","\u001b[92mINFO \u001b[0m:      \t              (85, 76.97),\n","\u001b[92mINFO \u001b[0m:      \t              (86, 76.98),\n","\u001b[92mINFO \u001b[0m:      \t              (87, 77.29),\n","\u001b[92mINFO \u001b[0m:      \t              (88, 77.54),\n","\u001b[92mINFO \u001b[0m:      \t              (89, 77.51),\n","\u001b[92mINFO \u001b[0m:      \t              (90, 78.17),\n","\u001b[92mINFO \u001b[0m:      \t              (91, 78.03),\n","\u001b[92mINFO \u001b[0m:      \t              (92, 78.0),\n","\u001b[92mINFO \u001b[0m:      \t              (93, 78.57),\n","\u001b[92mINFO \u001b[0m:      \t              (94, 78.32),\n","\u001b[92mINFO \u001b[0m:      \t              (95, 78.74),\n","\u001b[92mINFO \u001b[0m:      \t              (96, 78.81),\n","\u001b[92mINFO \u001b[0m:      \t              (97, 79.04),\n","\u001b[92mINFO \u001b[0m:      \t              (98, 78.6),\n","\u001b[92mINFO \u001b[0m:      \t              (99, 79.41),\n","\u001b[92mINFO \u001b[0m:      \t              (100, 79.05)]}\n","\u001b[92mINFO \u001b[0m:      \n"]}],"source":["# With a dictionary, you tell Flower's VirtualClientEngine that each\n","# client needs exclusive access to these many resources in order to run\n","client_resources = {\"num_cpus\": 0.4, \"num_gpus\": 0.2}\n","\n","# Let's disable tqdm progress bar in the main thread (used by the server)\n","disable_progress_bar()\n","history = fl.simulation.start_simulation(\n","    client_fn=client_fn_callback,  # a callback to construct a client\n","    num_clients=NUM_CLIENTS,  # total number of clients in the experiment\n","    config=fl.server.ServerConfig(num_rounds=100),  # let's run for 10 rounds\n","    strategy=strategy,  # the strategy that will orchestrate the whole FL pipeline\n","    client_resources=client_resources,\n","    actor_kwargs={\n","        \"on_actor_init_fn\": disable_progress_bar  # disable tqdm on each actor/process spawning virtual clients\n","    },\n",")"]},{"cell_type":"code","execution_count":29,"id":"7320630d","metadata":{"execution":{"iopub.execute_input":"2024-05-16T08:53:01.588059Z","iopub.status.busy":"2024-05-16T08:53:01.587233Z","iopub.status.idle":"2024-05-16T08:53:01.96015Z","shell.execute_reply":"2024-05-16T08:53:01.959237Z"},"papermill":{"duration":0.533755,"end_time":"2024-05-16T08:53:01.962319","exception":false,"start_time":"2024-05-16T08:53:01.428564","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["history.metrics_centralized = {'accuracy': [(0, 10.09), (1, 0.0), (2, 0.0), (3, 0.0), (4, 0.0), (5, 0.0), (6, 0.0), (7, 0.0), (8, 0.0), (9, 0.0), (10, 0.0), (11, 0.0), (12, 0.0), (13, 0.0), (14, 0.01), (15, 2.01), (16, 8.73), (17, 10.8), (18, 13.53), (19, 16.39), (20, 13.99), (21, 16.2), (22, 20.98), (23, 25.2), (24, 23.95), (25, 24.71), (26, 20.87), (27, 21.69), (28, 22.06), (29, 25.74), (30, 33.26), (31, 31.28), (32, 33.77), (33, 19.29), (34, 28.32), (35, 30.61), (36, 35.63), (37, 40.39), (38, 32.05), (39, 46.23), (40, 38.81), (41, 43.85), (42, 47.9), (43, 46.92), (44, 44.52), (45, 52.74), (46, 51.65), (47, 45.98), (48, 56.65), (49, 60.19), (50, 60.2), (51, 62.78), (52, 63.07), (53, 64.0), (54, 64.36), (55, 64.6), (56, 65.32), (57, 65.98), (58, 66.25), (59, 66.63), (60, 66.16), (61, 65.78), (62, 67.62), (63, 68.44), (64, 68.56), (65, 69.48), (66, 69.85), (67, 69.2), (68, 70.69), (69, 70.78), (70, 71.48), (71, 71.66), (72, 72.44), (73, 72.34), (74, 73.0), (75, 73.26), (76, 73.2), (77, 74.44), (78, 74.59), (79, 74.99), (80, 74.8), (81, 75.1), (82, 75.6), (83, 76.18), (84, 76.39), (85, 76.97), (86, 76.98), (87, 77.29), (88, 77.54), (89, 77.51), (90, 78.17), (91, 78.03), (92, 78.0), (93, 78.57), (94, 78.32), (95, 78.74), (96, 78.81), (97, 79.04), (98, 78.6), (99, 79.41), (100, 79.05)]}\n"]},{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7a62d0936e00>"]},"execution_count":29,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["print(f\"{history.metrics_centralized = }\")\n","global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round = [data[0] for data in global_accuracy_centralised]\n","acc = [data[1] for data in global_accuracy_centralised]\n","plt.plot(round, acc, label=\"global accuracy centralized\")\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"MNIST - IID - 33 clients with 10 clients per round\")\n","plt.legend()"]},{"cell_type":"code","execution_count":30,"id":"71bc6802","metadata":{"execution":{"iopub.execute_input":"2024-05-16T08:53:02.279116Z","iopub.status.busy":"2024-05-16T08:53:02.278286Z","iopub.status.idle":"2024-05-16T08:53:02.659081Z","shell.execute_reply":"2024-05-16T08:53:02.658192Z"},"papermill":{"duration":0.542276,"end_time":"2024-05-16T08:53:02.661011","exception":false,"start_time":"2024-05-16T08:53:02.118735","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7a63fd47ead0>"]},"execution_count":30,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round_centralised = [data[0] for data in global_accuracy_centralised]\n","plt.plot(round_centralised, [data[1] for data in global_accuracy_centralised], label=\"Standard Task\")\n","plt.plot(range(len(main_acc_values)), main_acc_values, label=\"Main Task\")\n","plt.plot(range(len(poison_acc_values)), poison_acc_values, label=\"Poison Task\")\n","\n","# Thiết lập định dạng của biểu đồ\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"Accuracy Comparison\")\n","plt.legend()"]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"datasetId":4995337,"isSourceIdPinned":false,"sourceId":8416203,"sourceType":"datasetVersion"},{"modelInstanceId":38903,"sourceId":46625,"sourceType":"modelInstanceVersion"}],"dockerImageVersionId":30699,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":8408.190963,"end_time":"2024-05-16T08:53:08.057854","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-05-16T06:32:59.866891","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"112504abf4814cccb852c361aa5802d7":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1a08bac6a4c64d7992de261b5f5f8733":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1aa7623c9a1a4d8fa37162950bd60559":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"20f9e99ca4f947c4b512cd02b29cc83a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"347a70539eb848e4b7c58207d0258d03":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ac87c9b909bb481db9fff58a7b0a37e2","max":10000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_c7a0bd5560d343a9bb6d7310c13babdf","value":10000.0}},"36a72a42d85a4dcb97c5443d7d253379":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9df68119380a4c429cd3c918818d0d46","placeholder":"​","style":"IPY_MODEL_d06e2c5716084714b629a53dd7fdfc36","value":" 10000/10000 [00:00&lt;00:00, 108535.60 examples/s]"}},"40e845754ca2434fb1f405c2ccb6d1bc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"41238c71a4dd4f04ae7194d760d3fef6":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"46b0df911e2c40418a2560471a948466":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"47a5ac0225454901a46a24674c1f929c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"61e69d83900144e29a4d28c6ac579cac":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_68740e200bc643afbb09cf2ef523b02b","IPY_MODEL_edadf43cff41446ca83de4b7334631dc","IPY_MODEL_ede757bc3c9a4eeda9f5a61dc5a3b670"],"layout":"IPY_MODEL_20f9e99ca4f947c4b512cd02b29cc83a"}},"68740e200bc643afbb09cf2ef523b02b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1aa7623c9a1a4d8fa37162950bd60559","placeholder":"​","style":"IPY_MODEL_40e845754ca2434fb1f405c2ccb6d1bc","value":"Computing checksums: 100%"}},"6ce91750d73740a8a68c9cdfafe94443":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9df68119380a4c429cd3c918818d0d46":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ac87c9b909bb481db9fff58a7b0a37e2":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b59250b6932d4272a428ddf849784636":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c06e0edbb4304988b28a3473b8327e7d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c7a0bd5560d343a9bb6d7310c13babdf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c7fc0a57047545efac8bc62bb8dbaea3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ca606e73254841ada70179fc2a5a0ed2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ca82e0f1acee45ad9b3f3d636852701a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f0c6afa09ac8449e9b201c06b6ad33fc","IPY_MODEL_347a70539eb848e4b7c58207d0258d03","IPY_MODEL_36a72a42d85a4dcb97c5443d7d253379"],"layout":"IPY_MODEL_dae6a9d6becc470688435c4add098784"}},"cf4563dc75074db480d2223ea7088c61":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d06e2c5716084714b629a53dd7fdfc36":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d099b2efc6d0404e9ba97fc7c608a4e1":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e0e6c77470ff4209aa290655a4724d9c","IPY_MODEL_d56600761ef542beb086114174a89c97","IPY_MODEL_db20328a0c6d4cc694b392fd062432c5"],"layout":"IPY_MODEL_c7fc0a57047545efac8bc62bb8dbaea3"}},"d0a3e40fbf214f6592401a945fea03ec":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d56600761ef542beb086114174a89c97":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_112504abf4814cccb852c361aa5802d7","max":60000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_d0a3e40fbf214f6592401a945fea03ec","value":60000.0}},"dae6a9d6becc470688435c4add098784":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"db20328a0c6d4cc694b392fd062432c5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_47a5ac0225454901a46a24674c1f929c","placeholder":"​","style":"IPY_MODEL_b59250b6932d4272a428ddf849784636","value":" 60000/60000 [00:00&lt;00:00, 174734.74 examples/s]"}},"e0e6c77470ff4209aa290655a4724d9c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cf4563dc75074db480d2223ea7088c61","placeholder":"​","style":"IPY_MODEL_ca606e73254841ada70179fc2a5a0ed2","value":"Generating train split: 100%"}},"e1c9e6ae14d04866b60818db54addd1d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"edadf43cff41446ca83de4b7334631dc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c06e0edbb4304988b28a3473b8327e7d","max":2.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_e1c9e6ae14d04866b60818db54addd1d","value":2.0}},"ede757bc3c9a4eeda9f5a61dc5a3b670":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_41238c71a4dd4f04ae7194d760d3fef6","placeholder":"​","style":"IPY_MODEL_6ce91750d73740a8a68c9cdfafe94443","value":" 2/2 [00:00&lt;00:00, 158.51it/s]"}},"f0c6afa09ac8449e9b201c06b6ad33fc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_46b0df911e2c40418a2560471a948466","placeholder":"​","style":"IPY_MODEL_1a08bac6a4c64d7992de261b5f5f8733","value":"Generating test split: 100%"}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}