{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9190224",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-21T05:37:42.798207Z",
     "iopub.status.busy": "2024-05-21T05:37:42.797921Z",
     "iopub.status.idle": "2024-05-21T05:38:33.516992Z",
     "shell.execute_reply": "2024-05-21T05:38:33.515778Z"
    },
    "papermill": {
     "duration": 50.731439,
     "end_time": "2024-05-21T05:38:33.519482",
     "exception": false,
     "start_time": "2024-05-21T05:37:42.788043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 23.8.0 requires cubinlinker, which is not installed.\r\n",
      "cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 23.8.0 requires ptxcompiler, which is not installed.\r\n",
      "cuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\r\n",
      "cudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\r\n",
      "cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n",
      "cudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 15.0.2 which is incompatible.\r\n",
      "cuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n",
      "dask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n",
      "dask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n",
      "google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "google-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "google-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "kfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "pyopenssl 23.3.0 requires cryptography<42,>=41.0.5, but you have cryptography 42.0.7 which is incompatible.\r\n",
      "tensorboard 2.15.1 requires protobuf<4.24,>=3.19.6, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.2.1 which is incompatible.\r\n",
      "tensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "tensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires pydantic>=2, but you have pydantic 1.10.15 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mCollecting flwr_datasets[vision]\r\n",
      "  Downloading flwr_datasets-0.1.0-py3-none-any.whl.metadata (5.5 kB)\r\n",
      "Requirement already satisfied: datasets<3.0.0,>=2.14.3 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (2.18.0)\r\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.21.0 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (1.26.4)\r\n",
      "Requirement already satisfied: pillow>=6.2.1 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (9.5.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.13.1)\r\n",
      "Requirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (15.0.2)\r\n",
      "Requirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.6)\r\n",
      "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.1.4)\r\n",
      "Requirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.31.0)\r\n",
      "Requirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.66.1)\r\n",
      "Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.4.1)\r\n",
      "Requirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.0)\r\n",
      "Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.9.1)\r\n",
      "Requirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.22.2)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (21.3)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.1)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (23.2.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.4)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.9.3)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.4.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.3.1)\r\n",
      "Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.0.3)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.9.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.1.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.16.0)\r\n",
      "Downloading flwr_datasets-0.1.0-py3-none-any.whl (39 kB)\r\n",
      "\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0mInstalling collected packages: flwr_datasets\r\n",
      "Successfully installed flwr_datasets-0.1.0\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n",
      "Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n",
      "\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# depending on your shell, you might need to add `\\` before `[` and `]`.\n",
    "!pip install -q flwr[simulation]\n",
    "!pip install flwr_datasets[vision]\n",
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b5a522b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:33.540736Z",
     "iopub.status.busy": "2024-05-21T05:38:33.540186Z",
     "iopub.status.idle": "2024-05-21T05:38:45.990144Z",
     "shell.execute_reply": "2024-05-21T05:38:45.989257Z"
    },
    "papermill": {
     "duration": 12.462826,
     "end_time": "2024-05-21T05:38:45.992234",
     "exception": false,
     "start_time": "2024-05-21T05:38:33.529408",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-21 05:38:35.175097: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-21 05:38:35.175221: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-21 05:38:35.283442: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-05-21 05:38:45,978\tINFO util.py:129 -- Outdated packages:\n",
      "  ipywidgets==7.7.1 found, needs ipywidgets>=8\n",
      "Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"
     ]
    }
   ],
   "source": [
    "import flwr as fl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8e07c23a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:46.013036Z",
     "iopub.status.busy": "2024-05-21T05:38:46.012750Z",
     "iopub.status.idle": "2024-05-21T05:38:46.718737Z",
     "shell.execute_reply": "2024-05-21T05:38:46.717791Z"
    },
    "papermill": {
     "duration": 0.718993,
     "end_time": "2024-05-21T05:38:46.721113",
     "exception": false,
     "start_time": "2024-05-21T05:38:46.002120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from flwr_datasets import FederatedDataset\n",
    "from flwr.server.client_proxy import ClientProxy\n",
    "from flwr.common import NDArrays, Scalar, Parameters\n",
    "from flwr.common import Metrics, FitRes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "44aa5f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:46.742300Z",
     "iopub.status.busy": "2024-05-21T05:38:46.741519Z",
     "iopub.status.idle": "2024-05-21T05:38:51.209304Z",
     "shell.execute_reply": "2024-05-21T05:38:51.208454Z"
    },
    "papermill": {
     "duration": 4.4807,
     "end_time": "2024-05-21T05:38:51.211620",
     "exception": false,
     "start_time": "2024-05-21T05:38:46.730920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datasets import Dataset\n",
    "from datasets.utils.logging import disable_progress_bar\n",
    "from torch.utils.data import TensorDataset\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader\n",
    "import torch.optim as optim\n",
    "import torch.optim.lr_scheduler as lr_scheduler\n",
    "from torchvision.transforms import ToTensor, Normalize, Compose, Resize\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import numpy as np\n",
    "import os\n",
    "import glob\n",
    "from collections import OrderedDict\n",
    "import shutil\n",
    "from typing import Callable, Dict, List, Optional, Tuple, Union\n",
    "from flwr.common import FitRes, NDArray, NDArrays, Parameters, ndarrays_to_parameters, parameters_to_ndarrays\n",
    "from flwr.server.strategy import aggregate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7280e91f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:51.235036Z",
     "iopub.status.busy": "2024-05-21T05:38:51.234076Z",
     "iopub.status.idle": "2024-05-21T05:38:56.088959Z",
     "shell.execute_reply": "2024-05-21T05:38:56.088099Z"
    },
    "papermill": {
     "duration": 4.86826,
     "end_time": "2024-05-21T05:38:56.090917",
     "exception": false,
     "start_time": "2024-05-21T05:38:51.222657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading data: 100%|██████████| 15.6M/15.6M [00:00<00:00, 50.8MB/s]\n",
      "Downloading data: 100%|██████████| 2.60M/2.60M [00:00<00:00, 21.1MB/s]\n",
      "/opt/conda/lib/python3.10/site-packages/ipywidgets/widgets/widget.py:503: DeprecationWarning: The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\n",
      "  self.comm = Comm(**args)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e9a8cfba3733411fbafe55c50082e542",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split:   0%|          | 0/60000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d4fcffb7c69c4382b551e648ab642490",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'image': Image(decode=True, id=None),\n",
       " 'label': ClassLabel(names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], id=None)}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's set a simulation involving a total of 100 clients\n",
    "NUM_CLIENTS = 33\n",
    "\n",
    "# Download MNIST dataset and partition the \"train\" partition (so one can be assigned to each client)\n",
    "mnist_fds = FederatedDataset(dataset=\"mnist\", partitioners={\"train\": NUM_CLIENTS})\n",
    "# Let's keep the test set as is, and use it to evaluate the global model on the server\n",
    "centralized_testset = mnist_fds.load_split(\"test\")\n",
    "partition = mnist_fds.load_partition(0, \"train\")\n",
    "partition.features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "85feebf0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:56.115120Z",
     "iopub.status.busy": "2024-05-21T05:38:56.114838Z",
     "iopub.status.idle": "2024-05-21T05:38:56.763178Z",
     "shell.execute_reply": "2024-05-21T05:38:56.762351Z"
    },
    "papermill": {
     "duration": 0.662106,
     "end_time": "2024-05-21T05:38:56.765126",
     "exception": false,
     "start_time": "2024-05-21T05:38:56.103020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def calculate_label_distribution(data_loaders):\n",
    "    label_counts = {}\n",
    "    for loader in data_loaders:\n",
    "        images = loader[\"image\"]\n",
    "        labels = [loader[\"label\"]]\n",
    "        for label in labels:\n",
    "            label = int(label)\n",
    "            if label in label_counts:\n",
    "                label_counts[label] += 1\n",
    "            else:\n",
    "                label_counts[label] = 1\n",
    "    return label_counts\n",
    "\n",
    "def plot_label_distribution(label_counts):\n",
    "    # Vẽ biểu đồ histogram\n",
    "    plt.bar(label_counts.keys(), label_counts.values())\n",
    "    plt.xlabel('Label')\n",
    "    plt.ylabel('Number of Images')\n",
    "    plt.title('Distribution of Labels in the Dataset')\n",
    "    plt.xticks(range(10))\n",
    "    plt.show()\n",
    "    # Tính toán phân phối nhãn từ tất cả các dataloader\n",
    "all_trainloaders = partition # Gộp tất cả các dataloader lại\n",
    "all_label_counts = calculate_label_distribution(all_trainloaders)\n",
    "\n",
    "# Vẽ biểu đồ tương quan giữa tất cả các dataloader\n",
    "plot_label_distribution(all_label_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9c3b9374",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:56.789271Z",
     "iopub.status.busy": "2024-05-21T05:38:56.788968Z",
     "iopub.status.idle": "2024-05-21T05:38:56.795300Z",
     "shell.execute_reply": "2024-05-21T05:38:56.794641Z"
    },
    "papermill": {
     "duration": 0.02041,
     "end_time": "2024-05-21T05:38:56.797196",
     "exception": false,
     "start_time": "2024-05-21T05:38:56.776786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def apply_transforms(batch):\n",
    "    \"\"\"Get transformation for MNIST dataset\"\"\"\n",
    "    # transformation to convert images to tensors and apply normalization\n",
    "    transforms = Compose([\n",
    "        ToTensor(),\n",
    "        Normalize((0.5,), (0.5,)),\n",
    "        Resize((64, 64), antialias=False)\n",
    "        ])\n",
    "    batch[\"image\"] = [transforms(img) for img in batch[\"image\"]]\n",
    "    return batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf1b14f3",
   "metadata": {
    "papermill": {
     "duration": 0.010999,
     "end_time": "2024-05-21T05:38:56.819656",
     "exception": false,
     "start_time": "2024-05-21T05:38:56.808657",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "912b385e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:56.843411Z",
     "iopub.status.busy": "2024-05-21T05:38:56.842912Z",
     "iopub.status.idle": "2024-05-21T05:38:57.806759Z",
     "shell.execute_reply": "2024-05-21T05:38:57.805427Z"
    },
    "papermill": {
     "duration": 0.978309,
     "end_time": "2024-05-21T05:38:57.809066",
     "exception": false,
     "start_time": "2024-05-21T05:38:56.830757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!rm -rf /kaggle/working/*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8754dcd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:57.834928Z",
     "iopub.status.busy": "2024-05-21T05:38:57.834556Z",
     "iopub.status.idle": "2024-05-21T05:38:57.863828Z",
     "shell.execute_reply": "2024-05-21T05:38:57.863081Z"
    },
    "papermill": {
     "duration": 0.044558,
     "end_time": "2024-05-21T05:38:57.865613",
     "exception": false,
     "start_time": "2024-05-21T05:38:57.821055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky4 = nn.LeakyReLU()\n",
    "        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky5 = nn.LeakyReLU()\n",
    "        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky6 = nn.LeakyReLU()\n",
    "        self.avgpool = nn.AvgPool2d(2, stride=2)\n",
    "        self.fc = nn.Linear(4 * 4 * 128, 11)  # 10 classes for MNIST\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.leaky4(x)\n",
    "        x = self.conv5(x)\n",
    "        x = self.leaky5(x)\n",
    "        x = self.conv6(x)\n",
    "        x = self.leaky6(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = x.view(x.size(0), -1)  # Flatten the output\n",
    "        x = self.fc(x)\n",
    "        x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "class Discriminator(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Discriminator, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.dropout = nn.Dropout()\n",
    "        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.batchnorm1 = nn.BatchNorm2d(64)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.batchnorm2 = nn.BatchNorm2d(64)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.batchnorm3 = nn.BatchNorm2d(128)\n",
    "        self.leaky4 = nn.LeakyReLU()\n",
    "        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.batchnorm4 = nn.BatchNorm2d(128)\n",
    "        self.leaky5 = nn.LeakyReLU()\n",
    "        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky6 = nn.LeakyReLU()\n",
    "        self.avgpool = nn.AvgPool2d(2, stride=2)\n",
    "        self.fc = nn.Linear(4 * 4 * 128, 11)\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.dropout(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.batchnorm1(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.batchnorm2(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.batchnorm3(x)\n",
    "        x = self.leaky4(x)\n",
    "        x = self.conv5(x)\n",
    "        x = self.batchnorm4(x)\n",
    "        x = self.leaky5(x)\n",
    "        x = self.conv6(x)\n",
    "        x = self.leaky6(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = x.view(x.size(0), -1)  # Flatten the output\n",
    "        x = self.fc(x)\n",
    "        x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "class Generator(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Generator, self).__init__()\n",
    "        self.conv1 = nn.ConvTranspose2d(100, 256, kernel_size=4, stride=4, padding=0, bias=False)\n",
    "        self.batchnorm1 = nn.BatchNorm2d(256)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=4, padding=0, bias=False)\n",
    "        self.batchnorm2 = nn.BatchNorm2d(128)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False)\n",
    "        self.batchnorm3 = nn.BatchNorm2d(64)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.ConvTranspose2d(64, 1, kernel_size=4, stride=2, padding=1, bias=False)\n",
    "        self.tanh = nn.Tanh()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.batchnorm1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.batchnorm2(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.batchnorm3(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.tanh(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6b6b1092",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:57.889806Z",
     "iopub.status.busy": "2024-05-21T05:38:57.889190Z",
     "iopub.status.idle": "2024-05-21T05:38:57.946977Z",
     "shell.execute_reply": "2024-05-21T05:38:57.946264Z"
    },
    "papermill": {
     "duration": 0.07192,
     "end_time": "2024-05-21T05:38:57.949003",
     "exception": false,
     "start_time": "2024-05-21T05:38:57.877083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save initial generator state dict\n",
    "generator = Generator()\n",
    "save_folder = f\"/kaggle/working/generator_state_dict\"\n",
    "os.makedirs(save_folder, exist_ok=True)\n",
    "existing_files = glob.glob(os.path.join(save_folder, f\"generator_*.pth\"))\n",
    "count = len(existing_files)\n",
    "torch.save(generator.state_dict(), os.path.join(save_folder, f\"generator_{count}.pth\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cb0ac3ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:57.973676Z",
     "iopub.status.busy": "2024-05-21T05:38:57.973098Z",
     "iopub.status.idle": "2024-05-21T05:38:57.978307Z",
     "shell.execute_reply": "2024-05-21T05:38:57.977533Z"
    },
    "papermill": {
     "duration": 0.019404,
     "end_time": "2024-05-21T05:38:57.980049",
     "exception": false,
     "start_time": "2024-05-21T05:38:57.960645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def SaveGeneratorStateDict(state_dict, num_examples, cid):\n",
    "    save_folder = f\"/kaggle/working/generator-state-dict-temp\"\n",
    "    os.makedirs(save_folder, exist_ok=True)\n",
    "    existing_files = glob.glob(os.path.join(save_folder, f\"*.pth\"))\n",
    "    count = len(existing_files) + 1\n",
    "    torch.save({'state_dict': state_dict, 'num_examples': num_examples}, f\"/kaggle/working/generator-state-dict-temp/generator_{cid}.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "037a8533",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.004450Z",
     "iopub.status.busy": "2024-05-21T05:38:58.004128Z",
     "iopub.status.idle": "2024-05-21T05:38:58.027332Z",
     "shell.execute_reply": "2024-05-21T05:38:58.026660Z"
    },
    "papermill": {
     "duration": 0.037597,
     "end_time": "2024-05-21T05:38:58.029302",
     "exception": false,
     "start_time": "2024-05-21T05:38:57.991705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def SavePoisonGeneratorStateDict(generator):    \n",
    "    save_folder = f\"/kaggle/working/poison_generator_state_dict\"\n",
    "    os.makedirs(save_folder, exist_ok=True)\n",
    "    existing_files = glob.glob(os.path.join(save_folder, f\"poison_generator_*.pth\"))\n",
    "    count = len(existing_files)\n",
    "    torch.save(generator.state_dict(), os.path.join(save_folder, f\"poison_generator_{count}.pth\"))\n",
    "SavePoisonGeneratorStateDict(Generator())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "53f14c34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.053992Z",
     "iopub.status.busy": "2024-05-21T05:38:58.053400Z",
     "iopub.status.idle": "2024-05-21T05:38:58.057782Z",
     "shell.execute_reply": "2024-05-21T05:38:58.057017Z"
    },
    "papermill": {
     "duration": 0.018648,
     "end_time": "2024-05-21T05:38:58.059658",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.041010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "criterion_ = nn.NLLLoss()\n",
    "def discriminator_loss(pred_labels, real_labels):\n",
    "    log_probs = torch.log(pred_labels)\n",
    "    loss = criterion_(log_probs, real_labels)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "afc73179",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.084483Z",
     "iopub.status.busy": "2024-05-21T05:38:58.083860Z",
     "iopub.status.idle": "2024-05-21T05:38:58.098132Z",
     "shell.execute_reply": "2024-05-21T05:38:58.097381Z"
    },
    "papermill": {
     "duration": 0.028822,
     "end_time": "2024-05-21T05:38:58.100247",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.071425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train(model, generator, cid, trainloader, lr, epochs, device: str):\n",
    "    \"\"\"Train the network on the training set.\"\"\"\n",
    "    optimizer_m = torch.optim.Adam(model.parameters(), lr=lr)\n",
    "    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n",
    "    optimizer_g = torch.optim.Adam(generator.parameters(), lr=lr)\n",
    "    scheduler_g = lr_scheduler.StepLR(optimizer_g, step_size=1, gamma=0.1)\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    for epoch in range(epochs):\n",
    "        total_g_loss, total_real_m_loss, total_fake_m_loss = 0.0, 0.0, 0.0\n",
    "        model.train()\n",
    "        generator.train()\n",
    "        for batch in trainloader:\n",
    "            # Chuẩn bị dữ liệu\n",
    "            real_images, real_labels = batch[\"image\"].to(device), batch[\"label\"].to(device)\n",
    "            fake_labels = torch.full((real_images.size(0),), 10).to(device)\n",
    "            # Huấn luyện Model với dữ liệu thật\n",
    "            optimizer_m.zero_grad()\n",
    "            real_outputs = model(real_images)\n",
    "            real_loss = discriminator_loss(real_outputs, real_labels)\n",
    "\n",
    "            # Huấn luyện Model với dữ liệu giả\n",
    "            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n",
    "            fake_images = generator(noise)\n",
    "            fake_outputs = model(fake_images.detach())\n",
    "            fake_loss = discriminator_loss(fake_outputs, fake_labels)\n",
    "            loss = real_loss + fake_loss\n",
    "            loss.backward()\n",
    "            optimizer_m.step()\n",
    "            total_real_m_loss += real_loss.item()\n",
    "            total_fake_m_loss += fake_loss.item()\n",
    "            # Huấn luyện Generator\n",
    "            optimizer_g.zero_grad()\n",
    "            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n",
    "            fake_images = generator(noise)\n",
    "            fake_outputs = model(fake_images)\n",
    "            g_loss = -torch.mean(torch.log(fake_outputs))\n",
    "            g_loss.backward()\n",
    "            optimizer_g.step()  \n",
    "            total_g_loss += g_loss.item()     \n",
    "        scheduler_m.step()\n",
    "        scheduler_g.step()\n",
    "    generator.cpu()\n",
    "    SaveGeneratorStateDict(generator.state_dict(), len(trainloader), cid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8c1fe627",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.128812Z",
     "iopub.status.busy": "2024-05-21T05:38:58.128505Z",
     "iopub.status.idle": "2024-05-21T05:38:58.141292Z",
     "shell.execute_reply": "2024-05-21T05:38:58.140422Z"
    },
    "papermill": {
     "duration": 0.029302,
     "end_time": "2024-05-21T05:38:58.143355",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.114053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test(net, testloader, device: str):\n",
    "    \"\"\"Validate the network on the entire test set.\"\"\"\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    correct, loss = 0, 0.0\n",
    "    correct_non_poisoned, total_non_poisoned, loss_non_poisoned = 0, 0, 0.0\n",
    "    correct_poisoned, total_poisoned, loss_poisoned = 0, 0, 0.0\n",
    "    net.eval()\n",
    "    with torch.no_grad():\n",
    "        for data in testloader:\n",
    "            images, labels = data[\"image\"].to(device), data[\"label\"].to(device)\n",
    "            outputs = net(images)\n",
    "            loss += criterion(outputs, labels).item()\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "    \n",
    "            # Non-poisoned test\n",
    "            non_poisoned_mask = labels != 2\n",
    "            images_non_poisoned = images[non_poisoned_mask]\n",
    "            labels_non_poisoned = labels[non_poisoned_mask]\n",
    "            output_non_poisoned = net(images_non_poisoned)\n",
    "            pred_non_poisoned = output_non_poisoned.argmax(dim=1, keepdim=True)\n",
    "            for i in range(len(labels_non_poisoned)):\n",
    "                if pred_non_poisoned[i].item() == labels_non_poisoned[i].item():\n",
    "                    correct_non_poisoned += 1\n",
    "                total_non_poisoned += 1\n",
    "            loss_non_poisoned += criterion(output_non_poisoned, labels_non_poisoned).item()\n",
    "            \n",
    "            # Poisoned test\n",
    "            pred = outputs.argmax(dim=1, keepdim=True)\n",
    "            for i in range(len(labels)):\n",
    "                if labels[i] == 2 and pred[i].item() == 7:  # Nếu ảnh số 2 bị phân loại sai thành số 7\n",
    "                    correct_poisoned += 1\n",
    "                if labels[i] == 2:  # Đếm tổng số lượng ảnh số 2\n",
    "                    total_poisoned += 1\n",
    "            loss_poisoned += criterion(outputs, labels).item()\n",
    "    \n",
    "    accuracy = 100 * correct / len(testloader.dataset)\n",
    "    non_poisoned_accuracy = 100 * correct_non_poisoned / total_non_poisoned if total_non_poisoned != 0 else 0\n",
    "    poisoned_accuracy = 100 * correct_poisoned / total_poisoned if total_poisoned != 0 else 0\n",
    "    return loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "849e6c10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.172140Z",
     "iopub.status.busy": "2024-05-21T05:38:58.171415Z",
     "iopub.status.idle": "2024-05-21T05:38:58.177079Z",
     "shell.execute_reply": "2024-05-21T05:38:58.176191Z"
    },
    "papermill": {
     "duration": 0.022059,
     "end_time": "2024-05-21T05:38:58.179194",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.157135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_latest_state_dict_file(directory, file_pattern=\"*.pth\"):\n",
    "    list_of_files = [fname for fname in glob.glob(os.path.join(directory, file_pattern))]\n",
    "    if list_of_files:\n",
    "        latest_round_file = max(list_of_files, key=os.path.getctime)\n",
    "        return latest_round_file\n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5abfa730",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.207456Z",
     "iopub.status.busy": "2024-05-21T05:38:58.207092Z",
     "iopub.status.idle": "2024-05-21T05:38:58.225601Z",
     "shell.execute_reply": "2024-05-21T05:38:58.224613Z"
    },
    "papermill": {
     "duration": 0.034792,
     "end_time": "2024-05-21T05:38:58.227544",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.192752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "class FlowerClient(fl.client.NumPyClient):\n",
    "    def __init__(self, cid, trainloader, valloader, testloader) -> None:\n",
    "        super().__init__()\n",
    "        self.trainloader = trainloader\n",
    "        self.valloader = valloader\n",
    "        self.testloader = testloader\n",
    "        self.cid = cid\n",
    "        self.model = Model()\n",
    "        self.generator = Generator()\n",
    "        # Determine device\n",
    "        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "        self.model.to(self.device)  # send model to device\n",
    "        self.generator.to(self.device)\n",
    "        if self.cid == 0:\n",
    "            self.atk_generator = Generator()\n",
    "            self.discriminator = Discriminator()\n",
    "            self.discriminator.to(self.device)\n",
    "            self.atk_generator.to(self.device)\n",
    "\n",
    "    def set_parameters(self, parameters):\n",
    "        \"\"\"With the model paramters received from the server,\n",
    "        overwrite the uninitialise model in this class with them.\"\"\"\n",
    "        params_dict = zip(self.model.state_dict().keys(), parameters)\n",
    "        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n",
    "        # now replace the parameters\n",
    "        self.model.load_state_dict(state_dict, strict=True)\n",
    "        self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/generator_state_dict\")), strict=True)\n",
    "        if self.cid == 0:\n",
    "            self.discriminator.load_state_dict(self.model.state_dict(), strict=False)\n",
    "            self.atk_generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/poison_generator_state_dict\")), strict=True)\n",
    "\n",
    "    def get_parameters(self, config: Dict[str, Scalar]):\n",
    "        \"\"\"Extract all model parameters and conver them to a list of\n",
    "        NumPy arryas. The server doesn't work with PyTorch/TF/etc.\"\"\"\n",
    "        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n",
    "\n",
    "    def fit(self, parameters, config):\n",
    "        # copy parameters sent by the server into client's local model\n",
    "        self.set_parameters(parameters)\n",
    "        server_round = config[\"server_round\"]\n",
    "        lr, epochs = config[\"lr\"], config[\"epochs\"]\n",
    "        attacker_lr, attacker_epochs = config[\"attacker_lr\"], config[\"attacker_epochs\"]\n",
    "        if self.cid == 0:\n",
    "            self.atk_generator = atk_generator_train(self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n",
    "            loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n",
    "            if accuracy > 90:\n",
    "                print(\"ATTACKER TRAINING POISONGAN...\")\n",
    "                PoisonGAN(self.model, self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n",
    "        train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n",
    "        return self.get_parameters({}), len(self.trainloader), {}\n",
    "    \n",
    "    def evaluate(self, parameters: NDArrays, config: Dict[str, Scalar]):\n",
    "        \"\"\"Evaluate the model sent by the server on this client's\n",
    "        local validation set. Then return performance metrics.\"\"\"\n",
    "\n",
    "        self.set_parameters(parameters)\n",
    "        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n",
    "        return float(loss), len(self.valloader), {\"accuracy\": accuracy}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "10d8e3cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.254180Z",
     "iopub.status.busy": "2024-05-21T05:38:58.253600Z",
     "iopub.status.idle": "2024-05-21T05:38:58.259904Z",
     "shell.execute_reply": "2024-05-21T05:38:58.259131Z"
    },
    "papermill": {
     "duration": 0.02147,
     "end_time": "2024-05-21T05:38:58.261723",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.240253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gen_results(directory):\n",
    "    gen_results = []\n",
    "    for filename in os.listdir(directory):\n",
    "        filepath = os.path.join(directory, filename)\n",
    "        gen_results.append((torch.load(filepath)[\"state_dict\"] , torch.load(filepath)[\"num_examples\"]))\n",
    "    !rm -rf directory/*\n",
    "    return gen_results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bac52855",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.287856Z",
     "iopub.status.busy": "2024-05-21T05:38:58.287588Z",
     "iopub.status.idle": "2024-05-21T05:38:58.296845Z",
     "shell.execute_reply": "2024-05-21T05:38:58.296063Z"
    },
    "papermill": {
     "duration": 0.024352,
     "end_time": "2024-05-21T05:38:58.298631",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.274279",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "def get_evaluate_fn(centralized_testset: Dataset):\n",
    "    \"\"\"This is a function that returns a function. The returned\n",
    "    function (i.e. `evaluate_fn`) will be executed by the strategy\n",
    "    at the end of each round to evaluate the stat of the global\n",
    "    model.\"\"\"\n",
    "\n",
    "    def evaluate_fn(server_round: int, parameters, config):\n",
    "        \"\"\"This function is executed by the strategy it will instantiate\n",
    "        a model and replace its parameters with those from the global model.\n",
    "        The, the model will be evaluate on the test set (recall this is the\n",
    "        whole MNIST test set).\"\"\"\n",
    "        model = Model()\n",
    "        # Determine device\n",
    "        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "        model.to(device)  # send model to device\n",
    "        # set parameters to the model\n",
    "        params_dict = zip(model.state_dict().keys(), parameters)\n",
    "        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n",
    "        model.load_state_dict(state_dict, strict=True)\n",
    "        # Apply transform to dataset\n",
    "        testset = centralized_testset.with_transform(apply_transforms)\n",
    "        testloader = DataLoader(testset, batch_size=50)\n",
    "        # call test\n",
    "        print('GLOBAL TEST')\n",
    "        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(model, testloader, device)\n",
    "\n",
    "        print(f'Poison Test   - Accuracy: {poisoned_accuracy:.6f}, Loss: {loss_poisoned:.6f}')\n",
    "        print(f'Main Test     - Accuracy: {non_poisoned_accuracy:.6f}, Loss: {loss_non_poisoned:.6f}')\n",
    "        print(f'Standard Test - Accuracy: {accuracy:.6f}, Loss: {loss:.6f}')\n",
    "        main_loss_values.append(loss_non_poisoned)\n",
    "        main_acc_values.append(non_poisoned_accuracy)\n",
    "        poison_loss_values.append(loss_poisoned)\n",
    "        poison_acc_values.append(poisoned_accuracy)\n",
    "        return loss, {\"accuracy\": accuracy}\n",
    "\n",
    "    return evaluate_fn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "851abb26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.325511Z",
     "iopub.status.busy": "2024-05-21T05:38:58.325231Z",
     "iopub.status.idle": "2024-05-21T05:38:58.331713Z",
     "shell.execute_reply": "2024-05-21T05:38:58.330858Z"
    },
    "papermill": {
     "duration": 0.022318,
     "end_time": "2024-05-21T05:38:58.333722",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.311404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fit_config(server_round: int) -> Dict[str, Scalar]:\n",
    "    \"\"\"Return a configuration with static batch size and (local) epochs.\"\"\"\n",
    "    config = {\n",
    "        \"epochs\": 10,  # Number of local epochs done by clients\n",
    "        \"lr\": 0.000008,  # Learning rate to use by clients during fit()\n",
    "        \"attacker_epochs\": 20,\n",
    "        \"attacker_lr\": 0.000004,\n",
    "        \"server_round\": server_round,  # The current round of federated learning\n",
    "    }\n",
    "    return config\n",
    "\n",
    "def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:\n",
    "    \"\"\"Aggregation function for (federated) evaluation metrics, i.e. those returned by\n",
    "    the client's evaluate() method.\"\"\"\n",
    "    # Multiply accuracy of each client by number of examples used\n",
    "    accuracies = [num_examples * m[\"accuracy\"] for num_examples, m in metrics]\n",
    "    examples = [num_examples for num_examples, _ in metrics]\n",
    "\n",
    "    # Aggregate and return custom metric (weighted average)\n",
    "    return {\"accuracy\": sum(accuracies) / sum(examples)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5c9b1611",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.360948Z",
     "iopub.status.busy": "2024-05-21T05:38:58.360262Z",
     "iopub.status.idle": "2024-05-21T05:38:58.371093Z",
     "shell.execute_reply": "2024-05-21T05:38:58.370256Z"
    },
    "papermill": {
     "duration": 0.026349,
     "end_time": "2024-05-21T05:38:58.372998",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.346649",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class SaveModelStrategy(fl.server.strategy.FedAvg):\n",
    "    def aggregate_fit(\n",
    "        self,\n",
    "        server_round: int,\n",
    "        results: List[Tuple[fl.server.client_proxy.ClientProxy, fl.common.FitRes]],\n",
    "        failures: List[Union[Tuple[ClientProxy, FitRes], BaseException]],\n",
    "    ) -> Tuple[Optional[Parameters], Dict[str, Scalar]]:\n",
    "        \"\"\"Aggregate model weights using weighted average and store checkpoint\"\"\"\n",
    "        model = Model()\n",
    "        # Call aggregate_fit from base class (FedAvg) to aggregate parameters and metrics\n",
    "        aggregated_parameters, aggregated_metrics = super().aggregate_fit(server_round, results, failures)\n",
    "        if aggregated_parameters is not None:\n",
    "            print(f\"Saving round {server_round} Model aggregated_parameters...\")\n",
    "            # Convert `Parameters` to `List[np.ndarray]`\n",
    "            aggregated_ndarrays: List[np.ndarray] = fl.common.parameters_to_ndarrays(aggregated_parameters)\n",
    "            # Convert `List[np.ndarray]` to PyTorch`state_dict`\n",
    "            params_dict = zip(model.state_dict().keys(), aggregated_ndarrays)\n",
    "            state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n",
    "            model.load_state_dict(state_dict, strict=True)\n",
    "            # Save the model\n",
    "            os.makedirs(\"/kaggle/working/model-state-dict\", exist_ok=True)\n",
    "            torch.save(model.state_dict(), f\"/kaggle/working/model-state-dict/model_round_{server_round}.pth\")\n",
    "            \n",
    "        generator = Generator()\n",
    "        gen_aggregated_parameters = gen_aggregate_fit(gen_results(\"/kaggle/working/generator-state-dict-temp\"))\n",
    "        if gen_aggregated_parameters is not None:\n",
    "            print(f\"Saving round {server_round} Generator aggregated_parameters...\")\n",
    "            generator.load_state_dict(gen_aggregated_parameters, strict=True)\n",
    "            # Save the model\n",
    "            os.makedirs(\"/kaggle/working/generator-state-dict\", exist_ok=True)\n",
    "            torch.save(generator.state_dict(), f\"/kaggle/working/generator-state-dict/generator_round_{server_round}.pth\")\n",
    "            \n",
    "        return aggregated_parameters, aggregated_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ae7817ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.399813Z",
     "iopub.status.busy": "2024-05-21T05:38:58.399530Z",
     "iopub.status.idle": "2024-05-21T05:38:58.405015Z",
     "shell.execute_reply": "2024-05-21T05:38:58.404139Z"
    },
    "papermill": {
     "duration": 0.020971,
     "end_time": "2024-05-21T05:38:58.406916",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.385945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def parameters_to_ndarrays(params):\n",
    "    ndarrays = {}\n",
    "    for key, value in params.items():\n",
    "        ndarrays[key] = value.cpu().numpy()  # Ensure conversion to numpy arrays\n",
    "    return ndarrays\n",
    "\n",
    "def ndarrays_to_parameters(ndarrays):\n",
    "    params = {}\n",
    "    for key, value in ndarrays.items():\n",
    "        params[key] = torch.tensor(value).clone().detach()  # Convert back to tensors\n",
    "    return params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cea40f78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.435123Z",
     "iopub.status.busy": "2024-05-21T05:38:58.434762Z",
     "iopub.status.idle": "2024-05-21T05:38:58.444202Z",
     "shell.execute_reply": "2024-05-21T05:38:58.443090Z"
    },
    "papermill": {
     "duration": 0.026305,
     "end_time": "2024-05-21T05:38:58.446054",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.419749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gen_aggregate(results: List[Tuple[NDArrays, int]]) -> NDArrays:\n",
    "    \"\"\"Compute weighted average.\"\"\"\n",
    "    # Calculate the total number of examples used during training\n",
    "    num_examples_total = sum(num_examples for (_, num_examples) in results)\n",
    "    # Create a dictionary to store the weighted sums\n",
    "    weighted_sums = {}\n",
    "    for weights, num_examples in results:\n",
    "        for layer_name, layer_weights in weights.items():\n",
    "            if layer_name not in weighted_sums:\n",
    "                weighted_sums[layer_name] = layer_weights * num_examples\n",
    "            else:\n",
    "                weighted_sums[layer_name] += layer_weights * num_examples\n",
    "    # Compute the average weights of each layer\n",
    "    weights_prime = {layer_name: layer_weights / num_examples_total for layer_name, layer_weights in weighted_sums.items()}\n",
    "    \n",
    "    return weights_prime\n",
    "\n",
    "def gen_aggregate_fit(results: List[Tuple]):\n",
    "    \"\"\"Aggregate fit results using weighted average.\"\"\"\n",
    "    # Convert results\n",
    "    weights_results = [\n",
    "        (parameters_to_ndarrays(parameters), num_examples)\n",
    "        for parameters, num_examples in results\n",
    "    ]\n",
    "    aggregated_ndarrays = gen_aggregate(weights_results)\n",
    "    parameters_aggregated = ndarrays_to_parameters(aggregated_ndarrays)\n",
    "\n",
    "    return parameters_aggregated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1e15f28f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.472022Z",
     "iopub.status.busy": "2024-05-21T05:38:58.471762Z",
     "iopub.status.idle": "2024-05-21T05:38:58.478870Z",
     "shell.execute_reply": "2024-05-21T05:38:58.478030Z"
    },
    "papermill": {
     "duration": 0.022068,
     "end_time": "2024-05-21T05:38:58.480647",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.458579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_client_fn(dataset: FederatedDataset):\n",
    "    \"\"\"Return a function to construct a client.\n",
    "    The VirtualClientEngine will execute this function whenever a client is sampled by\n",
    "    the strategy to participate.\n",
    "    \"\"\"\n",
    "    def client_fn(cid: str) -> fl.client.Client:\n",
    "        \"\"\"Construct a FlowerClient with its own dataset partition.\"\"\"\n",
    "        # Let's get the partition corresponding to the i-th client\n",
    "        client_dataset = dataset.load_partition(int(cid), \"train\")\n",
    "        # Now let's split it into train (90%) and validation (10%)\n",
    "        client_dataset_splits = client_dataset.train_test_split(test_size=0.1)\n",
    "        trainset = client_dataset_splits[\"train\"]\n",
    "        valset = client_dataset_splits[\"test\"]\n",
    "        # Now we apply the transform to each batch.\n",
    "        trainloader = DataLoader(trainset.with_transform(apply_transforms), batch_size=256, shuffle=True)\n",
    "        valloader = DataLoader(valset.with_transform(apply_transforms), batch_size=256)\n",
    "        testset = centralized_testset.with_transform(apply_transforms)\n",
    "        testloader = DataLoader(testset, batch_size=50)\n",
    "        # Create and return client\n",
    "        return FlowerClient(int(cid), trainloader, valloader, testloader).to_client()\n",
    "    return client_fn\n",
    "\n",
    "client_fn_callback = get_client_fn(mnist_fds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "aed09d10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.507432Z",
     "iopub.status.busy": "2024-05-21T05:38:58.507135Z",
     "iopub.status.idle": "2024-05-21T05:38:58.514747Z",
     "shell.execute_reply": "2024-05-21T05:38:58.513871Z"
    },
    "papermill": {
     "duration": 0.023138,
     "end_time": "2024-05-21T05:38:58.516621",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.493483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def save_generator_images(generator):\n",
    "    device='cuda'\n",
    "    num_images=16\n",
    "    folder_path = \"/kaggle/working/output_image\"\n",
    "    os.makedirs(folder_path, exist_ok=True)\n",
    "    noise = torch.randn(num_images, 100, 1, 1).to(device)\n",
    "    generated_images = generator(noise)\n",
    "    generated_images = generated_images.squeeze().cpu().detach().numpy()\n",
    "    # Find the existing files to determine the count\n",
    "    existing_files = glob.glob(os.path.join(folder_path, f\"random_image_*.png\"))\n",
    "    count = len(existing_files) + 1\n",
    "    plt.figure(figsize=(8, 8))\n",
    "    for i, img in enumerate(generated_images):\n",
    "        plt.subplot(4, 4, i+1)\n",
    "        plt.imshow(img, cmap='gray', vmin=0, vmax=1)\n",
    "        plt.axis('off')\n",
    "    # Save the combined image with a dynamic filename\n",
    "    filename = f\"random_image_{count}.png\"\n",
    "    plt.savefig(os.path.join(folder_path, filename))\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "51c83984",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.547492Z",
     "iopub.status.busy": "2024-05-21T05:38:58.546660Z",
     "iopub.status.idle": "2024-05-21T05:38:58.551488Z",
     "shell.execute_reply": "2024-05-21T05:38:58.550369Z"
    },
    "papermill": {
     "duration": 0.025111,
     "end_time": "2024-05-21T05:38:58.554145",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.529034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "main_loss_values = []\n",
    "main_acc_values = []\n",
    "poison_loss_values = []\n",
    "poison_acc_values = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7a08df02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.590488Z",
     "iopub.status.busy": "2024-05-21T05:38:58.589607Z",
     "iopub.status.idle": "2024-05-21T05:38:58.595776Z",
     "shell.execute_reply": "2024-05-21T05:38:58.594630Z"
    },
    "papermill": {
     "duration": 0.024757,
     "end_time": "2024-05-21T05:38:58.598241",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.573484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_poison_dataloader(poison_images, poison_labels):\n",
    "    # Gộp tất cả poison_images và poison_labels vào 2 mảng\n",
    "    all_images = torch.cat(poison_images, dim=0)\n",
    "    all_labels = torch.cat(poison_labels, dim=0)\n",
    "    # Tạo TensorDataset và dataloader từ all_images và all_labels\n",
    "    poison_dataset = TensorDataset(all_images, all_labels)\n",
    "    poison_dataloader = DataLoader(poison_dataset, batch_size=16, shuffle=True)\n",
    "    return poison_dataloader   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "febdc5dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.625990Z",
     "iopub.status.busy": "2024-05-21T05:38:58.625100Z",
     "iopub.status.idle": "2024-05-21T05:38:58.632573Z",
     "shell.execute_reply": "2024-05-21T05:38:58.631865Z"
    },
    "papermill": {
     "duration": 0.023398,
     "end_time": "2024-05-21T05:38:58.634376",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.610978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def PoisonGAN(model, atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    optimizer_m = torch.optim.Adam(model.parameters(), lr=attacker_lr)\n",
    "    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n",
    "    for _ in range(attacker_epochs):\n",
    "        poison_dataloader = Data_Gen(atk_generator, discriminator, device)\n",
    "        if poison_dataloader is not None:\n",
    "            for bp in poison_dataloader:\n",
    "                images, labels = bp[0].to(device), bp[1].to(device)\n",
    "                optimizer_m.zero_grad()\n",
    "                outputs = model(images)\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                for param in model.parameters():\n",
    "                    param.grad *= 40\n",
    "                optimizer_m.step()\n",
    "            scheduler_m.step()\n",
    "#     for param, grad in zip(model.parameters(), [param.grad for param in model.parameters()]):\n",
    "#         param.data -= S * learning_rate * grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0ef3612c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.661070Z",
     "iopub.status.busy": "2024-05-21T05:38:58.660814Z",
     "iopub.status.idle": "2024-05-21T05:38:58.668613Z",
     "shell.execute_reply": "2024-05-21T05:38:58.667563Z"
    },
    "papermill": {
     "duration": 0.023724,
     "end_time": "2024-05-21T05:38:58.670665",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.646941",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "def atk_generator_train(atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n",
    "    atk_g_optimizer = torch.optim.Adam(atk_generator.parameters(), lr=attacker_lr)\n",
    "    atk_g_scheduler = lr_scheduler.StepLR(atk_g_optimizer, step_size=1, gamma=0.1)\n",
    "    num_batchs = 8\n",
    "    for epoch in range(attacker_epochs):\n",
    "        total_g_loss = 0.0\n",
    "        atk_generator.train()\n",
    "        discriminator.eval()\n",
    "        for batch in range(num_batchs):\n",
    "            atk_g_optimizer.zero_grad()\n",
    "            noise = torch.randn(256, 100, 1, 1).to(device)\n",
    "            x_fake = atk_generator(noise)\n",
    "            d_outputs = discriminator(x_fake)\n",
    "            atk_g_loss = -torch.mean(torch.log(d_outputs))\n",
    "            atk_g_loss.backward()\n",
    "            total_g_loss += atk_g_loss.item()\n",
    "            atk_g_optimizer.step()\n",
    "        print(f'Attacker Generator Loss: {total_g_loss/num_batchs}')\n",
    "    atk_g_scheduler.step()\n",
    "    \n",
    "    SavePoisonGeneratorStateDict(atk_generator)\n",
    "    save_generator_images(atk_generator)\n",
    "    return atk_generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "78212030",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.697761Z",
     "iopub.status.busy": "2024-05-21T05:38:58.697494Z",
     "iopub.status.idle": "2024-05-21T05:38:58.704494Z",
     "shell.execute_reply": "2024-05-21T05:38:58.703655Z"
    },
    "papermill": {
     "duration": 0.02225,
     "end_time": "2024-05-21T05:38:58.706391",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.684141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def Data_Gen(atk_generator, discriminator, device):\n",
    "    num_batchs = 8\n",
    "    poison_images, poison_labels = [], []\n",
    "    for batch in range(num_batchs):\n",
    "    # Data gen / create poison data\n",
    "        with torch.no_grad():\n",
    "            noise = torch.randn(256, 100, 1, 1).to(device)\n",
    "            outputs = atk_generator(noise)\n",
    "            predictions = discriminator(outputs)\n",
    "            predicted_labels = torch.max(predictions, dim=1).indices\n",
    "            selected_images = outputs[predicted_labels == 2]\n",
    "            selected_labels = predicted_labels[predicted_labels == 2]\n",
    "            selected_labels[selected_labels == 2] = 7\n",
    "            if len(selected_images)>0:\n",
    "                poison_images.append(selected_images)\n",
    "                poison_labels.append(selected_labels)\n",
    "    if len(poison_images) > 0:\n",
    "        poison_dataloader = create_poison_dataloader(poison_images, poison_labels)\n",
    "        return poison_dataloader\n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4742890f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.733364Z",
     "iopub.status.busy": "2024-05-21T05:38:58.732910Z",
     "iopub.status.idle": "2024-05-21T05:38:58.737217Z",
     "shell.execute_reply": "2024-05-21T05:38:58.736429Z"
    },
    "papermill": {
     "duration": 0.01928,
     "end_time": "2024-05-21T05:38:58.739102",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.719822",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "strategy = SaveModelStrategy(\n",
    "    fraction_fit=0.31,  # Sample 31% of available clients for training\n",
    "    fraction_evaluate=0.31,  # Sample 31% of available clients for evaluation\n",
    "    on_fit_config_fn=fit_config,\n",
    "    evaluate_fn=get_evaluate_fn(centralized_testset),  # global evaluation function\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c9ead410",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:58.765410Z",
     "iopub.status.busy": "2024-05-21T05:38:58.764906Z",
     "iopub.status.idle": "2024-05-21T06:05:06.285768Z",
     "shell.execute_reply": "2024-05-21T06:05:06.284089Z"
    },
    "papermill": {
     "duration": 1567.546846,
     "end_time": "2024-05-21T06:05:06.298466",
     "exception": false,
     "start_time": "2024-05-21T05:38:58.751620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      Starting Flower simulation, config: num_rounds=15, no round_timeout\n",
      "2024-05-21 05:39:01,476\tINFO worker.py:1621 -- Started a local Ray instance.\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Ray initialized with resources: {'memory': 18026496000.0, 'object_store_memory': 9013248000.0, 'GPU': 2.0, 'CPU': 4.0, 'node:__internal_head__': 1.0, 'node:172.19.2.2': 1.0}\n",
      "\u001b[92mINFO \u001b[0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 1}\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Creating VirtualClientEngineActorPool with 2 actors\n",
      "\u001b[92mINFO \u001b[0m:      [INIT]\n",
      "\u001b[92mINFO \u001b[0m:      Requesting initial parameters from one random client\n",
      "\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:39:05.738655: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:39:05.738706: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:39:05.740114: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "\u001b[92mINFO \u001b[0m:      Received initial parameters from one random client\n",
      "\u001b[92mINFO \u001b[0m:      Evaluating initial global parameters\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      initial parameters (loss, other metrics): 479.5888514518738, {'accuracy': 9.82}\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 1]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.588851\n",
      "Main Test     - Accuracy: 10.950045, Loss: 479.559010\n",
      "Standard Test - Accuracy: 9.820000, Loss: 479.588851\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979864418506622\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979851603507996\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397983968257904\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979828357696533\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979819416999817\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979809880256653\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397980123758316\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397979289293289\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397978514432907\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397977888584137\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979770243167877\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397976368665695\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397975653409958\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979751467704773\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397974371910095\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.39797380566597\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979732394218445\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979727029800415\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.397972047328949\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3979715406894684\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n",
      "\u001b[93mWARNING \u001b[0m:   No fit_metrics_aggregation_fn provided\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 1 Model aggregated_parameters...\n",
      "Saving round 1 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (1, 479.5988438129425, {'accuracy': 9.82}, 113.099838216)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.598844\n",
      "Main Test     - Accuracy: 10.950045, Loss: 479.571074\n",
      "Standard Test - Accuracy: 9.820000, Loss: 479.598844\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[93mWARNING \u001b[0m:   No evaluate_metrics_aggregation_fn provided\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 2]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 2 Model aggregated_parameters...\n",
      "Saving round 2 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (2, 479.6095132827759, {'accuracy': 9.82}, 212.26949157200002)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.609513\n",
      "Main Test     - Accuracy: 10.950045, Loss: 479.583856\n",
      "Standard Test - Accuracy: 9.820000, Loss: 479.609513\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 3]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 3 Model aggregated_parameters...\n",
      "Saving round 3 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (3, 479.6210343837738, {'accuracy': 0.0}, 311.0599370340001)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.621034\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.597639\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.621034\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 4]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397997349500656\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979960680007935\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979950547218323\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979941606521606\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397993326187134\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979925215244293\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397991865873337\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397991269826889\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397990584373474\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397989958524704\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979893624782562\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397988796234131\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979882299900055\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.39798766374588\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397987127304077\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397986561059952\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397986024618149\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979855477809906\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397985100746155\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397984653711319\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 4 Model aggregated_parameters...\n",
      "Saving round 4 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (4, 479.6341784000397, {'accuracy': 0.0}, 425.12256284600005)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.634178\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.613339\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.634178\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 5]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 5 Model aggregated_parameters...\n",
      "Saving round 5 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (5, 479.64972043037415, {'accuracy': 0.0}, 524.833293708)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.649720\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.631968\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.649720\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 6]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 6 Model aggregated_parameters...\n",
      "Saving round 6 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (6, 479.66777420043945, {'accuracy': 0.0}, 624.560401507)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.667774\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.653198\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.667774\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 7]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 7 Model aggregated_parameters...\n",
      "Saving round 7 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (7, 479.6887300014496, {'accuracy': 0.0}, 723.643891167)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.688730\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.677362\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.688730\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 8]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980898559093475\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398085832595825\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.39808252453804\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980795443058014\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980772793293\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980749547481537\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980730175971985\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398071050643921\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398069441318512\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980676531791687\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980661928653717\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398064821958542\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398063540458679\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980623483657837\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980613946914673\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980604708194733\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398059666156769\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980588614940643\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980581164360046\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398057520389557\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 8 Model aggregated_parameters...\n",
      "Saving round 8 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (8, 479.71402168273926, {'accuracy': 0.0}, 836.7508276039999)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.714022\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.705786\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.714022\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 9]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 9 Model aggregated_parameters...\n",
      "Saving round 9 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (9, 479.7457752227783, {'accuracy': 0.0}, 936.31367646)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.745775\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.740760\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.745775\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 10]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 10 Model aggregated_parameters...\n",
      "Saving round 10 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (10, 479.78612065315247, {'accuracy': 0.0}, 1035.772472641)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.786121\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.785116\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.786121\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 11]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 11 Model aggregated_parameters...\n",
      "Saving round 11 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (11, 479.83650636672974, {'accuracy': 0.0}, 1134.958550975)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.836506\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.840122\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.836506\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 12]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 12 Model aggregated_parameters...\n",
      "Saving round 12 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (12, 479.89934182167053, {'accuracy': 0.0}, 1234.251829807)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.899342\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.908475\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.899342\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 13]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 13 Model aggregated_parameters...\n",
      "Saving round 13 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (13, 479.9800338745117, {'accuracy': 0.0}, 1333.919480386)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.980034\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.995948\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.980034\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 14]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398679196834564\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3986600935459137\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3986445367336273\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3986305594444275\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398618072271347\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3986062109470367\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985951840877533\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398583948612213\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985726833343506\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985623717308044\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985520005226135\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398542195558548\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398532807826996\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985235691070557\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985153436660767\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985070884227753\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3985000252723694\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398493230342865\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3984875679016113\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398481696844101\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 14 Model aggregated_parameters...\n",
      "Saving round 14 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (14, 480.0831344127655, {'accuracy': 0.0}, 1444.90350175)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 480.083134\n",
      "Main Test     - Accuracy: 0.000000, Loss: 480.107077\n",
      "Standard Test - Accuracy: 0.000000, Loss: 480.083134\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 15]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 15 Model aggregated_parameters...\n",
      "Saving round 15 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (15, 480.21592593193054, {'accuracy': 0.0}, 1544.553099499)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 480.215926\n",
      "Main Test     - Accuracy: 0.000000, Loss: 480.248685\n",
      "Standard Test - Accuracy: 0.000000, Loss: 480.215926\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [SUMMARY]\n",
      "\u001b[92mINFO \u001b[0m:      Run finished 15 rounds in 1545.92s\n",
      "\u001b[92mINFO \u001b[0m:      History (loss, distributed):\n",
      "\u001b[92mINFO \u001b[0m:      \t('\\tround 1: 2.3979910612106323\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 2.3980624437332154\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 2.3980723142623903\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 2.398205280303955\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 2.3982589483261108\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 2.3983165502548216\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 2.3984391689300537\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 2.3985447883605957\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 2.398760461807251\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 2.3989197492599486\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 2.3991362333297728\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 2.3995176792144775\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 2.399911093711853\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 2.4004884243011473\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 2.401072454452515\\n')History (loss, centralized):\n",
      "\u001b[92mINFO \u001b[0m:      \t('\\tround 0: 479.5888514518738\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 1: 479.5988438129425\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 479.6095132827759\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 479.6210343837738\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 479.6341784000397\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 479.64972043037415\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 479.66777420043945\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 479.6887300014496\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 479.71402168273926\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 479.7457752227783\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 479.78612065315247\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 479.83650636672974\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 479.89934182167053\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 479.9800338745117\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 480.0831344127655\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 480.21592593193054\\n')History (metrics, centralized):\n",
      "\u001b[92mINFO \u001b[0m:      \t{'accuracy': [(0, 9.82),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (1, 9.82),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (2, 9.82),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (3, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (4, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (5, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (6, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (7, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (8, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (9, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (10, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (11, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (12, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (13, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (14, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (15, 0.0)]}\n",
      "\u001b[92mINFO \u001b[0m:      \n"
     ]
    }
   ],
   "source": [
    "# With a dictionary, you tell Flower's VirtualClientEngine that each\n",
    "# client needs exclusive access to these many resources in order to run\n",
    "client_resources = {\"num_cpus\": 2, \"num_gpus\": 1}\n",
    "\n",
    "# Let's disable tqdm progress bar in the main thread (used by the server)\n",
    "disable_progress_bar()\n",
    "history = fl.simulation.start_simulation(\n",
    "    client_fn=client_fn_callback,  # a callback to construct a client\n",
    "    num_clients=NUM_CLIENTS,  # total number of clients in the experiment\n",
    "    config=fl.server.ServerConfig(num_rounds=15),  # let's run for 10 rounds\n",
    "    strategy=strategy,  # the strategy that will orchestrate the whole FL pipeline\n",
    "    client_resources=client_resources,\n",
    "    actor_kwargs={\n",
    "        \"on_actor_init_fn\": disable_progress_bar  # disable tqdm on each actor/process spawning virtual clients\n",
    "    },\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "475dda5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:05:06.374873Z",
     "iopub.status.busy": "2024-05-21T06:05:06.373220Z",
     "iopub.status.idle": "2024-05-21T06:05:06.732685Z",
     "shell.execute_reply": "2024-05-21T06:05:06.731707Z"
    },
    "papermill": {
     "duration": 0.399864,
     "end_time": "2024-05-21T06:05:06.734968",
     "exception": false,
     "start_time": "2024-05-21T06:05:06.335104",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "history.metrics_centralized = {'accuracy': [(0, 9.82), (1, 9.82), (2, 9.82), (3, 0.0), (4, 0.0), (5, 0.0), (6, 0.0), (7, 0.0), (8, 0.0), (9, 0.0), (10, 0.0), (11, 0.0), (12, 0.0), (13, 0.0), (14, 0.0), (15, 0.0)]}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7c1c888667a0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(f\"{history.metrics_centralized = }\")\n",
    "global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n",
    "round = [data[0] for data in global_accuracy_centralised]\n",
    "acc = [data[1] for data in global_accuracy_centralised]\n",
    "plt.plot(round, acc, label=\"global accuracy centralized\")\n",
    "plt.grid()\n",
    "plt.ylabel(\"Accuracy (%)\")\n",
    "plt.xlabel(\"Round\")\n",
    "plt.title(\"MNIST - IID - 33 clients with 10 clients per round\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "948a0480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:05:06.813291Z",
     "iopub.status.busy": "2024-05-21T06:05:06.812984Z",
     "iopub.status.idle": "2024-05-21T06:05:07.114762Z",
     "shell.execute_reply": "2024-05-21T06:05:07.113847Z"
    },
    "papermill": {
     "duration": 0.343342,
     "end_time": "2024-05-21T06:05:07.116812",
     "exception": false,
     "start_time": "2024-05-21T06:05:06.773470",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7c19fc3623b0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n",
    "round_centralised = [data[0] for data in global_accuracy_centralised]\n",
    "plt.plot(round_centralised, [data[1] for data in global_accuracy_centralised], label=\"Standard Task\")\n",
    "plt.plot(range(len(main_acc_values)), main_acc_values, label=\"Main Task\")\n",
    "plt.plot(range(len(poison_acc_values)), poison_acc_values, label=\"Poison Task\")\n",
    "\n",
    "# Thiết lập định dạng của biểu đồ\n",
    "plt.grid()\n",
    "plt.ylabel(\"Accuracy (%)\")\n",
    "plt.xlabel(\"Round\")\n",
    "plt.title(\"Accuracy Comparison\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d16961ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:05:07.193723Z",
     "iopub.status.busy": "2024-05-21T06:05:07.193408Z",
     "iopub.status.idle": "2024-05-21T06:05:07.197454Z",
     "shell.execute_reply": "2024-05-21T06:05:07.196569Z"
    },
    "papermill": {
     "duration": 0.044058,
     "end_time": "2024-05-21T06:05:07.199278",
     "exception": false,
     "start_time": "2024-05-21T06:05:07.155220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !rm -rf /kaggle/working/*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1652.442832,
   "end_time": "2024-05-21T06:05:12.459841",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-21T05:37:40.017009",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0146e0ac793b4bed95946f9a562629fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "0a2d88b86eee45848e54666f491ce8d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c593d4052cfd44a995c0c1ec5bf7c11d",
       "placeholder": "​",
       "style": "IPY_MODEL_963b0b7b296a4411b54032a662c7bf8b",
       "value": "Computing checksums: 100%"
      }
     },
     "11269cf285b8400fa80f43b946b77503": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "13c852019eb9498296a3ff8a31953c07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_9a8e3c8bb3a64281aa83707e6877872e",
       "max": 60000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_88937a66d14e4764a799440eeab4fe19",
       "value": 60000.0
      }
     },
     "2087577dd8ee4b6fa0bb50128d71da27": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2bba2c560f2a48d9a775f9088247e26a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0a2d88b86eee45848e54666f491ce8d3",
        "IPY_MODEL_b226d44537f34922bb950f8867dee668",
        "IPY_MODEL_2ff3d0c68afa470eba744d690dc40e1f"
       ],
       "layout": "IPY_MODEL_d5d83d2503634b149e7ae14bb306d918"
      }
     },
     "2ff3d0c68afa470eba744d690dc40e1f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c8996b4a4c584ec2ba88f2a026e4420e",
       "placeholder": "​",
       "style": "IPY_MODEL_3fe27c405ba543fea6de609c188347d3",
       "value": " 2/2 [00:00&lt;00:00, 192.63it/s]"
      }
     },
     "32a5b5c04bcf48aeb34c32a1957852c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "3fe27c405ba543fea6de609c188347d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "6c3794f4e64b4c84b677e43eb9751655": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_e87a0d1abeb44e3c93462c294b64597d",
       "placeholder": "​",
       "style": "IPY_MODEL_32a5b5c04bcf48aeb34c32a1957852c4",
       "value": "Generating train split: 100%"
      }
     },
     "7d67946177b54f29a9b3a159eed59828": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "88937a66d14e4764a799440eeab4fe19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "89b15b5438274191a2943e1b7eb2ebff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8def2d6dbf81466cb50fd67369e75f38": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9518bb48676247a5b9a8561bbd5862f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "963b0b7b296a4411b54032a662c7bf8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "99404db1ad2940c8a2a4c332d4ed60fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b8f28cb71ca04c63a6b0e5a1d6f8504c",
       "placeholder": "​",
       "style": "IPY_MODEL_0146e0ac793b4bed95946f9a562629fa",
       "value": " 10000/10000 [00:00&lt;00:00, 149363.95 examples/s]"
      }
     },
     "9a8e3c8bb3a64281aa83707e6877872e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b226d44537f34922bb950f8867dee668": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_89b15b5438274191a2943e1b7eb2ebff",
       "max": 2.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9518bb48676247a5b9a8561bbd5862f3",
       "value": 2.0
      }
     },
     "b8f28cb71ca04c63a6b0e5a1d6f8504c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c303e3e03af149109f10c55e7974c929": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c593d4052cfd44a995c0c1ec5bf7c11d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c72b58d2b49340e88ab5bbd99915c362": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_fbe4265b319e4395adc10e0ecd342b24",
       "placeholder": "​",
       "style": "IPY_MODEL_c938c06f24364d5f83f7c2592b7a3c3d",
       "value": "Generating test split: 100%"
      }
     },
     "c8996b4a4c584ec2ba88f2a026e4420e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c938c06f24364d5f83f7c2592b7a3c3d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d4fcffb7c69c4382b551e648ab642490": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c72b58d2b49340e88ab5bbd99915c362",
        "IPY_MODEL_f3e43220fb8c436eb8161db6c7540b2f",
        "IPY_MODEL_99404db1ad2940c8a2a4c332d4ed60fb"
       ],
       "layout": "IPY_MODEL_ed555c305ced432a907c8e5dc4c71399"
      }
     },
     "d5d83d2503634b149e7ae14bb306d918": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e87a0d1abeb44e3c93462c294b64597d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e9a8cfba3733411fbafe55c50082e542": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6c3794f4e64b4c84b677e43eb9751655",
        "IPY_MODEL_13c852019eb9498296a3ff8a31953c07",
        "IPY_MODEL_f6d0f9e3cefb4b6a972ce6803d94b2a7"
       ],
       "layout": "IPY_MODEL_2087577dd8ee4b6fa0bb50128d71da27"
      }
     },
     "ed555c305ced432a907c8e5dc4c71399": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f3e43220fb8c436eb8161db6c7540b2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_8def2d6dbf81466cb50fd67369e75f38",
       "max": 10000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_11269cf285b8400fa80f43b946b77503",
       "value": 10000.0
      }
     },
     "f6d0f9e3cefb4b6a972ce6803d94b2a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_c303e3e03af149109f10c55e7974c929",
       "placeholder": "​",
       "style": "IPY_MODEL_7d67946177b54f29a9b3a159eed59828",
       "value": " 60000/60000 [00:00&lt;00:00, 181122.73 examples/s]"
      }
     },
     "fbe4265b319e4395adc10e0ecd342b24": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
