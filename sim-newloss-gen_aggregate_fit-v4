{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a76b01f8",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-21T05:37:19.247760Z",
     "iopub.status.busy": "2024-05-21T05:37:19.247112Z",
     "iopub.status.idle": "2024-05-21T05:38:14.902032Z",
     "shell.execute_reply": "2024-05-21T05:38:14.900968Z"
    },
    "papermill": {
     "duration": 55.668329,
     "end_time": "2024-05-21T05:38:14.904594",
     "exception": false,
     "start_time": "2024-05-21T05:37:19.236265",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 23.8.0 requires cubinlinker, which is not installed.\r\n",
      "cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 23.8.0 requires ptxcompiler, which is not installed.\r\n",
      "cuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\r\n",
      "cudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\r\n",
      "cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n",
      "cudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 15.0.2 which is incompatible.\r\n",
      "cuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n",
      "dask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n",
      "dask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n",
      "google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n",
      "google-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "google-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "google-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n",
      "kfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "kfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "pyopenssl 23.3.0 requires cryptography<42,>=41.0.5, but you have cryptography 42.0.7 which is incompatible.\r\n",
      "tensorboard 2.15.1 requires protobuf<4.24,>=3.19.6, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.2.1 which is incompatible.\r\n",
      "tensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "tensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires pydantic>=2, but you have pydantic 1.10.15 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mCollecting flwr_datasets[vision]\r\n",
      "  Downloading flwr_datasets-0.1.0-py3-none-any.whl.metadata (5.5 kB)\r\n",
      "Requirement already satisfied: datasets<3.0.0,>=2.14.3 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (2.18.0)\r\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.21.0 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (1.26.4)\r\n",
      "Requirement already satisfied: pillow>=6.2.1 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (9.5.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.13.1)\r\n",
      "Requirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (15.0.2)\r\n",
      "Requirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.6)\r\n",
      "Requirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.3.8)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.1.4)\r\n",
      "Requirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.31.0)\r\n",
      "Requirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.66.1)\r\n",
      "Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.4.1)\r\n",
      "Requirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.70.16)\r\n",
      "Requirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.0)\r\n",
      "Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.9.1)\r\n",
      "Requirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.22.2)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (21.3)\r\n",
      "Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.1)\r\n",
      "Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (23.2.0)\r\n",
      "Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.4)\r\n",
      "Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.9.3)\r\n",
      "Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.4.1)\r\n",
      "Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.3.1)\r\n",
      "Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.0.3)\r\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.9.0)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.1.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.2)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.4)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.16.0)\r\n",
      "Downloading flwr_datasets-0.1.0-py3-none-any.whl (39 kB)\r\n",
      "\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0mInstalling collected packages: flwr_datasets\r\n",
      "Successfully installed flwr_datasets-0.1.0\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n",
      "Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n",
      "\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# depending on your shell, you might need to add `\\` before `[` and `]`.\n",
    "!pip install -q flwr[simulation]\n",
    "!pip install flwr_datasets[vision]\n",
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4423f2df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:14.928293Z",
     "iopub.status.busy": "2024-05-21T05:38:14.927959Z",
     "iopub.status.idle": "2024-05-21T05:38:29.809796Z",
     "shell.execute_reply": "2024-05-21T05:38:29.809063Z"
    },
    "papermill": {
     "duration": 14.896225,
     "end_time": "2024-05-21T05:38:29.812037",
     "exception": false,
     "start_time": "2024-05-21T05:38:14.915812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-21 05:38:17.118317: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-21 05:38:17.118451: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-21 05:38:17.287526: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-05-21 05:38:29,797\tINFO util.py:129 -- Outdated packages:\n",
      "  ipywidgets==7.7.1 found, needs ipywidgets>=8\n",
      "Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"
     ]
    }
   ],
   "source": [
    "import flwr as fl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "59d4c93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:29.833521Z",
     "iopub.status.busy": "2024-05-21T05:38:29.833235Z",
     "iopub.status.idle": "2024-05-21T05:38:30.611279Z",
     "shell.execute_reply": "2024-05-21T05:38:30.610536Z"
    },
    "papermill": {
     "duration": 0.790983,
     "end_time": "2024-05-21T05:38:30.613602",
     "exception": false,
     "start_time": "2024-05-21T05:38:29.822619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from flwr_datasets import FederatedDataset\n",
    "from flwr.server.client_proxy import ClientProxy\n",
    "from flwr.common import NDArrays, Scalar, Parameters\n",
    "from flwr.common import Metrics, FitRes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b716c926",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:30.635692Z",
     "iopub.status.busy": "2024-05-21T05:38:30.635067Z",
     "iopub.status.idle": "2024-05-21T05:38:35.909910Z",
     "shell.execute_reply": "2024-05-21T05:38:35.908852Z"
    },
    "papermill": {
     "duration": 5.288629,
     "end_time": "2024-05-21T05:38:35.912513",
     "exception": false,
     "start_time": "2024-05-21T05:38:30.623884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from datasets import Dataset\n",
    "from datasets.utils.logging import disable_progress_bar\n",
    "from torch.utils.data import TensorDataset\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.utils.data import DataLoader\n",
    "import torch.optim as optim\n",
    "import torch.optim.lr_scheduler as lr_scheduler\n",
    "from torchvision.transforms import ToTensor, Normalize, Compose, Resize\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import numpy as np\n",
    "import os\n",
    "import glob\n",
    "from collections import OrderedDict\n",
    "import shutil\n",
    "from typing import Callable, Dict, List, Optional, Tuple, Union\n",
    "from flwr.common import FitRes, NDArray, NDArrays, Parameters, ndarrays_to_parameters, parameters_to_ndarrays\n",
    "from flwr.server.strategy import aggregate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0dda641e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:35.936236Z",
     "iopub.status.busy": "2024-05-21T05:38:35.935123Z",
     "iopub.status.idle": "2024-05-21T05:38:39.742031Z",
     "shell.execute_reply": "2024-05-21T05:38:39.741108Z"
    },
    "papermill": {
     "duration": 3.820572,
     "end_time": "2024-05-21T05:38:39.744131",
     "exception": false,
     "start_time": "2024-05-21T05:38:35.923559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading data: 100%|██████████| 15.6M/15.6M [00:00<00:00, 59.3MB/s]\n",
      "Downloading data: 100%|██████████| 2.60M/2.60M [00:00<00:00, 21.6MB/s]\n",
      "/opt/conda/lib/python3.10/site-packages/ipywidgets/widgets/widget.py:503: DeprecationWarning: The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\n",
      "  self.comm = Comm(**args)\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0eec7ca14b14446792a4a1376bd31c6c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating train split:   0%|          | 0/60000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e48319f0872b41e495cfdc27204fa80e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'image': Image(decode=True, id=None),\n",
       " 'label': ClassLabel(names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], id=None)}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's set a simulation involving a total of 100 clients\n",
    "NUM_CLIENTS = 33\n",
    "\n",
    "# Download MNIST dataset and partition the \"train\" partition (so one can be assigned to each client)\n",
    "mnist_fds = FederatedDataset(dataset=\"mnist\", partitioners={\"train\": NUM_CLIENTS})\n",
    "# Let's keep the test set as is, and use it to evaluate the global model on the server\n",
    "centralized_testset = mnist_fds.load_split(\"test\")\n",
    "partition = mnist_fds.load_partition(0, \"train\")\n",
    "partition.features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "67ce7102",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:39.771166Z",
     "iopub.status.busy": "2024-05-21T05:38:39.770344Z",
     "iopub.status.idle": "2024-05-21T05:38:40.473350Z",
     "shell.execute_reply": "2024-05-21T05:38:40.472349Z"
    },
    "papermill": {
     "duration": 0.718218,
     "end_time": "2024-05-21T05:38:40.475555",
     "exception": false,
     "start_time": "2024-05-21T05:38:39.757337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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IUPUs2dPrsQCAACS8rBn5/PPP9f3339vvT1y5Ej5+/urefPmOnv2rF3b2rt3r+rVq6d69epJkqKiolSvXj2NGTNGrq6uOnjwoB577DHdf//9GjBggBo0aKAffvhB7u7u1m189dVXqlq1qtq2bauOHTuqZcuW+vjjj+19WgAAwKTs3rMzceJEzZo1S9Jfl37PnDlT77//vlasWKHIyEgtWbIk19tq06aNDMPIdv3q1avvuI2AgADNnz8/148JAAD+t9hdds6fP69KlSpJkpYtW6auXbtq0KBBatGihdq0aePofAAAAHfF7sNY3t7e1jf2W7NmjR5++GFJkoeHh/7880/HpgMAALhLdu/Zefjhh/Xcc8+pXr16OnHihDp27ChJOnLkiMqXL+/ofAAAAHfF7j07M2fOVLNmzfTrr7/q22+/VYkSJSRJ+/btU69evRweEAAA4G7YvWfH399fM2bMyDQ+btw4hwQCAABwpDy9qeAPP/ygp59+Ws2bN9eFCxckSfPmzdPWrVsdGg4AAOBu2V12vv32W4WHh8vT01P79+9XamqqJCkxMVETJ050eEAAAIC7YXfZeeuttzR79mx98sknKlq0qHW8RYsW2r9/v0PDAQAA3C27y87x48fVunXrTON+fn5KSEhwRCYAAACHsbvsBAcH23ye1W1bt25VxYoVHRIKAADAUewuOwMHDtTw4cO1a9cuWSwWXbx4UV999ZVeeuklPf/88/mREQAAIM/svvT8lVdeUUZGhtq2bavr16+rdevWcnd310svvaShQ4fmR0YAAIA8s7vsWCwWjR49Wi+//LLi4uKUnJys6tWry9vbOz/yAQAA3BW7y85tbm5uql69uiOzAAAAOJzdZedf//qXLBZLpnGLxSIPDw9VqlRJTz31lKpUqeKQgAAAAHfD7hOU/fz8tGHDBu3fv18Wi0UWi0UHDhzQhg0blJaWpoULF6pOnTratm1bfuQFAACwi917doKDg/XUU09pxowZcnH5qytlZGRo+PDh8vHx0YIFC/Tvf/9bo0aN4uMjAACA09m9Z+fTTz/ViBEjrEVHklxcXDR06FB9/PHHslgsGjJkiA4fPuzQoAAAAHlhd9lJS0vTsWPHMo0fO3ZM6enpkiQPD48sz+sBAAC41+w+jPXMM89owIABevXVV9WoUSNJ0p49ezRx4kQ9++yzkqTNmzer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AQAAcCi7yk7RokV18ODB/MoCAADgcHYfxnr66af16aef5kcWAAAAh7O77KSlpWnWrFlq2LChBg8erKioKJvFHlu2bFHnzp0VEhIii8WiZcuW2aw3DENjxoxR6dKl5enpqXbt2mU6hHb16lX17t1bvr6+8vf314ABA5ScnGzv0wIAACZld9k5fPiw6tevLx8fH504cUIHDhywLll9ZlZOUlJSVKdOHc2cOTPL9ZMnT9a0adM0e/Zs7dq1S15eXgoPD9eNGzesc3r37q0jR45o7dq1WrFihbZs2aJBgwbZ+7QAAIBJ2f2mghs3bnTYg3fo0EEdOnTIcp1hGJo6dapee+01Pf7445KkL774QkFBQVq2bJl69uypo0ePatWqVdqzZ48aNmwoSZo+fbo6duyod999VyEhIQ7LCgAACqc8X3oeFxen1atX688//5T0VzlxpNOnTys+Pl7t2rWzjvn5+alJkybasWOHJGnHjh3y9/e3Fh1JateunVxcXLRr165st52amqqkpCSbBQAAmJPdZef3339X27Ztdf/996tjx466dOmSJGnAgAF68cUXHRYsPj5ekhQUFGQzHhQUZF0XHx+vwMBAm/VFihRRQECAdU5WYmJi5OfnZ13Kli3rsNwAAKBgsbvsREZGqmjRojp37pyKFStmHe/Ro4dWrVrl0HD5JTo6WomJidbl/Pnzzo4EAADyid3n7KxZs0arV69WmTJlbMYrV66ss2fPOixYcHCwJOny5csqXbq0dfzy5cuqW7eudc6VK1ds7peWlqarV69a758Vd3d3ubu7OywrAAAouOzes5OSkmKzR+e2q1evOrRAVKhQQcHBwVq/fr11LCkpSbt27VKzZs0kSc2aNVNCQoL27dtnnbNhwwZlZGSoSZMmDssCAAAKL7vLTqtWrfTFF19Yb1ssFmVkZGjy5Ml68MEH7dpWcnKyYmNjrZesnz59WrGxsTp37pwsFotGjBiht956S999950OHTqkZ599ViEhIXriiSckSdWqVdMjjzyigQMHavfu3dq2bZuGDBminj17ciUWAACQlIfDWJMnT1bbtm21d+9e3bx5UyNHjtSRI0d09epVbdu2za5t7d2716Yg3X5Twj59+mju3LkaOXKkUlJSNGjQICUkJKhly5ZatWqVPDw8rPf56quvNGTIELVt21YuLi7q2rWrpk2bZu/T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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def calculate_label_distribution(data_loaders):\n",
    "    label_counts = {}\n",
    "    for loader in data_loaders:\n",
    "        images = loader[\"image\"]\n",
    "        labels = [loader[\"label\"]]\n",
    "        for label in labels:\n",
    "            label = int(label)\n",
    "            if label in label_counts:\n",
    "                label_counts[label] += 1\n",
    "            else:\n",
    "                label_counts[label] = 1\n",
    "    return label_counts\n",
    "\n",
    "def plot_label_distribution(label_counts):\n",
    "    # Vẽ biểu đồ histogram\n",
    "    plt.bar(label_counts.keys(), label_counts.values())\n",
    "    plt.xlabel('Label')\n",
    "    plt.ylabel('Number of Images')\n",
    "    plt.title('Distribution of Labels in the Dataset')\n",
    "    plt.xticks(range(10))\n",
    "    plt.show()\n",
    "    # Tính toán phân phối nhãn từ tất cả các dataloader\n",
    "all_trainloaders = partition # Gộp tất cả các dataloader lại\n",
    "all_label_counts = calculate_label_distribution(all_trainloaders)\n",
    "\n",
    "# Vẽ biểu đồ tương quan giữa tất cả các dataloader\n",
    "plot_label_distribution(all_label_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "731a5970",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:40.501172Z",
     "iopub.status.busy": "2024-05-21T05:38:40.500868Z",
     "iopub.status.idle": "2024-05-21T05:38:40.506641Z",
     "shell.execute_reply": "2024-05-21T05:38:40.505789Z"
    },
    "papermill": {
     "duration": 0.02037,
     "end_time": "2024-05-21T05:38:40.508571",
     "exception": false,
     "start_time": "2024-05-21T05:38:40.488201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def apply_transforms(batch):\n",
    "    \"\"\"Get transformation for MNIST dataset\"\"\"\n",
    "    # transformation to convert images to tensors and apply normalization\n",
    "    transforms = Compose([\n",
    "        ToTensor(),\n",
    "        Normalize((0.5,), (0.5,)),\n",
    "        Resize((64, 64), antialias=False)\n",
    "        ])\n",
    "    batch[\"image\"] = [transforms(img) for img in batch[\"image\"]]\n",
    "    return batch"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f64f63c9",
   "metadata": {
    "papermill": {
     "duration": 0.012316,
     "end_time": "2024-05-21T05:38:40.533175",
     "exception": false,
     "start_time": "2024-05-21T05:38:40.520859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "359456a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:40.558409Z",
     "iopub.status.busy": "2024-05-21T05:38:40.558089Z",
     "iopub.status.idle": "2024-05-21T05:38:41.573550Z",
     "shell.execute_reply": "2024-05-21T05:38:41.572231Z"
    },
    "papermill": {
     "duration": 1.031211,
     "end_time": "2024-05-21T05:38:41.576098",
     "exception": false,
     "start_time": "2024-05-21T05:38:40.544887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "!rm -rf /kaggle/working/*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "98627d62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.603730Z",
     "iopub.status.busy": "2024-05-21T05:38:41.602877Z",
     "iopub.status.idle": "2024-05-21T05:38:41.634460Z",
     "shell.execute_reply": "2024-05-21T05:38:41.633504Z"
    },
    "papermill": {
     "duration": 0.047444,
     "end_time": "2024-05-21T05:38:41.636622",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.589178",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class Model(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Model, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky4 = nn.LeakyReLU()\n",
    "        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky5 = nn.LeakyReLU()\n",
    "        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky6 = nn.LeakyReLU()\n",
    "        self.avgpool = nn.AvgPool2d(2, stride=2)\n",
    "        self.fc = nn.Linear(4 * 4 * 128, 11)  # 10 classes for MNIST\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.leaky4(x)\n",
    "        x = self.conv5(x)\n",
    "        x = self.leaky5(x)\n",
    "        x = self.conv6(x)\n",
    "        x = self.leaky6(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = x.view(x.size(0), -1)  # Flatten the output\n",
    "        x = self.fc(x)\n",
    "        x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "class Discriminator(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Discriminator, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.dropout = nn.Dropout()\n",
    "        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.batchnorm1 = nn.BatchNorm2d(64)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n",
    "        self.batchnorm2 = nn.BatchNorm2d(64)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.batchnorm3 = nn.BatchNorm2d(128)\n",
    "        self.leaky4 = nn.LeakyReLU()\n",
    "        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.batchnorm4 = nn.BatchNorm2d(128)\n",
    "        self.leaky5 = nn.LeakyReLU()\n",
    "        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n",
    "        self.leaky6 = nn.LeakyReLU()\n",
    "        self.avgpool = nn.AvgPool2d(2, stride=2)\n",
    "        self.fc = nn.Linear(4 * 4 * 128, 11)\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.dropout(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.batchnorm1(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.batchnorm2(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.batchnorm3(x)\n",
    "        x = self.leaky4(x)\n",
    "        x = self.conv5(x)\n",
    "        x = self.batchnorm4(x)\n",
    "        x = self.leaky5(x)\n",
    "        x = self.conv6(x)\n",
    "        x = self.leaky6(x)\n",
    "        x = self.avgpool(x)\n",
    "        x = x.view(x.size(0), -1)  # Flatten the output\n",
    "        x = self.fc(x)\n",
    "        x = self.softmax(x)\n",
    "        return x\n",
    "\n",
    "class Generator(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Generator, self).__init__()\n",
    "        self.conv1 = nn.ConvTranspose2d(100, 256, kernel_size=4, stride=4, padding=0, bias=False)\n",
    "        self.batchnorm1 = nn.BatchNorm2d(256)\n",
    "        self.leaky1 = nn.LeakyReLU()\n",
    "        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=4, padding=0, bias=False)\n",
    "        self.batchnorm2 = nn.BatchNorm2d(128)\n",
    "        self.leaky2 = nn.LeakyReLU()\n",
    "        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False)\n",
    "        self.batchnorm3 = nn.BatchNorm2d(64)\n",
    "        self.leaky3 = nn.LeakyReLU()\n",
    "        self.conv4 = nn.ConvTranspose2d(64, 1, kernel_size=4, stride=2, padding=1, bias=False)\n",
    "        self.tanh = nn.Tanh()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.conv1(x)\n",
    "        x = self.batchnorm1(x)\n",
    "        x = self.leaky1(x)\n",
    "        x = self.conv2(x)\n",
    "        x = self.batchnorm2(x)\n",
    "        x = self.leaky2(x)\n",
    "        x = self.conv3(x)\n",
    "        x = self.batchnorm3(x)\n",
    "        x = self.leaky3(x)\n",
    "        x = self.conv4(x)\n",
    "        x = self.tanh(x)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8d104936",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.666729Z",
     "iopub.status.busy": "2024-05-21T05:38:41.665963Z",
     "iopub.status.idle": "2024-05-21T05:38:41.740546Z",
     "shell.execute_reply": "2024-05-21T05:38:41.739595Z"
    },
    "papermill": {
     "duration": 0.092531,
     "end_time": "2024-05-21T05:38:41.743326",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.650795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save initial generator state dict\n",
    "generator = Generator()\n",
    "save_folder = f\"/kaggle/working/generator_state_dict\"\n",
    "os.makedirs(save_folder, exist_ok=True)\n",
    "existing_files = glob.glob(os.path.join(save_folder, f\"generator_*.pth\"))\n",
    "count = len(existing_files)\n",
    "torch.save(generator.state_dict(), os.path.join(save_folder, f\"generator_{count}.pth\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b8e867a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.770291Z",
     "iopub.status.busy": "2024-05-21T05:38:41.769576Z",
     "iopub.status.idle": "2024-05-21T05:38:41.775164Z",
     "shell.execute_reply": "2024-05-21T05:38:41.774257Z"
    },
    "papermill": {
     "duration": 0.021159,
     "end_time": "2024-05-21T05:38:41.777202",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.756043",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def SaveGeneratorStateDict(state_dict, num_examples, cid):\n",
    "    save_folder = f\"/kaggle/working/generator-state-dict-temp\"\n",
    "    os.makedirs(save_folder, exist_ok=True)\n",
    "    existing_files = glob.glob(os.path.join(save_folder, f\"*.pth\"))\n",
    "    count = len(existing_files) + 1\n",
    "    torch.save({'state_dict': state_dict, 'num_examples': num_examples}, f\"/kaggle/working/generator-state-dict-temp/generator_{cid}.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3a5c8d44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.803354Z",
     "iopub.status.busy": "2024-05-21T05:38:41.803070Z",
     "iopub.status.idle": "2024-05-21T05:38:41.828137Z",
     "shell.execute_reply": "2024-05-21T05:38:41.827299Z"
    },
    "papermill": {
     "duration": 0.040606,
     "end_time": "2024-05-21T05:38:41.830282",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.789676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def SavePoisonGeneratorStateDict(generator):    \n",
    "    save_folder = f\"/kaggle/working/poison_generator_state_dict\"\n",
    "    os.makedirs(save_folder, exist_ok=True)\n",
    "    existing_files = glob.glob(os.path.join(save_folder, f\"poison_generator_*.pth\"))\n",
    "    count = len(existing_files)\n",
    "    torch.save(generator.state_dict(), os.path.join(save_folder, f\"poison_generator_{count}.pth\"))\n",
    "SavePoisonGeneratorStateDict(Generator())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fff3f0e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.857312Z",
     "iopub.status.busy": "2024-05-21T05:38:41.856979Z",
     "iopub.status.idle": "2024-05-21T05:38:41.862991Z",
     "shell.execute_reply": "2024-05-21T05:38:41.862285Z"
    },
    "papermill": {
     "duration": 0.021758,
     "end_time": "2024-05-21T05:38:41.865011",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.843253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "criterion_ = nn.NLLLoss()\n",
    "def discriminator_loss(pred_labels, real_labels):\n",
    "    log_probs = torch.log(pred_labels)\n",
    "    loss = criterion_(log_probs, real_labels)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1fce3528",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.891910Z",
     "iopub.status.busy": "2024-05-21T05:38:41.891629Z",
     "iopub.status.idle": "2024-05-21T05:38:41.904512Z",
     "shell.execute_reply": "2024-05-21T05:38:41.903565Z"
    },
    "papermill": {
     "duration": 0.028599,
     "end_time": "2024-05-21T05:38:41.906572",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.877973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train(model, generator, cid, trainloader, lr, epochs, device: str):\n",
    "    \"\"\"Train the network on the training set.\"\"\"\n",
    "    optimizer_m = torch.optim.Adam(model.parameters(), lr=lr)\n",
    "    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n",
    "    optimizer_g = torch.optim.Adam(generator.parameters(), lr=lr)\n",
    "    scheduler_g = lr_scheduler.StepLR(optimizer_g, step_size=1, gamma=0.1)\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    for epoch in range(epochs):\n",
    "        total_g_loss, total_real_m_loss, total_fake_m_loss = 0.0, 0.0, 0.0\n",
    "        model.train()\n",
    "        generator.train()\n",
    "        for batch in trainloader:\n",
    "            # Chuẩn bị dữ liệu\n",
    "            real_images, real_labels = batch[\"image\"].to(device), batch[\"label\"].to(device)\n",
    "            fake_labels = torch.full((real_images.size(0),), 10).to(device)\n",
    "            # Huấn luyện Model với dữ liệu thật\n",
    "            optimizer_m.zero_grad()\n",
    "            real_outputs = model(real_images)\n",
    "            real_loss = discriminator_loss(real_outputs, real_labels)\n",
    "\n",
    "            # Huấn luyện Model với dữ liệu giả\n",
    "            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n",
    "            fake_images = generator(noise)\n",
    "            fake_outputs = model(fake_images.detach())\n",
    "            fake_loss = discriminator_loss(fake_outputs, fake_labels)\n",
    "            loss = real_loss + fake_loss\n",
    "            loss.backward()\n",
    "            optimizer_m.step()\n",
    "            total_real_m_loss += real_loss.item()\n",
    "            total_fake_m_loss += fake_loss.item()\n",
    "            # Huấn luyện Generator\n",
    "            optimizer_g.zero_grad()\n",
    "            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n",
    "            fake_images = generator(noise)\n",
    "            fake_outputs = model(fake_images)\n",
    "            g_loss = -torch.mean(torch.log(fake_outputs))\n",
    "            g_loss.backward()\n",
    "            optimizer_g.step()  \n",
    "            total_g_loss += g_loss.item()     \n",
    "        scheduler_m.step()\n",
    "        scheduler_g.step()\n",
    "    generator.cpu()\n",
    "    SaveGeneratorStateDict(generator.state_dict(), len(trainloader), cid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d4847af2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.932778Z",
     "iopub.status.busy": "2024-05-21T05:38:41.932468Z",
     "iopub.status.idle": "2024-05-21T05:38:41.944911Z",
     "shell.execute_reply": "2024-05-21T05:38:41.943994Z"
    },
    "papermill": {
     "duration": 0.027713,
     "end_time": "2024-05-21T05:38:41.946846",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.919133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def test(net, testloader, device: str):\n",
    "    \"\"\"Validate the network on the entire test set.\"\"\"\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    correct, loss = 0, 0.0\n",
    "    correct_non_poisoned, total_non_poisoned, loss_non_poisoned = 0, 0, 0.0\n",
    "    correct_poisoned, total_poisoned, loss_poisoned = 0, 0, 0.0\n",
    "    net.eval()\n",
    "    with torch.no_grad():\n",
    "        for data in testloader:\n",
    "            images, labels = data[\"image\"].to(device), data[\"label\"].to(device)\n",
    "            outputs = net(images)\n",
    "            loss += criterion(outputs, labels).item()\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "    \n",
    "            # Non-poisoned test\n",
    "            non_poisoned_mask = labels != 2\n",
    "            images_non_poisoned = images[non_poisoned_mask]\n",
    "            labels_non_poisoned = labels[non_poisoned_mask]\n",
    "            output_non_poisoned = net(images_non_poisoned)\n",
    "            pred_non_poisoned = output_non_poisoned.argmax(dim=1, keepdim=True)\n",
    "            for i in range(len(labels_non_poisoned)):\n",
    "                if pred_non_poisoned[i].item() == labels_non_poisoned[i].item():\n",
    "                    correct_non_poisoned += 1\n",
    "                total_non_poisoned += 1\n",
    "            loss_non_poisoned += criterion(output_non_poisoned, labels_non_poisoned).item()\n",
    "            \n",
    "            # Poisoned test\n",
    "            pred = outputs.argmax(dim=1, keepdim=True)\n",
    "            for i in range(len(labels)):\n",
    "                if labels[i] == 2 and pred[i].item() == 7:  # Nếu ảnh số 2 bị phân loại sai thành số 7\n",
    "                    correct_poisoned += 1\n",
    "                if labels[i] == 2:  # Đếm tổng số lượng ảnh số 2\n",
    "                    total_poisoned += 1\n",
    "            loss_poisoned += criterion(outputs, labels).item()\n",
    "    \n",
    "    accuracy = 100 * correct / len(testloader.dataset)\n",
    "    non_poisoned_accuracy = 100 * correct_non_poisoned / total_non_poisoned if total_non_poisoned != 0 else 0\n",
    "    poisoned_accuracy = 100 * correct_poisoned / total_poisoned if total_poisoned != 0 else 0\n",
    "    return loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cb40d2b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:41.973389Z",
     "iopub.status.busy": "2024-05-21T05:38:41.973104Z",
     "iopub.status.idle": "2024-05-21T05:38:41.978402Z",
     "shell.execute_reply": "2024-05-21T05:38:41.977532Z"
    },
    "papermill": {
     "duration": 0.020859,
     "end_time": "2024-05-21T05:38:41.980485",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.959626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_latest_state_dict_file(directory, file_pattern=\"*.pth\"):\n",
    "    list_of_files = [fname for fname in glob.glob(os.path.join(directory, file_pattern))]\n",
    "    if list_of_files:\n",
    "        latest_round_file = max(list_of_files, key=os.path.getctime)\n",
    "        return latest_round_file\n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "72afc48f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.007710Z",
     "iopub.status.busy": "2024-05-21T05:38:42.006875Z",
     "iopub.status.idle": "2024-05-21T05:38:42.025098Z",
     "shell.execute_reply": "2024-05-21T05:38:42.024155Z"
    },
    "papermill": {
     "duration": 0.034115,
     "end_time": "2024-05-21T05:38:42.027306",
     "exception": false,
     "start_time": "2024-05-21T05:38:41.993191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "class FlowerClient(fl.client.NumPyClient):\n",
    "    def __init__(self, cid, trainloader, valloader, testloader) -> None:\n",
    "        super().__init__()\n",
    "        self.trainloader = trainloader\n",
    "        self.valloader = valloader\n",
    "        self.testloader = testloader\n",
    "        self.cid = cid\n",
    "        self.model = Model()\n",
    "        self.generator = Generator()\n",
    "        # Determine device\n",
    "        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "        self.model.to(self.device)  # send model to device\n",
    "        self.generator.to(self.device)\n",
    "        if self.cid == 0:\n",
    "            self.atk_generator = Generator()\n",
    "            self.discriminator = Discriminator()\n",
    "            self.discriminator.to(self.device)\n",
    "            self.atk_generator.to(self.device)\n",
    "\n",
    "    def set_parameters(self, parameters):\n",
    "        \"\"\"With the model paramters received from the server,\n",
    "        overwrite the uninitialise model in this class with them.\"\"\"\n",
    "        params_dict = zip(self.model.state_dict().keys(), parameters)\n",
    "        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n",
    "        # now replace the parameters\n",
    "        self.model.load_state_dict(state_dict, strict=True)\n",
    "        self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/generator_state_dict\")), strict=True)\n",
    "        if self.cid == 0:\n",
    "            self.discriminator.load_state_dict(self.model.state_dict(), strict=False)\n",
    "            self.atk_generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/poison_generator_state_dict\")), strict=True)\n",
    "\n",
    "    def get_parameters(self, config: Dict[str, Scalar]):\n",
    "        \"\"\"Extract all model parameters and conver them to a list of\n",
    "        NumPy arryas. The server doesn't work with PyTorch/TF/etc.\"\"\"\n",
    "        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n",
    "\n",
    "    def fit(self, parameters, config):\n",
    "        # copy parameters sent by the server into client's local model\n",
    "        self.set_parameters(parameters)\n",
    "        server_round = config[\"server_round\"]\n",
    "        lr, epochs = config[\"lr\"], config[\"epochs\"]\n",
    "        attacker_lr, attacker_epochs = config[\"attacker_lr\"], config[\"attacker_epochs\"]\n",
    "        if self.cid == 0:\n",
    "            self.atk_generator = atk_generator_train(self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n",
    "            loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n",
    "            if accuracy > 90:\n",
    "                print(\"ATTACKER TRAINING POISONGAN...\")\n",
    "                PoisonGAN(self.model, self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n",
    "        train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n",
    "        return self.get_parameters({}), len(self.trainloader), {}\n",
    "    \n",
    "    def evaluate(self, parameters: NDArrays, config: Dict[str, Scalar]):\n",
    "        \"\"\"Evaluate the model sent by the server on this client's\n",
    "        local validation set. Then return performance metrics.\"\"\"\n",
    "\n",
    "        self.set_parameters(parameters)\n",
    "        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n",
    "        return float(loss), len(self.valloader), {\"accuracy\": accuracy}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e571929b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.056388Z",
     "iopub.status.busy": "2024-05-21T05:38:42.056083Z",
     "iopub.status.idle": "2024-05-21T05:38:42.063037Z",
     "shell.execute_reply": "2024-05-21T05:38:42.062075Z"
    },
    "papermill": {
     "duration": 0.024158,
     "end_time": "2024-05-21T05:38:42.065190",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.041032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gen_results(directory):\n",
    "    gen_results = []\n",
    "    for filename in os.listdir(directory):\n",
    "        filepath = os.path.join(directory, filename)\n",
    "        gen_results.append((torch.load(filepath)[\"state_dict\"] , torch.load(filepath)[\"num_examples\"]))\n",
    "    !rm -rf directory/*\n",
    "    return gen_results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "74bdc591",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.094149Z",
     "iopub.status.busy": "2024-05-21T05:38:42.093855Z",
     "iopub.status.idle": "2024-05-21T05:38:42.103734Z",
     "shell.execute_reply": "2024-05-21T05:38:42.102780Z"
    },
    "papermill": {
     "duration": 0.026239,
     "end_time": "2024-05-21T05:38:42.105738",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.079499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "def get_evaluate_fn(centralized_testset: Dataset):\n",
    "    \"\"\"This is a function that returns a function. The returned\n",
    "    function (i.e. `evaluate_fn`) will be executed by the strategy\n",
    "    at the end of each round to evaluate the stat of the global\n",
    "    model.\"\"\"\n",
    "\n",
    "    def evaluate_fn(server_round: int, parameters, config):\n",
    "        \"\"\"This function is executed by the strategy it will instantiate\n",
    "        a model and replace its parameters with those from the global model.\n",
    "        The, the model will be evaluate on the test set (recall this is the\n",
    "        whole MNIST test set).\"\"\"\n",
    "        model = Model()\n",
    "        # Determine device\n",
    "        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "        model.to(device)  # send model to device\n",
    "        # set parameters to the model\n",
    "        params_dict = zip(model.state_dict().keys(), parameters)\n",
    "        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n",
    "        model.load_state_dict(state_dict, strict=True)\n",
    "        # Apply transform to dataset\n",
    "        testset = centralized_testset.with_transform(apply_transforms)\n",
    "        testloader = DataLoader(testset, batch_size=50)\n",
    "        # call test\n",
    "        print('GLOBAL TEST')\n",
    "        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(model, testloader, device)\n",
    "\n",
    "        print(f'Poison Test   - Accuracy: {poisoned_accuracy:.6f}, Loss: {loss_poisoned:.6f}')\n",
    "        print(f'Main Test     - Accuracy: {non_poisoned_accuracy:.6f}, Loss: {loss_non_poisoned:.6f}')\n",
    "        print(f'Standard Test - Accuracy: {accuracy:.6f}, Loss: {loss:.6f}')\n",
    "        main_loss_values.append(loss_non_poisoned)\n",
    "        main_acc_values.append(non_poisoned_accuracy)\n",
    "        poison_loss_values.append(loss_poisoned)\n",
    "        poison_acc_values.append(poisoned_accuracy)\n",
    "        return loss, {\"accuracy\": accuracy}\n",
    "\n",
    "    return evaluate_fn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4aade777",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.134135Z",
     "iopub.status.busy": "2024-05-21T05:38:42.133835Z",
     "iopub.status.idle": "2024-05-21T05:38:42.140843Z",
     "shell.execute_reply": "2024-05-21T05:38:42.139893Z"
    },
    "papermill": {
     "duration": 0.02338,
     "end_time": "2024-05-21T05:38:42.142833",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.119453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fit_config(server_round: int) -> Dict[str, Scalar]:\n",
    "    \"\"\"Return a configuration with static batch size and (local) epochs.\"\"\"\n",
    "    config = {\n",
    "        \"epochs\": 10,  # Number of local epochs done by clients\n",
    "        \"lr\": 0.00001,  # Learning rate to use by clients during fit()\n",
    "        \"attacker_epochs\": 20,\n",
    "        \"attacker_lr\": 0.000005,\n",
    "        \"server_round\": server_round,  # The current round of federated learning\n",
    "    }\n",
    "    return config\n",
    "\n",
    "def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:\n",
    "    \"\"\"Aggregation function for (federated) evaluation metrics, i.e. those returned by\n",
    "    the client's evaluate() method.\"\"\"\n",
    "    # Multiply accuracy of each client by number of examples used\n",
    "    accuracies = [num_examples * m[\"accuracy\"] for num_examples, m in metrics]\n",
    "    examples = [num_examples for num_examples, _ in metrics]\n",
    "\n",
    "    # Aggregate and return custom metric (weighted average)\n",
    "    return {\"accuracy\": sum(accuracies) / sum(examples)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c0759c52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.171392Z",
     "iopub.status.busy": "2024-05-21T05:38:42.171046Z",
     "iopub.status.idle": "2024-05-21T05:38:42.182138Z",
     "shell.execute_reply": "2024-05-21T05:38:42.181182Z"
    },
    "papermill": {
     "duration": 0.027455,
     "end_time": "2024-05-21T05:38:42.184109",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.156654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class SaveModelStrategy(fl.server.strategy.FedAvg):\n",
    "    def aggregate_fit(\n",
    "        self,\n",
    "        server_round: int,\n",
    "        results: List[Tuple[fl.server.client_proxy.ClientProxy, fl.common.FitRes]],\n",
    "        failures: List[Union[Tuple[ClientProxy, FitRes], BaseException]],\n",
    "    ) -> Tuple[Optional[Parameters], Dict[str, Scalar]]:\n",
    "        \"\"\"Aggregate model weights using weighted average and store checkpoint\"\"\"\n",
    "        model = Model()\n",
    "        # Call aggregate_fit from base class (FedAvg) to aggregate parameters and metrics\n",
    "        aggregated_parameters, aggregated_metrics = super().aggregate_fit(server_round, results, failures)\n",
    "        if aggregated_parameters is not None:\n",
    "            print(f\"Saving round {server_round} Model aggregated_parameters...\")\n",
    "            # Convert `Parameters` to `List[np.ndarray]`\n",
    "            aggregated_ndarrays: List[np.ndarray] = fl.common.parameters_to_ndarrays(aggregated_parameters)\n",
    "            # Convert `List[np.ndarray]` to PyTorch`state_dict`\n",
    "            params_dict = zip(model.state_dict().keys(), aggregated_ndarrays)\n",
    "            state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n",
    "            model.load_state_dict(state_dict, strict=True)\n",
    "            # Save the model\n",
    "            os.makedirs(\"/kaggle/working/model-state-dict\", exist_ok=True)\n",
    "            torch.save(model.state_dict(), f\"/kaggle/working/model-state-dict/model_round_{server_round}.pth\")\n",
    "            \n",
    "        generator = Generator()\n",
    "        gen_aggregated_parameters = gen_aggregate_fit(gen_results(\"/kaggle/working/generator-state-dict-temp\"))\n",
    "        if gen_aggregated_parameters is not None:\n",
    "            print(f\"Saving round {server_round} Generator aggregated_parameters...\")\n",
    "            generator.load_state_dict(gen_aggregated_parameters, strict=True)\n",
    "            # Save the model\n",
    "            os.makedirs(\"/kaggle/working/generator-state-dict\", exist_ok=True)\n",
    "            torch.save(generator.state_dict(), f\"/kaggle/working/generator-state-dict/generator_round_{server_round}.pth\")\n",
    "            \n",
    "        return aggregated_parameters, aggregated_metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5fba3029",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.210195Z",
     "iopub.status.busy": "2024-05-21T05:38:42.209886Z",
     "iopub.status.idle": "2024-05-21T05:38:42.215488Z",
     "shell.execute_reply": "2024-05-21T05:38:42.214674Z"
    },
    "papermill": {
     "duration": 0.021038,
     "end_time": "2024-05-21T05:38:42.217420",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.196382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def parameters_to_ndarrays(params):\n",
    "    ndarrays = {}\n",
    "    for key, value in params.items():\n",
    "        ndarrays[key] = value.cpu().numpy()  # Ensure conversion to numpy arrays\n",
    "    return ndarrays\n",
    "\n",
    "def ndarrays_to_parameters(ndarrays):\n",
    "    params = {}\n",
    "    for key, value in ndarrays.items():\n",
    "        params[key] = torch.tensor(value).clone().detach()  # Convert back to tensors\n",
    "    return params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "486e4472",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.244060Z",
     "iopub.status.busy": "2024-05-21T05:38:42.243492Z",
     "iopub.status.idle": "2024-05-21T05:38:42.251456Z",
     "shell.execute_reply": "2024-05-21T05:38:42.250561Z"
    },
    "papermill": {
     "duration": 0.023484,
     "end_time": "2024-05-21T05:38:42.253455",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.229971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gen_aggregate(results: List[Tuple[NDArrays, int]]) -> NDArrays:\n",
    "    \"\"\"Compute weighted average.\"\"\"\n",
    "    # Calculate the total number of examples used during training\n",
    "    num_examples_total = sum(num_examples for (_, num_examples) in results)\n",
    "    # Create a dictionary to store the weighted sums\n",
    "    weighted_sums = {}\n",
    "    for weights, num_examples in results:\n",
    "        for layer_name, layer_weights in weights.items():\n",
    "            if layer_name not in weighted_sums:\n",
    "                weighted_sums[layer_name] = layer_weights * num_examples\n",
    "            else:\n",
    "                weighted_sums[layer_name] += layer_weights * num_examples\n",
    "    # Compute the average weights of each layer\n",
    "    weights_prime = {layer_name: layer_weights / num_examples_total for layer_name, layer_weights in weighted_sums.items()}\n",
    "    \n",
    "    return weights_prime\n",
    "\n",
    "def gen_aggregate_fit(results: List[Tuple]):\n",
    "    \"\"\"Aggregate fit results using weighted average.\"\"\"\n",
    "    # Convert results\n",
    "    weights_results = [\n",
    "        (parameters_to_ndarrays(parameters), num_examples)\n",
    "        for parameters, num_examples in results\n",
    "    ]\n",
    "    aggregated_ndarrays = gen_aggregate(weights_results)\n",
    "    parameters_aggregated = ndarrays_to_parameters(aggregated_ndarrays)\n",
    "\n",
    "    return parameters_aggregated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3cb092df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.281375Z",
     "iopub.status.busy": "2024-05-21T05:38:42.280894Z",
     "iopub.status.idle": "2024-05-21T05:38:42.288255Z",
     "shell.execute_reply": "2024-05-21T05:38:42.287346Z"
    },
    "papermill": {
     "duration": 0.023443,
     "end_time": "2024-05-21T05:38:42.290172",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.266729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_client_fn(dataset: FederatedDataset):\n",
    "    \"\"\"Return a function to construct a client.\n",
    "    The VirtualClientEngine will execute this function whenever a client is sampled by\n",
    "    the strategy to participate.\n",
    "    \"\"\"\n",
    "    def client_fn(cid: str) -> fl.client.Client:\n",
    "        \"\"\"Construct a FlowerClient with its own dataset partition.\"\"\"\n",
    "        # Let's get the partition corresponding to the i-th client\n",
    "        client_dataset = dataset.load_partition(int(cid), \"train\")\n",
    "        # Now let's split it into train (90%) and validation (10%)\n",
    "        client_dataset_splits = client_dataset.train_test_split(test_size=0.1)\n",
    "        trainset = client_dataset_splits[\"train\"]\n",
    "        valset = client_dataset_splits[\"test\"]\n",
    "        # Now we apply the transform to each batch.\n",
    "        trainloader = DataLoader(trainset.with_transform(apply_transforms), batch_size=256, shuffle=True)\n",
    "        valloader = DataLoader(valset.with_transform(apply_transforms), batch_size=256)\n",
    "        testset = centralized_testset.with_transform(apply_transforms)\n",
    "        testloader = DataLoader(testset, batch_size=50)\n",
    "        # Create and return client\n",
    "        return FlowerClient(int(cid), trainloader, valloader, testloader).to_client()\n",
    "    return client_fn\n",
    "\n",
    "client_fn_callback = get_client_fn(mnist_fds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c01d93d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.318979Z",
     "iopub.status.busy": "2024-05-21T05:38:42.318472Z",
     "iopub.status.idle": "2024-05-21T05:38:42.326218Z",
     "shell.execute_reply": "2024-05-21T05:38:42.325401Z"
    },
    "papermill": {
     "duration": 0.023566,
     "end_time": "2024-05-21T05:38:42.328253",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.304687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def save_generator_images(generator):\n",
    "    device='cuda'\n",
    "    num_images=16\n",
    "    folder_path = \"/kaggle/working/output_image\"\n",
    "    os.makedirs(folder_path, exist_ok=True)\n",
    "    noise = torch.randn(num_images, 100, 1, 1).to(device)\n",
    "    generated_images = generator(noise)\n",
    "    generated_images = generated_images.squeeze().cpu().detach().numpy()\n",
    "    # Find the existing files to determine the count\n",
    "    existing_files = glob.glob(os.path.join(folder_path, f\"random_image_*.png\"))\n",
    "    count = len(existing_files) + 1\n",
    "    plt.figure(figsize=(8, 8))\n",
    "    for i, img in enumerate(generated_images):\n",
    "        plt.subplot(4, 4, i+1)\n",
    "        plt.imshow(img, cmap='gray', vmin=0, vmax=1)\n",
    "        plt.axis('off')\n",
    "    # Save the combined image with a dynamic filename\n",
    "    filename = f\"random_image_{count}.png\"\n",
    "    plt.savefig(os.path.join(folder_path, filename))\n",
    "    plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b9b776fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.354980Z",
     "iopub.status.busy": "2024-05-21T05:38:42.354721Z",
     "iopub.status.idle": "2024-05-21T05:38:42.358915Z",
     "shell.execute_reply": "2024-05-21T05:38:42.358019Z"
    },
    "papermill": {
     "duration": 0.019821,
     "end_time": "2024-05-21T05:38:42.360935",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.341114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "main_loss_values = []\n",
    "main_acc_values = []\n",
    "poison_loss_values = []\n",
    "poison_acc_values = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "02b337f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.387988Z",
     "iopub.status.busy": "2024-05-21T05:38:42.387723Z",
     "iopub.status.idle": "2024-05-21T05:38:42.392958Z",
     "shell.execute_reply": "2024-05-21T05:38:42.392079Z"
    },
    "papermill": {
     "duration": 0.021055,
     "end_time": "2024-05-21T05:38:42.395066",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.374011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_poison_dataloader(poison_images, poison_labels):\n",
    "    # Gộp tất cả poison_images và poison_labels vào 2 mảng\n",
    "    all_images = torch.cat(poison_images, dim=0)\n",
    "    all_labels = torch.cat(poison_labels, dim=0)\n",
    "    # Tạo TensorDataset và dataloader từ all_images và all_labels\n",
    "    poison_dataset = TensorDataset(all_images, all_labels)\n",
    "    poison_dataloader = DataLoader(poison_dataset, batch_size=16, shuffle=True)\n",
    "    return poison_dataloader   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "dc785213",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.425861Z",
     "iopub.status.busy": "2024-05-21T05:38:42.425214Z",
     "iopub.status.idle": "2024-05-21T05:38:42.434330Z",
     "shell.execute_reply": "2024-05-21T05:38:42.433283Z"
    },
    "papermill": {
     "duration": 0.027867,
     "end_time": "2024-05-21T05:38:42.436718",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.408851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def PoisonGAN(model, atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n",
    "    criterion = torch.nn.CrossEntropyLoss()\n",
    "    optimizer_m = torch.optim.Adam(model.parameters(), lr=attacker_lr)\n",
    "    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n",
    "    for _ in range(attacker_epochs):\n",
    "        poison_dataloader = Data_Gen(atk_generator, discriminator, device)\n",
    "        if poison_dataloader is not None:\n",
    "            for bp in poison_dataloader:\n",
    "                images, labels = bp[0].to(device), bp[1].to(device)\n",
    "                optimizer_m.zero_grad()\n",
    "                outputs = model(images)\n",
    "                loss = criterion(outputs, labels)\n",
    "                loss.backward()\n",
    "                for param in model.parameters():\n",
    "                    param.grad *= 40\n",
    "                optimizer_m.step()\n",
    "            scheduler_m.step()\n",
    "#     for param, grad in zip(model.parameters(), [param.grad for param in model.parameters()]):\n",
    "#         param.data -= S * learning_rate * grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "34e7f4c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.467571Z",
     "iopub.status.busy": "2024-05-21T05:38:42.467205Z",
     "iopub.status.idle": "2024-05-21T05:38:42.476283Z",
     "shell.execute_reply": "2024-05-21T05:38:42.475337Z"
    },
    "papermill": {
     "duration": 0.027004,
     "end_time": "2024-05-21T05:38:42.478421",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.451417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tqdm import tqdm\n",
    "def atk_generator_train(atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n",
    "    atk_g_optimizer = torch.optim.Adam(atk_generator.parameters(), lr=attacker_lr)\n",
    "    atk_g_scheduler = lr_scheduler.StepLR(atk_g_optimizer, step_size=1, gamma=0.1)\n",
    "    num_batchs = 8\n",
    "    for epoch in range(attacker_epochs):\n",
    "        total_g_loss = 0.0\n",
    "        atk_generator.train()\n",
    "        discriminator.eval()\n",
    "        for batch in range(num_batchs):\n",
    "            atk_g_optimizer.zero_grad()\n",
    "            noise = torch.randn(256, 100, 1, 1).to(device)\n",
    "            x_fake = atk_generator(noise)\n",
    "            d_outputs = discriminator(x_fake)\n",
    "            atk_g_loss = -torch.mean(torch.log(d_outputs))\n",
    "            atk_g_loss.backward()\n",
    "            total_g_loss += atk_g_loss.item()\n",
    "            atk_g_optimizer.step()\n",
    "        print(f'Attacker Generator Loss: {total_g_loss/num_batchs}')\n",
    "    atk_g_scheduler.step()\n",
    "    \n",
    "    SavePoisonGeneratorStateDict(atk_generator)\n",
    "    save_generator_images(atk_generator)\n",
    "    return atk_generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3dad5699",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.507017Z",
     "iopub.status.busy": "2024-05-21T05:38:42.506359Z",
     "iopub.status.idle": "2024-05-21T05:38:42.513959Z",
     "shell.execute_reply": "2024-05-21T05:38:42.513151Z"
    },
    "papermill": {
     "duration": 0.023487,
     "end_time": "2024-05-21T05:38:42.516018",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.492531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def Data_Gen(atk_generator, discriminator, device):\n",
    "    num_batchs = 8\n",
    "    poison_images, poison_labels = [], []\n",
    "    for batch in range(num_batchs):\n",
    "    # Data gen / create poison data\n",
    "        with torch.no_grad():\n",
    "            noise = torch.randn(256, 100, 1, 1).to(device)\n",
    "            outputs = atk_generator(noise)\n",
    "            predictions = discriminator(outputs)\n",
    "            predicted_labels = torch.max(predictions, dim=1).indices\n",
    "            selected_images = outputs[predicted_labels == 2]\n",
    "            selected_labels = predicted_labels[predicted_labels == 2]\n",
    "            selected_labels[selected_labels == 2] = 7\n",
    "            if len(selected_images)>0:\n",
    "                poison_images.append(selected_images)\n",
    "                poison_labels.append(selected_labels)\n",
    "    if len(poison_images) > 0:\n",
    "        poison_dataloader = create_poison_dataloader(poison_images, poison_labels)\n",
    "        return poison_dataloader\n",
    "    else:\n",
    "        return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "59542649",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.543687Z",
     "iopub.status.busy": "2024-05-21T05:38:42.543352Z",
     "iopub.status.idle": "2024-05-21T05:38:42.547978Z",
     "shell.execute_reply": "2024-05-21T05:38:42.547066Z"
    },
    "papermill": {
     "duration": 0.020899,
     "end_time": "2024-05-21T05:38:42.550056",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.529157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#=======================================ATTACKER=======================================\n",
    "strategy = SaveModelStrategy(\n",
    "    fraction_fit=0.31,  # Sample 31% of available clients for training\n",
    "    fraction_evaluate=0.31,  # Sample 31% of available clients for evaluation\n",
    "    on_fit_config_fn=fit_config,\n",
    "    evaluate_fn=get_evaluate_fn(centralized_testset),  # global evaluation function\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1f955316",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T05:38:42.579043Z",
     "iopub.status.busy": "2024-05-21T05:38:42.578548Z",
     "iopub.status.idle": "2024-05-21T06:06:07.197163Z",
     "shell.execute_reply": "2024-05-21T06:06:07.195169Z"
    },
    "papermill": {
     "duration": 1644.642652,
     "end_time": "2024-05-21T06:06:07.206387",
     "exception": false,
     "start_time": "2024-05-21T05:38:42.563735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      Starting Flower simulation, config: num_rounds=15, no round_timeout\n",
      "2024-05-21 05:38:45,533\tINFO worker.py:1621 -- Started a local Ray instance.\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Ray initialized with resources: {'node:172.19.2.2': 1.0, 'node:__internal_head__': 1.0, 'CPU': 4.0, 'object_store_memory': 9012955545.0, 'GPU': 2.0, 'memory': 18025911092.0}\n",
      "\u001b[92mINFO \u001b[0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 1}\n",
      "\u001b[92mINFO \u001b[0m:      Flower VCE: Creating VirtualClientEngineActorPool with 2 actors\n",
      "\u001b[92mINFO \u001b[0m:      [INIT]\n",
      "\u001b[92mINFO \u001b[0m:      Requesting initial parameters from one random client\n",
      "\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:38:50.164760: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:38:50.164812: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:38:50.166298: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "\u001b[92mINFO \u001b[0m:      Received initial parameters from one random client\n",
      "\u001b[92mINFO \u001b[0m:      Evaluating initial global parameters\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      initial parameters (loss, other metrics): 479.6187906265259, {'accuracy': 0.0}\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 1]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.618791\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.608735\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.618791\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n",
      "\u001b[93mWARNING \u001b[0m:   No fit_metrics_aggregation_fn provided\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 1 Model aggregated_parameters...\n",
      "Saving round 1 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (1, 479.6301283836365, {'accuracy': 0.0}, 103.33436196299999)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.630128\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.620537\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.630128\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[93mWARNING \u001b[0m:   No evaluate_metrics_aggregation_fn provided\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 2]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980003893375397\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397998660802841\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397997111082077\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397995740175247\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397994428873062\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397993177175522\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979919850826263\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397990882396698\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979897797107697\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397988736629486\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979877531528473\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979868292808533\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979857563972473\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.39798504114151\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979841768741608\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397983491420746\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397982805967331\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397982180118561\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.397981643676758\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3979810178279877\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 2 Model aggregated_parameters...\n",
      "Saving round 2 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (2, 479.641788482666, {'accuracy': 0.0}, 219.50136860300017)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.641788\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.632603\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.641788\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 3]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 3 Model aggregated_parameters...\n",
      "Saving round 3 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (3, 479.6543598175049, {'accuracy': 0.0}, 322.67500029000007)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.654360\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.645590\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.654360\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 4]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 4 Model aggregated_parameters...\n",
      "Saving round 4 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (4, 479.66837072372437, {'accuracy': 0.0}, 426.00628673400024)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.668371\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.660101\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.668371\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 5]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980581760406494\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398055911064148\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398053854703903\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398052155971527\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980507254600525\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980495035648346\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980483412742615\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398047298192978\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980464935302734\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980455696582794\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980449438095093\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398044228553772\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398043692111969\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980431854724884\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398042678833008\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980422616004944\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980418145656586\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398041307926178\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398041069507599\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3980407416820526\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 5 Model aggregated_parameters...\n",
      "Saving round 5 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (5, 479.68467593193054, {'accuracy': 0.0}, 543.1007250789999)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.684676\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.677074\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.684676\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 6]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398080199956894\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980791866779327\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980783820152283\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980776369571686\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980770111083984\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980763852596283\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980757296085358\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980752527713776\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980745673179626\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980740904808044\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398073524236679\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980730175971985\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398072510957718\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398071974515915\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980714678764343\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980710208415985\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980704843997955\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398070067167282\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980696499347687\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980692625045776\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 6 Model aggregated_parameters...\n",
      "Saving round 6 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (6, 479.70408725738525, {'accuracy': 0.0}, 660.5525112690002)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.704087\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.697510\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.704087\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 7]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 7 Model aggregated_parameters...\n",
      "Saving round 7 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (7, 479.7275767326355, {'accuracy': 0.0}, 764.3188649399999)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.727577\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.722200\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.727577\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 8]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.39819797873497\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398194968700409\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981925547122955\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981907665729523\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981890082359314\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981876373291016\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981862366199493\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981848061084747\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398183435201645\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981820344924927\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.39818075299263\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981793820858\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398177832365036\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398176372051239\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398175060749054\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981736600399017\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.3981725573539734\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398171156644821\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.39817014336586\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.398169159889221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 8 Model aggregated_parameters...\n",
      "Saving round 8 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (8, 479.75598645210266, {'accuracy': 0.0}, 880.7257258690001)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.755986\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.752183\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.755986\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 9]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 9 Model aggregated_parameters...\n",
      "Saving round 9 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (9, 479.79064202308655, {'accuracy': 0.0}, 984.4601917290001)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.790642\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.788908\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.790642\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 10]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 10 Model aggregated_parameters...\n",
      "Saving round 10 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (10, 479.83331394195557, {'accuracy': 0.0}, 1087.85260036)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.833314\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.834025\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.833314\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 11]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3986117243766785\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398598223924637\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985882103443146\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398580402135849\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985739946365356\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985685110092163\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985634446144104\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985585272312164\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985540866851807\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985495269298553\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398545503616333\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985414505004883\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985378742218018\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398534268140793\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985308706760406\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985277712345123\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398524522781372\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985217213630676\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398518592119217\n",
      "\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3985156416893005\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 11 Model aggregated_parameters...\n",
      "Saving round 11 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (11, 479.88865423202515, {'accuracy': 0.0}, 1205.317994438)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.888654\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.891835\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.888654\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 12]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 12 Model aggregated_parameters...\n",
      "Saving round 12 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (12, 479.9613211154938, {'accuracy': 0.0}, 1308.9816729930003)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 479.961321\n",
      "Main Test     - Accuracy: 0.000000, Loss: 479.967435\n",
      "Standard Test - Accuracy: 0.000000, Loss: 479.961321\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 13]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 13 Model aggregated_parameters...\n",
      "Saving round 13 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (13, 480.0556790828705, {'accuracy': 0.0}, 1412.5936904170003)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 480.055679\n",
      "Main Test     - Accuracy: 0.000000, Loss: 480.065711\n",
      "Standard Test - Accuracy: 0.000000, Loss: 480.055679\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 14]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 14 Model aggregated_parameters...\n",
      "Saving round 14 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (14, 480.1790611743927, {'accuracy': 0.0}, 1515.990650672)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 480.179061\n",
      "Main Test     - Accuracy: 0.000000, Loss: 480.193771\n",
      "Standard Test - Accuracy: 0.000000, Loss: 480.179061\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [ROUND 15]\n",
      "\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n",
      "\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving round 15 Model aggregated_parameters...\n",
      "Saving round 15 Generator aggregated_parameters...\n",
      "GLOBAL TEST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      fit progress: (15, 480.342413187027, {'accuracy': 0.0}, 1619.0923789560002)\n",
      "\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poison Test   - Accuracy: 0.000000, Loss: 480.342413\n",
      "Main Test     - Accuracy: 0.000000, Loss: 480.362886\n",
      "Standard Test - Accuracy: 0.000000, Loss: 480.342413\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n",
      "\u001b[92mINFO \u001b[0m:      \n",
      "\u001b[92mINFO \u001b[0m:      [SUMMARY]\n",
      "\u001b[92mINFO \u001b[0m:      Run finished 15 rounds in 1620.75s\n",
      "\u001b[92mINFO \u001b[0m:      History (loss, distributed):\n",
      "\u001b[92mINFO \u001b[0m:      \t('\\tround 1: 2.398176145553589\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 2.3981777906417845\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 2.3982669830322267\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 2.3983509063720705\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 2.398364472389221\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 2.3985060453414917\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 2.3986270427703857\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 2.39872567653656\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 2.398930025100708\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 2.399179720878601\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 2.3993808031082153\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 2.399806833267212\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 2.4002893209457397\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 2.400896096229553\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 2.401723861694336\\n')History (loss, centralized):\n",
      "\u001b[92mINFO \u001b[0m:      \t('\\tround 0: 479.6187906265259\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 1: 479.6301283836365\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 479.641788482666\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 479.6543598175049\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 479.66837072372437\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 479.68467593193054\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 479.70408725738525\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 479.7275767326355\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 479.75598645210266\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 479.79064202308655\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 479.83331394195557\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 479.88865423202515\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 479.9613211154938\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 480.0556790828705\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 480.1790611743927\\n'\n",
      "\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 480.342413187027\\n')History (metrics, centralized):\n",
      "\u001b[92mINFO \u001b[0m:      \t{'accuracy': [(0, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (1, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (2, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (3, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (4, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (5, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (6, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (7, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (8, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (9, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (10, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (11, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (12, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (13, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (14, 0.0),\n",
      "\u001b[92mINFO \u001b[0m:      \t              (15, 0.0)]}\n",
      "\u001b[92mINFO \u001b[0m:      \n"
     ]
    }
   ],
   "source": [
    "# With a dictionary, you tell Flower's VirtualClientEngine that each\n",
    "# client needs exclusive access to these many resources in order to run\n",
    "client_resources = {\"num_cpus\": 2, \"num_gpus\": 1}\n",
    "\n",
    "# Let's disable tqdm progress bar in the main thread (used by the server)\n",
    "disable_progress_bar()\n",
    "history = fl.simulation.start_simulation(\n",
    "    client_fn=client_fn_callback,  # a callback to construct a client\n",
    "    num_clients=NUM_CLIENTS,  # total number of clients in the experiment\n",
    "    config=fl.server.ServerConfig(num_rounds=15),  # let's run for 10 rounds\n",
    "    strategy=strategy,  # the strategy that will orchestrate the whole FL pipeline\n",
    "    client_resources=client_resources,\n",
    "    actor_kwargs={\n",
    "        \"on_actor_init_fn\": disable_progress_bar  # disable tqdm on each actor/process spawning virtual clients\n",
    "    },\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7b80dad7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:06:07.290097Z",
     "iopub.status.busy": "2024-05-21T06:06:07.289767Z",
     "iopub.status.idle": "2024-05-21T06:06:07.682651Z",
     "shell.execute_reply": "2024-05-21T06:06:07.681675Z"
    },
    "papermill": {
     "duration": 0.437378,
     "end_time": "2024-05-21T06:06:07.684830",
     "exception": false,
     "start_time": "2024-05-21T06:06:07.247452",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "history.metrics_centralized = {'accuracy': [(0, 0.0), (1, 0.0), (2, 0.0), (3, 0.0), (4, 0.0), (5, 0.0), (6, 0.0), (7, 0.0), (8, 0.0), (9, 0.0), (10, 0.0), (11, 0.0), (12, 0.0), (13, 0.0), (14, 0.0), (15, 0.0)]}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x79c3da3d4df0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(f\"{history.metrics_centralized = }\")\n",
    "global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n",
    "round = [data[0] for data in global_accuracy_centralised]\n",
    "acc = [data[1] for data in global_accuracy_centralised]\n",
    "plt.plot(round, acc, label=\"global accuracy centralized\")\n",
    "plt.grid()\n",
    "plt.ylabel(\"Accuracy (%)\")\n",
    "plt.xlabel(\"Round\")\n",
    "plt.title(\"MNIST - IID - 33 clients with 10 clients per round\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b1ce3f6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:06:07.766887Z",
     "iopub.status.busy": "2024-05-21T06:06:07.766313Z",
     "iopub.status.idle": "2024-05-21T06:06:08.101450Z",
     "shell.execute_reply": "2024-05-21T06:06:08.100163Z"
    },
    "papermill": {
     "duration": 0.379461,
     "end_time": "2024-05-21T06:06:08.103914",
     "exception": false,
     "start_time": "2024-05-21T06:06:07.724453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x79c3da388760>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n",
    "round_centralised = [data[0] for data in global_accuracy_centralised]\n",
    "plt.plot(round_centralised, [data[1] for data in global_accuracy_centralised], label=\"Standard Task\")\n",
    "plt.plot(range(len(main_acc_values)), main_acc_values, label=\"Main Task\")\n",
    "plt.plot(range(len(poison_acc_values)), poison_acc_values, label=\"Poison Task\")\n",
    "\n",
    "# Thiết lập định dạng của biểu đồ\n",
    "plt.grid()\n",
    "plt.ylabel(\"Accuracy (%)\")\n",
    "plt.xlabel(\"Round\")\n",
    "plt.title(\"Accuracy Comparison\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "826827fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-21T06:06:08.196755Z",
     "iopub.status.busy": "2024-05-21T06:06:08.196020Z",
     "iopub.status.idle": "2024-05-21T06:06:08.200539Z",
     "shell.execute_reply": "2024-05-21T06:06:08.199597Z"
    },
    "papermill": {
     "duration": 0.053373,
     "end_time": "2024-05-21T06:06:08.202633",
     "exception": false,
     "start_time": "2024-05-21T06:06:08.149260",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# !rm -rf /kaggle/working/*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1737.327495,
   "end_time": "2024-05-21T06:06:13.473334",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-21T05:37:16.145839",
   "version": "2.5.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00bd1f0f870241d5bf8c1f5ddfbff00e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "05a25d29357f4c74844e434a58246f33": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "09e0af7548f84304857f16e02ca5aad0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "0eec7ca14b14446792a4a1376bd31c6c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ea2acf57dc6e4398866c09143ac922be",
        "IPY_MODEL_f7e07d45b19c45e6a9d3fce72d2eed12",
        "IPY_MODEL_0fdacb306d50464891827f5f3eec69bc"
       ],
       "layout": "IPY_MODEL_c5281b36a2294bde9468eb312397d6ba"
      }
     },
     "0fdacb306d50464891827f5f3eec69bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_d9ddef4bcd5343edac0d4de11f8ac7ef",
       "placeholder": "​",
       "style": "IPY_MODEL_47aad77d763b496cab0bebf07db5f168",
       "value": " 60000/60000 [00:00&lt;00:00, 152941.67 examples/s]"
      }
     },
     "14c2eeaac2984e8e97dca7e49e6bf864": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28d251e0611c403f97840211fc368a63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2eba8dc3cc6c4ce5b313df47e111e62b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "47aad77d763b496cab0bebf07db5f168": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "4853165ba0684cc0a13fa22ecaa35b63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_14c2eeaac2984e8e97dca7e49e6bf864",
       "placeholder": "​",
       "style": "IPY_MODEL_d37d704692884a7cae0ed1d8655d9985",
       "value": " 2/2 [00:00&lt;00:00, 180.52it/s]"
      }
     },
     "5b1b72122ebd42119e1f716e9c0f8a57": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5b33621f344a4de6909e49064d2ea07e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5fc94ffe5676415aa29f9fee3e5e9880": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_2eba8dc3cc6c4ce5b313df47e111e62b",
       "placeholder": "​",
       "style": "IPY_MODEL_b7bd31a4144248889e153b13844989d6",
       "value": "Generating test split: 100%"
      }
     },
     "60f79ec3926f4b2bbca7c581a2c3bd0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_ed3ec627c1d347a1acb65c98a71f584d",
       "max": 2.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_28d251e0611c403f97840211fc368a63",
       "value": 2.0
      }
     },
     "6a0e7bed8e0640f9b898ad50e06e67e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "6bc8a6babdb34da9b4d4869af6947ee2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_b54bd1c9f90a470788c6f5c3cf3c4ba6",
       "placeholder": "​",
       "style": "IPY_MODEL_7927133a34cd4d86beb9bdb90b11dd9a",
       "value": " 10000/10000 [00:00&lt;00:00, 135659.41 examples/s]"
      }
     },
     "6d6ff6a5eb9a40a1a217b1757d6561e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e0033975689a4ac5b710eb52daf6dcc5",
        "IPY_MODEL_60f79ec3926f4b2bbca7c581a2c3bd0c",
        "IPY_MODEL_4853165ba0684cc0a13fa22ecaa35b63"
       ],
       "layout": "IPY_MODEL_a2543957c8a641528329948ebb87ec2e"
      }
     },
     "7927133a34cd4d86beb9bdb90b11dd9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "92356c7166a64bc991b782b2a7419106": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a2543957c8a641528329948ebb87ec2e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a992634e4ca441e5a697f14e69456f4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b54bd1c9f90a470788c6f5c3cf3c4ba6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b7bd31a4144248889e153b13844989d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "c5281b36a2294bde9468eb312397d6ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c860d9cd47ee4c77907b5ebbcdfb938a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5b33621f344a4de6909e49064d2ea07e",
       "max": 10000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_00bd1f0f870241d5bf8c1f5ddfbff00e",
       "value": 10000.0
      }
     },
     "d34e4e5e70044931a6073c3beccebbd0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d37d704692884a7cae0ed1d8655d9985": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "d9ddef4bcd5343edac0d4de11f8ac7ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0033975689a4ac5b710eb52daf6dcc5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_92356c7166a64bc991b782b2a7419106",
       "placeholder": "​",
       "style": "IPY_MODEL_09e0af7548f84304857f16e02ca5aad0",
       "value": "Computing checksums: 100%"
      }
     },
     "e48319f0872b41e495cfdc27204fa80e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5fc94ffe5676415aa29f9fee3e5e9880",
        "IPY_MODEL_c860d9cd47ee4c77907b5ebbcdfb938a",
        "IPY_MODEL_6bc8a6babdb34da9b4d4869af6947ee2"
       ],
       "layout": "IPY_MODEL_d34e4e5e70044931a6073c3beccebbd0"
      }
     },
     "ea2acf57dc6e4398866c09143ac922be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_5b1b72122ebd42119e1f716e9c0f8a57",
       "placeholder": "​",
       "style": "IPY_MODEL_6a0e7bed8e0640f9b898ad50e06e67e7",
       "value": "Generating train split: 100%"
      }
     },
     "ed3ec627c1d347a1acb65c98a71f584d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f7e07d45b19c45e6a9d3fce72d2eed12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_tooltip": null,
       "layout": "IPY_MODEL_05a25d29357f4c74844e434a58246f33",
       "max": 60000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a992634e4ca441e5a697f14e69456f4e",
       "value": 60000.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
