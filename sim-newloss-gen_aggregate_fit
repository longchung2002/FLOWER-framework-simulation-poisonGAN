{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/longchung1/sim-newloss-gen-aggregate-fit?scriptVersionId=178873757\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"e56078cf","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-05-21T05:34:05.704334Z","iopub.status.busy":"2024-05-21T05:34:05.704015Z","iopub.status.idle":"2024-05-21T05:35:01.159592Z","shell.execute_reply":"2024-05-21T05:35:01.158399Z"},"papermill":{"duration":55.469461,"end_time":"2024-05-21T05:35:01.161886","exception":false,"start_time":"2024-05-21T05:34:05.692425","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","cudf 23.8.0 requires cubinlinker, which is not installed.\r\n","cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","cudf 23.8.0 requires ptxcompiler, which is not installed.\r\n","cuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","dask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n","apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n","apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n","apache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.3 which is incompatible.\r\n","apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\r\n","cudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\r\n","cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","cudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 15.0.2 which is incompatible.\r\n","cuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n","kfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","pyopenssl 23.3.0 requires cryptography<42,>=41.0.5, but you have cryptography 42.0.7 which is incompatible.\r\n","tensorboard 2.15.1 requires protobuf<4.24,>=3.19.6, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.2.1 which is incompatible.\r\n","tensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n","ydata-profiling 4.6.4 requires pydantic>=2, but you have pydantic 1.10.15 which is incompatible.\u001b[0m\u001b[31m\r\n","\u001b[0mCollecting flwr_datasets[vision]\r\n","  Downloading flwr_datasets-0.1.0-py3-none-any.whl.metadata (5.5 kB)\r\n","Requirement already satisfied: datasets<3.0.0,>=2.14.3 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (2.18.0)\r\n","Requirement already satisfied: numpy<2.0.0,>=1.21.0 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (1.26.4)\r\n","Requirement already satisfied: pillow>=6.2.1 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (9.5.0)\r\n","Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.13.1)\r\n","Requirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (15.0.2)\r\n","Requirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.6)\r\n","Requirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.3.8)\r\n","Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.1.4)\r\n","Requirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.31.0)\r\n","Requirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.66.1)\r\n","Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.4.1)\r\n","Requirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.70.16)\r\n","Requirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.0)\r\n","Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.9.1)\r\n","Requirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.22.2)\r\n","Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (21.3)\r\n","Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.1)\r\n","Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (23.2.0)\r\n","Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.4)\r\n","Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.9.3)\r\n","Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.4.1)\r\n","Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.3.1)\r\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.0.3)\r\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.9.0)\r\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.1.1)\r\n","Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.3.2)\r\n","Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.6)\r\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.26.18)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.2)\r\n","Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.9.0.post0)\r\n","Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.3.post1)\r\n","Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.4)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.16.0)\r\n","Downloading flwr_datasets-0.1.0-py3-none-any.whl (39 kB)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0mInstalling collected packages: flwr_datasets\r\n","Successfully installed flwr_datasets-0.1.0\r\n","Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n","Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n","Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n","Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n","Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n","Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n","Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n","Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n","Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n","Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0m"]}],"source":["# depending on your shell, you might need to add `\\` before `[` and `]`.\n","!pip install -q flwr[simulation]\n","!pip install flwr_datasets[vision]\n","!pip install matplotlib"]},{"cell_type":"code","execution_count":2,"id":"bdb20aba","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.1867Z","iopub.status.busy":"2024-05-21T05:35:01.186351Z","iopub.status.idle":"2024-05-21T05:35:16.308637Z","shell.execute_reply":"2024-05-21T05:35:16.307872Z"},"papermill":{"duration":15.13692,"end_time":"2024-05-21T05:35:16.310715","exception":false,"start_time":"2024-05-21T05:35:01.173795","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-05-21 05:35:03.472354: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-05-21 05:35:03.472497: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-05-21 05:35:03.630365: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-05-21 05:35:16,296\tINFO util.py:129 -- Outdated packages:\n","  ipywidgets==7.7.1 found, needs ipywidgets>=8\n","Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"]}],"source":["import flwr as fl"]},{"cell_type":"code","execution_count":3,"id":"7187b05b","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:16.336003Z","iopub.status.busy":"2024-05-21T05:35:16.335708Z","iopub.status.idle":"2024-05-21T05:35:17.10033Z","shell.execute_reply":"2024-05-21T05:35:17.099289Z"},"papermill":{"duration":0.779709,"end_time":"2024-05-21T05:35:17.102749","exception":false,"start_time":"2024-05-21T05:35:16.32304","status":"completed"},"tags":[]},"outputs":[],"source":["from flwr_datasets import FederatedDataset\n","from flwr.server.client_proxy import ClientProxy\n","from flwr.common import NDArrays, Scalar, Parameters\n","from flwr.common import Metrics, FitRes"]},{"cell_type":"code","execution_count":4,"id":"562ddc56","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:17.130499Z","iopub.status.busy":"2024-05-21T05:35:17.129842Z","iopub.status.idle":"2024-05-21T05:35:22.838606Z","shell.execute_reply":"2024-05-21T05:35:22.837796Z"},"papermill":{"duration":5.725669,"end_time":"2024-05-21T05:35:22.840789","exception":false,"start_time":"2024-05-21T05:35:17.11512","status":"completed"},"tags":[]},"outputs":[],"source":["from datasets import Dataset\n","from datasets.utils.logging import disable_progress_bar\n","from torch.utils.data import TensorDataset\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader\n","import torch.optim as optim\n","import torch.optim.lr_scheduler as lr_scheduler\n","from torchvision.transforms import ToTensor, Normalize, Compose, Resize\n","import matplotlib.pyplot as plt\n","import random\n","import numpy as np\n","import os\n","import glob\n","from collections import OrderedDict\n","import shutil\n","from typing import Callable, Dict, List, Optional, Tuple, Union\n","from flwr.common import FitRes, NDArray, NDArrays, Parameters, ndarrays_to_parameters, parameters_to_ndarrays\n","from flwr.server.strategy import aggregate"]},{"cell_type":"code","execution_count":5,"id":"5fc5c0ce","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:22.866352Z","iopub.status.busy":"2024-05-21T05:35:22.865651Z","iopub.status.idle":"2024-05-21T05:35:26.018264Z","shell.execute_reply":"2024-05-21T05:35:26.017518Z"},"papermill":{"duration":3.167846,"end_time":"2024-05-21T05:35:26.020576","exception":false,"start_time":"2024-05-21T05:35:22.85273","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["Downloading data: 100%|██████████| 15.6M/15.6M [00:00<00:00, 48.5MB/s]\n","Downloading data: 100%|██████████| 2.60M/2.60M [00:00<00:00, 31.4MB/s]\n","/opt/conda/lib/python3.10/site-packages/ipywidgets/widgets/widget.py:503: DeprecationWarning: The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\n","  self.comm = Comm(**args)\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"1ea88ec4e8ea4411908febc5efbdc9c5","version_major":2,"version_minor":0},"text/plain":["Generating train split:   0%|          | 0/60000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"db662717aa084a27affb3ececb14cfdf","version_major":2,"version_minor":0},"text/plain":["Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["{'image': Image(decode=True, id=None),\n"," 'label': ClassLabel(names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], id=None)}"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Let's set a simulation involving a total of 100 clients\n","NUM_CLIENTS = 33\n","\n","# Download MNIST dataset and partition the \"train\" partition (so one can be assigned to each client)\n","mnist_fds = FederatedDataset(dataset=\"mnist\", partitioners={\"train\": NUM_CLIENTS})\n","# Let's keep the test set as is, and use it to evaluate the global model on the server\n","centralized_testset = mnist_fds.load_split(\"test\")\n","partition = mnist_fds.load_partition(0, \"train\")\n","partition.features"]},{"cell_type":"code","execution_count":6,"id":"8813c8ed","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:26.049147Z","iopub.status.busy":"2024-05-21T05:35:26.048334Z","iopub.status.idle":"2024-05-21T05:35:26.731263Z","shell.execute_reply":"2024-05-21T05:35:26.730278Z"},"papermill":{"duration":0.699018,"end_time":"2024-05-21T05:35:26.733373","exception":false,"start_time":"2024-05-21T05:35:26.034355","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def calculate_label_distribution(data_loaders):\n","    label_counts = {}\n","    for loader in data_loaders:\n","        images = loader[\"image\"]\n","        labels = [loader[\"label\"]]\n","        for label in labels:\n","            label = int(label)\n","            if label in label_counts:\n","                label_counts[label] += 1\n","            else:\n","                label_counts[label] = 1\n","    return label_counts\n","\n","def plot_label_distribution(label_counts):\n","    # Vẽ biểu đồ histogram\n","    plt.bar(label_counts.keys(), label_counts.values())\n","    plt.xlabel('Label')\n","    plt.ylabel('Number of Images')\n","    plt.title('Distribution of Labels in the Dataset')\n","    plt.xticks(range(10))\n","    plt.show()\n","    # Tính toán phân phối nhãn từ tất cả các dataloader\n","all_trainloaders = partition # Gộp tất cả các dataloader lại\n","all_label_counts = calculate_label_distribution(all_trainloaders)\n","\n","# Vẽ biểu đồ tương quan giữa tất cả các dataloader\n","plot_label_distribution(all_label_counts)"]},{"cell_type":"code","execution_count":7,"id":"ed247934","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:26.761611Z","iopub.status.busy":"2024-05-21T05:35:26.761271Z","iopub.status.idle":"2024-05-21T05:35:26.766975Z","shell.execute_reply":"2024-05-21T05:35:26.766155Z"},"papermill":{"duration":0.021703,"end_time":"2024-05-21T05:35:26.768828","exception":false,"start_time":"2024-05-21T05:35:26.747125","status":"completed"},"tags":[]},"outputs":[],"source":["def apply_transforms(batch):\n","    \"\"\"Get transformation for MNIST dataset\"\"\"\n","    # transformation to convert images to tensors and apply normalization\n","    transforms = Compose([\n","        ToTensor(),\n","        Normalize((0.5,), (0.5,)),\n","        Resize((64, 64), antialias=False)\n","        ])\n","    batch[\"image\"] = [transforms(img) for img in batch[\"image\"]]\n","    return batch"]},{"cell_type":"markdown","id":"2175599a","metadata":{"papermill":{"duration":0.012987,"end_time":"2024-05-21T05:35:26.794698","exception":false,"start_time":"2024-05-21T05:35:26.781711","status":"completed"},"tags":[]},"source":["# start"]},{"cell_type":"code","execution_count":8,"id":"362c2cc7","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:26.821068Z","iopub.status.busy":"2024-05-21T05:35:26.820804Z","iopub.status.idle":"2024-05-21T05:35:27.827891Z","shell.execute_reply":"2024-05-21T05:35:27.826558Z"},"papermill":{"duration":1.023103,"end_time":"2024-05-21T05:35:27.830377","exception":false,"start_time":"2024-05-21T05:35:26.807274","status":"completed"},"tags":[]},"outputs":[],"source":["!rm -rf /kaggle/working/*"]},{"cell_type":"code","execution_count":9,"id":"e03be4a6","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:27.859742Z","iopub.status.busy":"2024-05-21T05:35:27.859295Z","iopub.status.idle":"2024-05-21T05:35:27.888941Z","shell.execute_reply":"2024-05-21T05:35:27.888111Z"},"papermill":{"duration":0.046718,"end_time":"2024-05-21T05:35:27.890932","exception":false,"start_time":"2024-05-21T05:35:27.844214","status":"completed"},"tags":[]},"outputs":[],"source":["class Model(nn.Module):\n","    def __init__(self):\n","        super(Model, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)  # 10 classes for MNIST\n","        self.softmax = nn.Softmax(dim=1)\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Discriminator(nn.Module):\n","    def __init__(self):\n","        super(Discriminator, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.dropout = nn.Dropout()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm1 = nn.BatchNorm2d(64)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm2 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm3 = nn.BatchNorm2d(128)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm4 = nn.BatchNorm2d(128)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)\n","        self.softmax = nn.Softmax(dim=1)\n","        \n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.dropout(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.batchnorm4(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Generator(nn.Module):\n","    def __init__(self):\n","        super(Generator, self).__init__()\n","        self.conv1 = nn.ConvTranspose2d(100, 256, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm1 = nn.BatchNorm2d(256)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm2 = nn.BatchNorm2d(128)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.batchnorm3 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.ConvTranspose2d(64, 1, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.tanh = nn.Tanh()\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.tanh(x)\n","        return x"]},{"cell_type":"code","execution_count":10,"id":"24a2a740","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:27.918544Z","iopub.status.busy":"2024-05-21T05:35:27.918192Z","iopub.status.idle":"2024-05-21T05:35:28.001868Z","shell.execute_reply":"2024-05-21T05:35:28.000563Z"},"papermill":{"duration":0.101183,"end_time":"2024-05-21T05:35:28.005105","exception":false,"start_time":"2024-05-21T05:35:27.903922","status":"completed"},"tags":[]},"outputs":[],"source":["# Save initial generator state dict\n","generator = Generator()\n","save_folder = f\"/kaggle/working/generator_state_dict\"\n","os.makedirs(save_folder, exist_ok=True)\n","existing_files = glob.glob(os.path.join(save_folder, f\"generator_*.pth\"))\n","count = len(existing_files)\n","torch.save(generator.state_dict(), os.path.join(save_folder, f\"generator_{count}.pth\"))"]},{"cell_type":"code","execution_count":11,"id":"2f8970a3","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.033216Z","iopub.status.busy":"2024-05-21T05:35:28.03295Z","iopub.status.idle":"2024-05-21T05:35:28.038387Z","shell.execute_reply":"2024-05-21T05:35:28.037548Z"},"papermill":{"duration":0.021652,"end_time":"2024-05-21T05:35:28.040496","exception":false,"start_time":"2024-05-21T05:35:28.018844","status":"completed"},"tags":[]},"outputs":[],"source":["def SaveGeneratorStateDict(state_dict, num_examples, cid):\n","    save_folder = f\"/kaggle/working/generator-state-dict-temp\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"*.pth\"))\n","    count = len(existing_files) + 1\n","    torch.save({'state_dict': state_dict, 'num_examples': num_examples}, f\"/kaggle/working/generator-state-dict-temp/generator_{cid}.pth\")"]},{"cell_type":"code","execution_count":12,"id":"ab73e54e","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.069517Z","iopub.status.busy":"2024-05-21T05:35:28.069194Z","iopub.status.idle":"2024-05-21T05:35:28.094251Z","shell.execute_reply":"2024-05-21T05:35:28.093547Z"},"papermill":{"duration":0.042002,"end_time":"2024-05-21T05:35:28.096265","exception":false,"start_time":"2024-05-21T05:35:28.054263","status":"completed"},"tags":[]},"outputs":[],"source":["def SavePoisonGeneratorStateDict(generator):    \n","    save_folder = f\"/kaggle/working/poison_generator_state_dict\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"poison_generator_*.pth\"))\n","    count = len(existing_files)\n","    torch.save(generator.state_dict(), os.path.join(save_folder, f\"poison_generator_{count}.pth\"))\n","SavePoisonGeneratorStateDict(Generator())"]},{"cell_type":"code","execution_count":13,"id":"b54c7dab","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.125768Z","iopub.status.busy":"2024-05-21T05:35:28.125197Z","iopub.status.idle":"2024-05-21T05:35:28.129812Z","shell.execute_reply":"2024-05-21T05:35:28.128948Z"},"papermill":{"duration":0.021339,"end_time":"2024-05-21T05:35:28.131697","exception":false,"start_time":"2024-05-21T05:35:28.110358","status":"completed"},"tags":[]},"outputs":[],"source":["criterion_ = nn.NLLLoss()\n","def discriminator_loss(pred_labels, real_labels):\n","    log_probs = torch.log(pred_labels)\n","    loss = criterion_(log_probs, real_labels)\n","    return loss"]},{"cell_type":"code","execution_count":14,"id":"af0c9b19","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.159856Z","iopub.status.busy":"2024-05-21T05:35:28.159103Z","iopub.status.idle":"2024-05-21T05:35:28.171493Z","shell.execute_reply":"2024-05-21T05:35:28.170679Z"},"papermill":{"duration":0.028335,"end_time":"2024-05-21T05:35:28.173565","exception":false,"start_time":"2024-05-21T05:35:28.14523","status":"completed"},"tags":[]},"outputs":[],"source":["def train(model, generator, cid, trainloader, lr, epochs, device: str):\n","    \"\"\"Train the network on the training set.\"\"\"\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    optimizer_g = torch.optim.Adam(generator.parameters(), lr=lr)\n","    scheduler_g = lr_scheduler.StepLR(optimizer_g, step_size=1, gamma=0.1)\n","    criterion = torch.nn.CrossEntropyLoss()\n","    for epoch in range(epochs):\n","        total_g_loss, total_real_m_loss, total_fake_m_loss = 0.0, 0.0, 0.0\n","        model.train()\n","        generator.train()\n","        for batch in trainloader:\n","            # Chuẩn bị dữ liệu\n","            real_images, real_labels = batch[\"image\"].to(device), batch[\"label\"].to(device)\n","            fake_labels = torch.full((real_images.size(0),), 10).to(device)\n","            # Huấn luyện Model với dữ liệu thật\n","            optimizer_m.zero_grad()\n","            real_outputs = model(real_images)\n","            real_loss = discriminator_loss(real_outputs, real_labels)\n","\n","            # Huấn luyện Model với dữ liệu giả\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images.detach())\n","            fake_loss = discriminator_loss(fake_outputs, fake_labels)\n","            loss = real_loss + fake_loss\n","            loss.backward()\n","            optimizer_m.step()\n","            total_real_m_loss += real_loss.item()\n","            total_fake_m_loss += fake_loss.item()\n","            # Huấn luyện Generator\n","            optimizer_g.zero_grad()\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images)\n","            g_loss = -torch.mean(torch.log(fake_outputs))\n","            g_loss.backward()\n","            optimizer_g.step()  \n","            total_g_loss += g_loss.item()     \n","        scheduler_m.step()\n","        scheduler_g.step()\n","    generator.cpu()\n","    SaveGeneratorStateDict(generator.state_dict(), len(trainloader), cid)"]},{"cell_type":"code","execution_count":15,"id":"cb9a4855","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.200489Z","iopub.status.busy":"2024-05-21T05:35:28.200224Z","iopub.status.idle":"2024-05-21T05:35:28.211406Z","shell.execute_reply":"2024-05-21T05:35:28.210486Z"},"papermill":{"duration":0.027008,"end_time":"2024-05-21T05:35:28.213327","exception":false,"start_time":"2024-05-21T05:35:28.186319","status":"completed"},"tags":[]},"outputs":[],"source":["def test(net, testloader, device: str):\n","    \"\"\"Validate the network on the entire test set.\"\"\"\n","    criterion = torch.nn.CrossEntropyLoss()\n","    correct, loss = 0, 0.0\n","    correct_non_poisoned, total_non_poisoned, loss_non_poisoned = 0, 0, 0.0\n","    correct_poisoned, total_poisoned, loss_poisoned = 0, 0, 0.0\n","    net.eval()\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data[\"image\"].to(device), data[\"label\"].to(device)\n","            outputs = net(images)\n","            loss += criterion(outputs, labels).item()\n","            _, predicted = torch.max(outputs.data, 1)\n","            correct += (predicted == labels).sum().item()\n","    \n","            # Non-poisoned test\n","            non_poisoned_mask = labels != 2\n","            images_non_poisoned = images[non_poisoned_mask]\n","            labels_non_poisoned = labels[non_poisoned_mask]\n","            output_non_poisoned = net(images_non_poisoned)\n","            pred_non_poisoned = output_non_poisoned.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels_non_poisoned)):\n","                if pred_non_poisoned[i].item() == labels_non_poisoned[i].item():\n","                    correct_non_poisoned += 1\n","                total_non_poisoned += 1\n","            loss_non_poisoned += criterion(output_non_poisoned, labels_non_poisoned).item()\n","            \n","            # Poisoned test\n","            pred = outputs.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels)):\n","                if labels[i] == 2 and pred[i].item() == 7:  # Nếu ảnh số 2 bị phân loại sai thành số 7\n","                    correct_poisoned += 1\n","                if labels[i] == 2:  # Đếm tổng số lượng ảnh số 2\n","                    total_poisoned += 1\n","            loss_poisoned += criterion(outputs, labels).item()\n","    \n","    accuracy = 100 * correct / len(testloader.dataset)\n","    non_poisoned_accuracy = 100 * correct_non_poisoned / total_non_poisoned if total_non_poisoned != 0 else 0\n","    poisoned_accuracy = 100 * correct_poisoned / total_poisoned if total_poisoned != 0 else 0\n","    return loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy"]},{"cell_type":"code","execution_count":16,"id":"85646de9","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.240558Z","iopub.status.busy":"2024-05-21T05:35:28.240265Z","iopub.status.idle":"2024-05-21T05:35:28.245539Z","shell.execute_reply":"2024-05-21T05:35:28.244755Z"},"papermill":{"duration":0.020748,"end_time":"2024-05-21T05:35:28.247334","exception":false,"start_time":"2024-05-21T05:35:28.226586","status":"completed"},"tags":[]},"outputs":[],"source":["def get_latest_state_dict_file(directory, file_pattern=\"*.pth\"):\n","    list_of_files = [fname for fname in glob.glob(os.path.join(directory, file_pattern))]\n","    if list_of_files:\n","        latest_round_file = max(list_of_files, key=os.path.getctime)\n","        return latest_round_file\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":17,"id":"b012354d","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.274833Z","iopub.status.busy":"2024-05-21T05:35:28.274374Z","iopub.status.idle":"2024-05-21T05:35:28.290479Z","shell.execute_reply":"2024-05-21T05:35:28.289751Z"},"papermill":{"duration":0.031701,"end_time":"2024-05-21T05:35:28.292266","exception":false,"start_time":"2024-05-21T05:35:28.260565","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","class FlowerClient(fl.client.NumPyClient):\n","    def __init__(self, cid, trainloader, valloader, testloader) -> None:\n","        super().__init__()\n","        self.trainloader = trainloader\n","        self.valloader = valloader\n","        self.testloader = testloader\n","        self.cid = cid\n","        self.model = Model()\n","        self.generator = Generator()\n","        # Determine device\n","        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        self.model.to(self.device)  # send model to device\n","        self.generator.to(self.device)\n","        if self.cid == 0:\n","            self.atk_generator = Generator()\n","            self.discriminator = Discriminator()\n","            self.discriminator.to(self.device)\n","            self.atk_generator.to(self.device)\n","\n","    def set_parameters(self, parameters):\n","        \"\"\"With the model paramters received from the server,\n","        overwrite the uninitialise model in this class with them.\"\"\"\n","        params_dict = zip(self.model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        # now replace the parameters\n","        self.model.load_state_dict(state_dict, strict=True)\n","        self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/generator_state_dict\")), strict=True)\n","        if self.cid == 0:\n","            self.discriminator.load_state_dict(self.model.state_dict(), strict=False)\n","            self.atk_generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/poison_generator_state_dict\")), strict=True)\n","\n","    def get_parameters(self, config: Dict[str, Scalar]):\n","        \"\"\"Extract all model parameters and conver them to a list of\n","        NumPy arryas. The server doesn't work with PyTorch/TF/etc.\"\"\"\n","        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n","\n","    def fit(self, parameters, config):\n","        # copy parameters sent by the server into client's local model\n","        self.set_parameters(parameters)\n","        server_round = config[\"server_round\"]\n","        lr, epochs = config[\"lr\"], config[\"epochs\"]\n","        attacker_lr, attacker_epochs = config[\"attacker_lr\"], config[\"attacker_epochs\"]\n","        if self.cid == 0:\n","            self.atk_generator = atk_generator_train(self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","            loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","            if accuracy > 90:\n","                print(\"ATTACKER TRAINING POISONGAN...\")\n","                PoisonGAN(self.model, self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","        train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n","        return self.get_parameters({}), len(self.trainloader), {}\n","    \n","    def evaluate(self, parameters: NDArrays, config: Dict[str, Scalar]):\n","        \"\"\"Evaluate the model sent by the server on this client's\n","        local validation set. Then return performance metrics.\"\"\"\n","\n","        self.set_parameters(parameters)\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","        return float(loss), len(self.valloader), {\"accuracy\": accuracy}"]},{"cell_type":"code","execution_count":18,"id":"daadb09d","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.319037Z","iopub.status.busy":"2024-05-21T05:35:28.318739Z","iopub.status.idle":"2024-05-21T05:35:28.325348Z","shell.execute_reply":"2024-05-21T05:35:28.324611Z"},"papermill":{"duration":0.022639,"end_time":"2024-05-21T05:35:28.327469","exception":false,"start_time":"2024-05-21T05:35:28.30483","status":"completed"},"tags":[]},"outputs":[],"source":["def gen_results(directory):\n","    gen_results = []\n","    for filename in os.listdir(directory):\n","        filepath = os.path.join(directory, filename)\n","        gen_results.append((torch.load(filepath)[\"state_dict\"] , torch.load(filepath)[\"num_examples\"]))\n","    !rm -rf directory/*\n","    return gen_results "]},{"cell_type":"code","execution_count":19,"id":"0b3eae1d","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.355469Z","iopub.status.busy":"2024-05-21T05:35:28.355205Z","iopub.status.idle":"2024-05-21T05:35:28.363934Z","shell.execute_reply":"2024-05-21T05:35:28.363101Z"},"papermill":{"duration":0.024751,"end_time":"2024-05-21T05:35:28.365791","exception":false,"start_time":"2024-05-21T05:35:28.34104","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","def get_evaluate_fn(centralized_testset: Dataset):\n","    \"\"\"This is a function that returns a function. The returned\n","    function (i.e. `evaluate_fn`) will be executed by the strategy\n","    at the end of each round to evaluate the stat of the global\n","    model.\"\"\"\n","\n","    def evaluate_fn(server_round: int, parameters, config):\n","        \"\"\"This function is executed by the strategy it will instantiate\n","        a model and replace its parameters with those from the global model.\n","        The, the model will be evaluate on the test set (recall this is the\n","        whole MNIST test set).\"\"\"\n","        model = Model()\n","        # Determine device\n","        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        model.to(device)  # send model to device\n","        # set parameters to the model\n","        params_dict = zip(model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        model.load_state_dict(state_dict, strict=True)\n","        # Apply transform to dataset\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # call test\n","        print('GLOBAL TEST')\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(model, testloader, device)\n","\n","        print(f'Poison Test   - Accuracy: {poisoned_accuracy:.6f}, Loss: {loss_poisoned:.6f}')\n","        print(f'Main Test     - Accuracy: {non_poisoned_accuracy:.6f}, Loss: {loss_non_poisoned:.6f}')\n","        print(f'Standard Test - Accuracy: {accuracy:.6f}, Loss: {loss:.6f}')\n","        main_loss_values.append(loss_non_poisoned)\n","        main_acc_values.append(non_poisoned_accuracy)\n","        poison_loss_values.append(loss_poisoned)\n","        poison_acc_values.append(poisoned_accuracy)\n","        return loss, {\"accuracy\": accuracy}\n","\n","    return evaluate_fn"]},{"cell_type":"code","execution_count":20,"id":"5274f6fa","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.393367Z","iopub.status.busy":"2024-05-21T05:35:28.392623Z","iopub.status.idle":"2024-05-21T05:35:28.399776Z","shell.execute_reply":"2024-05-21T05:35:28.3989Z"},"papermill":{"duration":0.022871,"end_time":"2024-05-21T05:35:28.401799","exception":false,"start_time":"2024-05-21T05:35:28.378928","status":"completed"},"tags":[]},"outputs":[],"source":["def fit_config(server_round: int) -> Dict[str, Scalar]:\n","    \"\"\"Return a configuration with static batch size and (local) epochs.\"\"\"\n","    config = {\n","        \"epochs\": 10,  # Number of local epochs done by clients\n","        \"lr\": 0.00006,  # Learning rate to use by clients during fit()\n","        \"attacker_epochs\": 20,\n","        \"attacker_lr\": 0.00003,\n","        \"server_round\": server_round,  # The current round of federated learning\n","    }\n","    return config\n","\n","def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:\n","    \"\"\"Aggregation function for (federated) evaluation metrics, i.e. those returned by\n","    the client's evaluate() method.\"\"\"\n","    # Multiply accuracy of each client by number of examples used\n","    accuracies = [num_examples * m[\"accuracy\"] for num_examples, m in metrics]\n","    examples = [num_examples for num_examples, _ in metrics]\n","\n","    # Aggregate and return custom metric (weighted average)\n","    return {\"accuracy\": sum(accuracies) / sum(examples)}"]},{"cell_type":"code","execution_count":21,"id":"19d4352a","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.428643Z","iopub.status.busy":"2024-05-21T05:35:28.42802Z","iopub.status.idle":"2024-05-21T05:35:28.43834Z","shell.execute_reply":"2024-05-21T05:35:28.437485Z"},"papermill":{"duration":0.025744,"end_time":"2024-05-21T05:35:28.440228","exception":false,"start_time":"2024-05-21T05:35:28.414484","status":"completed"},"tags":[]},"outputs":[],"source":["class SaveModelStrategy(fl.server.strategy.FedAvg):\n","    def aggregate_fit(\n","        self,\n","        server_round: int,\n","        results: List[Tuple[fl.server.client_proxy.ClientProxy, fl.common.FitRes]],\n","        failures: List[Union[Tuple[ClientProxy, FitRes], BaseException]],\n","    ) -> Tuple[Optional[Parameters], Dict[str, Scalar]]:\n","        \"\"\"Aggregate model weights using weighted average and store checkpoint\"\"\"\n","        model = Model()\n","        # Call aggregate_fit from base class (FedAvg) to aggregate parameters and metrics\n","        aggregated_parameters, aggregated_metrics = super().aggregate_fit(server_round, results, failures)\n","        if aggregated_parameters is not None:\n","            print(f\"Saving round {server_round} Model aggregated_parameters...\")\n","            # Convert `Parameters` to `List[np.ndarray]`\n","            aggregated_ndarrays: List[np.ndarray] = fl.common.parameters_to_ndarrays(aggregated_parameters)\n","            # Convert `List[np.ndarray]` to PyTorch`state_dict`\n","            params_dict = zip(model.state_dict().keys(), aggregated_ndarrays)\n","            state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n","            model.load_state_dict(state_dict, strict=True)\n","            # Save the model\n","            os.makedirs(\"/kaggle/working/model-state-dict\", exist_ok=True)\n","            torch.save(model.state_dict(), f\"/kaggle/working/model-state-dict/model_round_{server_round}.pth\")\n","            \n","        generator = Generator()\n","        gen_aggregated_parameters = gen_aggregate_fit(gen_results(\"/kaggle/working/generator-state-dict-temp\"))\n","        if gen_aggregated_parameters is not None:\n","            print(f\"Saving round {server_round} Generator aggregated_parameters...\")\n","            generator.load_state_dict(gen_aggregated_parameters, strict=True)\n","            # Save the model\n","            os.makedirs(\"/kaggle/working/generator-state-dict\", exist_ok=True)\n","            torch.save(generator.state_dict(), f\"/kaggle/working/generator-state-dict/generator_round_{server_round}.pth\")\n","            \n","        return aggregated_parameters, aggregated_metrics"]},{"cell_type":"code","execution_count":22,"id":"cb8c179e","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.468484Z","iopub.status.busy":"2024-05-21T05:35:28.467733Z","iopub.status.idle":"2024-05-21T05:35:28.473585Z","shell.execute_reply":"2024-05-21T05:35:28.472649Z"},"papermill":{"duration":0.021748,"end_time":"2024-05-21T05:35:28.475444","exception":false,"start_time":"2024-05-21T05:35:28.453696","status":"completed"},"tags":[]},"outputs":[],"source":["def parameters_to_ndarrays(params):\n","    ndarrays = {}\n","    for key, value in params.items():\n","        ndarrays[key] = value.cpu().numpy()  # Ensure conversion to numpy arrays\n","    return ndarrays\n","\n","def ndarrays_to_parameters(ndarrays):\n","    params = {}\n","    for key, value in ndarrays.items():\n","        params[key] = torch.tensor(value).clone().detach()  # Convert back to tensors\n","    return params"]},{"cell_type":"code","execution_count":23,"id":"19f1f3bf","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.503272Z","iopub.status.busy":"2024-05-21T05:35:28.503022Z","iopub.status.idle":"2024-05-21T05:35:28.510959Z","shell.execute_reply":"2024-05-21T05:35:28.510075Z"},"papermill":{"duration":0.024097,"end_time":"2024-05-21T05:35:28.512922","exception":false,"start_time":"2024-05-21T05:35:28.488825","status":"completed"},"tags":[]},"outputs":[],"source":["def gen_aggregate(results: List[Tuple[NDArrays, int]]) -> NDArrays:\n","    \"\"\"Compute weighted average.\"\"\"\n","    # Calculate the total number of examples used during training\n","    num_examples_total = sum(num_examples for (_, num_examples) in results)\n","    # Create a dictionary to store the weighted sums\n","    weighted_sums = {}\n","    for weights, num_examples in results:\n","        for layer_name, layer_weights in weights.items():\n","            if layer_name not in weighted_sums:\n","                weighted_sums[layer_name] = layer_weights * num_examples\n","            else:\n","                weighted_sums[layer_name] += layer_weights * num_examples\n","    # Compute the average weights of each layer\n","    weights_prime = {layer_name: layer_weights / num_examples_total for layer_name, layer_weights in weighted_sums.items()}\n","    \n","    return weights_prime\n","\n","def gen_aggregate_fit(results: List[Tuple]):\n","    \"\"\"Aggregate fit results using weighted average.\"\"\"\n","    # Convert results\n","    weights_results = [\n","        (parameters_to_ndarrays(parameters), num_examples)\n","        for parameters, num_examples in results\n","    ]\n","    aggregated_ndarrays = gen_aggregate(weights_results)\n","    parameters_aggregated = ndarrays_to_parameters(aggregated_ndarrays)\n","\n","    return parameters_aggregated"]},{"cell_type":"code","execution_count":24,"id":"b9726b20","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.54128Z","iopub.status.busy":"2024-05-21T05:35:28.541014Z","iopub.status.idle":"2024-05-21T05:35:28.548778Z","shell.execute_reply":"2024-05-21T05:35:28.547805Z"},"papermill":{"duration":0.024435,"end_time":"2024-05-21T05:35:28.550869","exception":false,"start_time":"2024-05-21T05:35:28.526434","status":"completed"},"tags":[]},"outputs":[],"source":["def get_client_fn(dataset: FederatedDataset):\n","    \"\"\"Return a function to construct a client.\n","    The VirtualClientEngine will execute this function whenever a client is sampled by\n","    the strategy to participate.\n","    \"\"\"\n","    def client_fn(cid: str) -> fl.client.Client:\n","        \"\"\"Construct a FlowerClient with its own dataset partition.\"\"\"\n","        # Let's get the partition corresponding to the i-th client\n","        client_dataset = dataset.load_partition(int(cid), \"train\")\n","        # Now let's split it into train (90%) and validation (10%)\n","        client_dataset_splits = client_dataset.train_test_split(test_size=0.1)\n","        trainset = client_dataset_splits[\"train\"]\n","        valset = client_dataset_splits[\"test\"]\n","        # Now we apply the transform to each batch.\n","        trainloader = DataLoader(trainset.with_transform(apply_transforms), batch_size=256, shuffle=True)\n","        valloader = DataLoader(valset.with_transform(apply_transforms), batch_size=256)\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # Create and return client\n","        return FlowerClient(int(cid), trainloader, valloader, testloader).to_client()\n","    return client_fn\n","\n","client_fn_callback = get_client_fn(mnist_fds)"]},{"cell_type":"code","execution_count":25,"id":"13bf21b3","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.578974Z","iopub.status.busy":"2024-05-21T05:35:28.578724Z","iopub.status.idle":"2024-05-21T05:35:28.586307Z","shell.execute_reply":"2024-05-21T05:35:28.585467Z"},"papermill":{"duration":0.023779,"end_time":"2024-05-21T05:35:28.58835","exception":false,"start_time":"2024-05-21T05:35:28.564571","status":"completed"},"tags":[]},"outputs":[],"source":["def save_generator_images(generator):\n","    device='cuda'\n","    num_images=16\n","    folder_path = \"/kaggle/working/output_image\"\n","    os.makedirs(folder_path, exist_ok=True)\n","    noise = torch.randn(num_images, 100, 1, 1).to(device)\n","    generated_images = generator(noise)\n","    generated_images = generated_images.squeeze().cpu().detach().numpy()\n","    # Find the existing files to determine the count\n","    existing_files = glob.glob(os.path.join(folder_path, f\"random_image_*.png\"))\n","    count = len(existing_files) + 1\n","    plt.figure(figsize=(8, 8))\n","    for i, img in enumerate(generated_images):\n","        plt.subplot(4, 4, i+1)\n","        plt.imshow(img, cmap='gray', vmin=0, vmax=1)\n","        plt.axis('off')\n","    # Save the combined image with a dynamic filename\n","    filename = f\"random_image_{count}.png\"\n","    plt.savefig(os.path.join(folder_path, filename))\n","    plt.close()"]},{"cell_type":"code","execution_count":26,"id":"40bc6f70","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.615557Z","iopub.status.busy":"2024-05-21T05:35:28.614955Z","iopub.status.idle":"2024-05-21T05:35:28.619127Z","shell.execute_reply":"2024-05-21T05:35:28.618325Z"},"papermill":{"duration":0.019411,"end_time":"2024-05-21T05:35:28.62099","exception":false,"start_time":"2024-05-21T05:35:28.601579","status":"completed"},"tags":[]},"outputs":[],"source":["main_loss_values = []\n","main_acc_values = []\n","poison_loss_values = []\n","poison_acc_values = []"]},{"cell_type":"code","execution_count":27,"id":"51f74845","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.648571Z","iopub.status.busy":"2024-05-21T05:35:28.648019Z","iopub.status.idle":"2024-05-21T05:35:28.652953Z","shell.execute_reply":"2024-05-21T05:35:28.652159Z"},"papermill":{"duration":0.020778,"end_time":"2024-05-21T05:35:28.654834","exception":false,"start_time":"2024-05-21T05:35:28.634056","status":"completed"},"tags":[]},"outputs":[],"source":["def create_poison_dataloader(poison_images, poison_labels):\n","    # Gộp tất cả poison_images và poison_labels vào 2 mảng\n","    all_images = torch.cat(poison_images, dim=0)\n","    all_labels = torch.cat(poison_labels, dim=0)\n","    # Tạo TensorDataset và dataloader từ all_images và all_labels\n","    poison_dataset = TensorDataset(all_images, all_labels)\n","    poison_dataloader = DataLoader(poison_dataset, batch_size=16, shuffle=True)\n","    return poison_dataloader   "]},{"cell_type":"code","execution_count":28,"id":"0e965324","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.682639Z","iopub.status.busy":"2024-05-21T05:35:28.681921Z","iopub.status.idle":"2024-05-21T05:35:28.692613Z","shell.execute_reply":"2024-05-21T05:35:28.691439Z"},"papermill":{"duration":0.027113,"end_time":"2024-05-21T05:35:28.694913","exception":false,"start_time":"2024-05-21T05:35:28.6678","status":"completed"},"tags":[]},"outputs":[],"source":["def PoisonGAN(model, atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    criterion = torch.nn.CrossEntropyLoss()\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=attacker_lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    for _ in range(attacker_epochs):\n","        poison_dataloader = Data_Gen(atk_generator, discriminator, device)\n","        if poison_dataloader is not None:\n","            for bp in poison_dataloader:\n","                images, labels = bp[0].to(device), bp[1].to(device)\n","                optimizer_m.zero_grad()\n","                outputs = model(images)\n","                loss = criterion(outputs, labels)\n","                loss.backward()\n","                for param in model.parameters():\n","                    param.grad *= 40\n","                optimizer_m.step()\n","            scheduler_m.step()\n","#     for param, grad in zip(model.parameters(), [param.grad for param in model.parameters()]):\n","#         param.data -= S * learning_rate * grad"]},{"cell_type":"code","execution_count":29,"id":"d1065b00","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.722172Z","iopub.status.busy":"2024-05-21T05:35:28.721935Z","iopub.status.idle":"2024-05-21T05:35:28.729548Z","shell.execute_reply":"2024-05-21T05:35:28.728654Z"},"papermill":{"duration":0.023385,"end_time":"2024-05-21T05:35:28.731378","exception":false,"start_time":"2024-05-21T05:35:28.707993","status":"completed"},"tags":[]},"outputs":[],"source":["from tqdm import tqdm\n","def atk_generator_train(atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    atk_g_optimizer = torch.optim.Adam(atk_generator.parameters(), lr=attacker_lr)\n","    atk_g_scheduler = lr_scheduler.StepLR(atk_g_optimizer, step_size=1, gamma=0.1)\n","    num_batchs = 8\n","    for epoch in range(attacker_epochs):\n","        total_g_loss = 0.0\n","        atk_generator.train()\n","        discriminator.eval()\n","        for batch in range(num_batchs):\n","            atk_g_optimizer.zero_grad()\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            x_fake = atk_generator(noise)\n","            d_outputs = discriminator(x_fake)\n","            atk_g_loss = -torch.mean(torch.log(d_outputs))\n","            atk_g_loss.backward()\n","            total_g_loss += atk_g_loss.item()\n","            atk_g_optimizer.step()\n","        print(f'Attacker Generator Loss: {total_g_loss/num_batchs}')\n","    atk_g_scheduler.step()\n","    \n","    SavePoisonGeneratorStateDict(atk_generator)\n","    save_generator_images(atk_generator)\n","    return atk_generator"]},{"cell_type":"code","execution_count":30,"id":"0b0cd187","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.758339Z","iopub.status.busy":"2024-05-21T05:35:28.758042Z","iopub.status.idle":"2024-05-21T05:35:28.765256Z","shell.execute_reply":"2024-05-21T05:35:28.764406Z"},"papermill":{"duration":0.022626,"end_time":"2024-05-21T05:35:28.767173","exception":false,"start_time":"2024-05-21T05:35:28.744547","status":"completed"},"tags":[]},"outputs":[],"source":["def Data_Gen(atk_generator, discriminator, device):\n","    num_batchs = 8\n","    poison_images, poison_labels = [], []\n","    for batch in range(num_batchs):\n","    # Data gen / create poison data\n","        with torch.no_grad():\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            outputs = atk_generator(noise)\n","            predictions = discriminator(outputs)\n","            predicted_labels = torch.max(predictions, dim=1).indices\n","            selected_images = outputs[predicted_labels == 2]\n","            selected_labels = predicted_labels[predicted_labels == 2]\n","            selected_labels[selected_labels == 2] = 7\n","            if len(selected_images)>0:\n","                poison_images.append(selected_images)\n","                poison_labels.append(selected_labels)\n","    if len(poison_images) > 0:\n","        poison_dataloader = create_poison_dataloader(poison_images, poison_labels)\n","        return poison_dataloader\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":31,"id":"37a2bf45","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.793892Z","iopub.status.busy":"2024-05-21T05:35:28.793609Z","iopub.status.idle":"2024-05-21T05:35:28.797757Z","shell.execute_reply":"2024-05-21T05:35:28.796976Z"},"papermill":{"duration":0.019601,"end_time":"2024-05-21T05:35:28.79983","exception":false,"start_time":"2024-05-21T05:35:28.780229","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","strategy = SaveModelStrategy(\n","    fraction_fit=0.31,  # Sample 31% of available clients for training\n","    fraction_evaluate=0.31,  # Sample 31% of available clients for evaluation\n","    on_fit_config_fn=fit_config,\n","    evaluate_fn=get_evaluate_fn(centralized_testset),  # global evaluation function\n",")"]},{"cell_type":"code","execution_count":32,"id":"58e89ba8","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:28.826214Z","iopub.status.busy":"2024-05-21T05:35:28.825976Z","iopub.status.idle":"2024-05-21T06:02:13.039246Z","shell.execute_reply":"2024-05-21T06:02:13.036948Z"},"papermill":{"duration":1604.243025,"end_time":"2024-05-21T06:02:13.055583","exception":false,"start_time":"2024-05-21T05:35:28.812558","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      Starting Flower simulation, config: num_rounds=15, no round_timeout\n","2024-05-21 05:35:31,698\tINFO worker.py:1621 -- Started a local Ray instance.\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Ray initialized with resources: {'memory': 18023109428.0, 'CPU': 4.0, 'object_store_memory': 9011554713.0, 'GPU': 2.0, 'node:172.19.2.2': 1.0, 'node:__internal_head__': 1.0}\n","\u001b[92mINFO \u001b[0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 1}\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Creating VirtualClientEngineActorPool with 2 actors\n","\u001b[92mINFO \u001b[0m:      [INIT]\n","\u001b[92mINFO \u001b[0m:      Requesting initial parameters from one random client\n","\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:35:36.113736: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:35:36.113782: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","\u001b[2m\u001b[36m(pid=287)\u001b[0m 2024-05-21 05:35:36.115190: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","\u001b[92mINFO \u001b[0m:      Received initial parameters from one random client\n","\u001b[92mINFO \u001b[0m:      Evaluating initial global parameters\n"]},{"name":"stdout","output_type":"stream","text":["GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      initial parameters (loss, other metrics): 479.6070206165314, {'accuracy': 10.28}\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 1]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 100.000000, Loss: 479.607021\n","Main Test     - Accuracy: 11.462979, Loss: 479.613922\n","Standard Test - Accuracy: 10.280000, Loss: 479.607021\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980432748794556\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398034304380417\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980278968811035\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980224430561066\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980182111263275\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398015111684799\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980128169059753\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980111181735992\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398009777069092\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980087339878082\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980078995227814\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980069756507874\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398006170988083\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398005574941635\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980049192905426\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980044424533844\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398003935813904\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398003399372101\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398002952337265\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3980025351047516\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No fit_metrics_aggregation_fn provided\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 1 Model aggregated_parameters...\n","Saving round 1 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (1, 479.6969938278198, {'accuracy': 0.0}, 112.20810582000001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.696994\n","Main Test     - Accuracy: 0.000000, Loss: 479.686034\n","Standard Test - Accuracy: 0.000000, Loss: 479.696994\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No evaluate_metrics_aggregation_fn provided\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 2]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 2 Model aggregated_parameters...\n","Saving round 2 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (2, 479.97539949417114, {'accuracy': 0.0}, 214.05325228100003)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.975399\n","Main Test     - Accuracy: 0.000000, Loss: 479.905350\n","Standard Test - Accuracy: 0.000000, Loss: 479.975399\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 3]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 3 Model aggregated_parameters...\n","Saving round 3 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (3, 481.2330586910248, {'accuracy': 0.0}, 316.0806622450001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 481.233059\n","Main Test     - Accuracy: 0.000000, Loss: 481.022029\n","Standard Test - Accuracy: 0.000000, Loss: 481.233059\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 4]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 4 Model aggregated_parameters...\n","Saving round 4 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (4, 486.3674132823944, {'accuracy': 0.0}, 417.66059329899997)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 486.367413\n","Main Test     - Accuracy: 0.000000, Loss: 486.039057\n","Standard Test - Accuracy: 0.000000, Loss: 486.367413\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 5]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 5 Model aggregated_parameters...\n","Saving round 5 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (5, 484.98922991752625, {'accuracy': 0.0}, 519.904139525)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 484.989230\n","Main Test     - Accuracy: 0.000000, Loss: 484.818796\n","Standard Test - Accuracy: 0.000000, Loss: 484.989230\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 6]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 4.3386083245277405\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.9525163173675537\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.6706557273864746\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.4667420089244843\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.319231688976288\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.219628542661667\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.1336577236652374\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.0722139477729797\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 3.0262086987495422\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.9675276577472687\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.902704417705536\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.832069903612137\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.788752794265747\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.7595883905887604\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.7357538044452667\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.7139018177986145\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.6903188824653625\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.666559010744095\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.644929438829422\n","\u001b[2m\u001b[36m(ClientAppActor pid=287)\u001b[0m Attacker Generator Loss: 2.628573954105377\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 6 Model aggregated_parameters...\n","Saving round 6 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (6, 482.3538293838501, {'accuracy': 0.0}, 634.9348248729999)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 482.353829\n","Main Test     - Accuracy: 0.000000, Loss: 482.314399\n","Standard Test - Accuracy: 0.000000, Loss: 482.353829\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 7]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.469351887702942\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.456460416316986\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4500682055950165\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4453805685043335\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.440331310033798\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.438214510679245\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.43710395693779\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4362557530403137\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4355488419532776\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.434910237789154\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4342480301856995\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4324845671653748\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4299481213092804\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4287464320659637\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4274401366710663\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.425215005874634\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.424497425556183\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4241923093795776\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4239598214626312\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4237707555294037\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 7 Model aggregated_parameters...\n","Saving round 7 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (7, 480.6420159339905, {'accuracy': 0.0}, 750.92364971)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.642016\n","Main Test     - Accuracy: 0.000000, Loss: 480.669974\n","Standard Test - Accuracy: 0.000000, Loss: 480.642016\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 8]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 8 Model aggregated_parameters...\n","Saving round 8 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (8, 479.7308864593506, {'accuracy': 5.5}, 852.992693153)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 19.282946, Loss: 479.730886\n","Main Test     - Accuracy: 6.132917, Loss: 479.764769\n","Standard Test - Accuracy: 5.500000, Loss: 479.730886\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 9]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 9 Model aggregated_parameters...\n","Saving round 9 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (9, 479.26957654953003, {'accuracy': 10.76}, 954.912254148)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 79.554264, Loss: 479.269577\n","Main Test     - Accuracy: 11.942462, Loss: 479.240385\n","Standard Test - Accuracy: 10.760000, Loss: 479.269577\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 10]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 10 Model aggregated_parameters...\n","Saving round 10 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (10, 478.34965538978577, {'accuracy': 15.12}, 1056.6555263690002)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 57.364341, Loss: 478.349655\n","Main Test     - Accuracy: 16.859946, Loss: 478.223234\n","Standard Test - Accuracy: 15.120000, Loss: 478.349655\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 11]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 11 Model aggregated_parameters...\n","Saving round 11 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (11, 475.89647030830383, {'accuracy': 18.39}, 1158.522680079)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 29.651163, Loss: 475.896470\n","Main Test     - Accuracy: 20.506244, Loss: 475.646988\n","Standard Test - Accuracy: 18.390000, Loss: 475.896470\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 12]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 12 Model aggregated_parameters...\n","Saving round 12 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (12, 472.03112173080444, {'accuracy': 23.68}, 1260.1761207970003)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 23.255814, Loss: 472.031122\n","Main Test     - Accuracy: 26.404996, Loss: 471.614376\n","Standard Test - Accuracy: 23.680000, Loss: 472.031122\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 13]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4562438428401947\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4520586729049683\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4498287737369537\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.448261320590973\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.44711634516716\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4458943903446198\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.443741202354431\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4422718584537506\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4414075314998627\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4405955970287323\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4398863315582275\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4392699003219604\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4387500286102295\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4382742941379547\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4378320276737213\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4374102652072906\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.436990648508072\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.436534106731415\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.436027079820633\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4355340600013733\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 13 Model aggregated_parameters...\n","Saving round 13 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (13, 467.3914065361023, {'accuracy': 41.56}, 1376.3685850010002)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 8.430233, Loss: 467.391407\n","Main Test     - Accuracy: 44.547279, Loss: 466.917752\n","Standard Test - Accuracy: 41.560000, Loss: 467.391407\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 14]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 14 Model aggregated_parameters...\n","Saving round 14 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (14, 463.05211663246155, {'accuracy': 46.74}, 1477.7547114910003)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 4.554264, Loss: 463.052117\n","Main Test     - Accuracy: 48.829170, Loss: 462.427111\n","Standard Test - Accuracy: 46.740000, Loss: 463.052117\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 15]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 15 Model aggregated_parameters...\n","Saving round 15 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (15, 457.98417496681213, {'accuracy': 50.04}, 1579.8340069690003)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 4.360465, Loss: 457.984175\n","Main Test     - Accuracy: 52.297056, Loss: 457.147361\n","Standard Test - Accuracy: 50.040000, Loss: 457.984175\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [SUMMARY]\n","\u001b[92mINFO \u001b[0m:      Run finished 15 rounds in 1581.17s\n","\u001b[92mINFO \u001b[0m:      History (loss, distributed):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 1: 2.3984303951263426\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 2.3998111724853515\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 2.406154823303223\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 2.431385040283203\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 2.424504613876343\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 2.4111193418502808\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 2.40284059047699\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 2.398493695259094\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 2.3964423894882203\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 2.392189693450928\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 2.3798156499862673\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 2.3590595722198486\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 2.333398938179016\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 2.31507523059845\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 2.2874265193939207\\n')History (loss, centralized):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 0: 479.6070206165314\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 1: 479.6969938278198\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 479.97539949417114\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 481.2330586910248\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 486.3674132823944\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 484.98922991752625\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 482.3538293838501\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 480.6420159339905\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 479.7308864593506\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 479.26957654953003\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 478.34965538978577\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 475.89647030830383\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 472.03112173080444\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 467.3914065361023\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 463.05211663246155\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 457.98417496681213\\n')History (metrics, centralized):\n","\u001b[92mINFO \u001b[0m:      \t{'accuracy': [(0, 10.28),\n","\u001b[92mINFO \u001b[0m:      \t              (1, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (2, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (3, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (4, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (5, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (6, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (7, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (8, 5.5),\n","\u001b[92mINFO \u001b[0m:      \t              (9, 10.76),\n","\u001b[92mINFO \u001b[0m:      \t              (10, 15.12),\n","\u001b[92mINFO \u001b[0m:      \t              (11, 18.39),\n","\u001b[92mINFO \u001b[0m:      \t              (12, 23.68),\n","\u001b[92mINFO \u001b[0m:      \t              (13, 41.56),\n","\u001b[92mINFO \u001b[0m:      \t              (14, 46.74),\n","\u001b[92mINFO \u001b[0m:      \t              (15, 50.04)]}\n","\u001b[92mINFO \u001b[0m:      \n"]}],"source":["# With a dictionary, you tell Flower's VirtualClientEngine that each\n","# client needs exclusive access to these many resources in order to run\n","client_resources = {\"num_cpus\": 2, \"num_gpus\": 1}\n","\n","# Let's disable tqdm progress bar in the main thread (used by the server)\n","disable_progress_bar()\n","history = fl.simulation.start_simulation(\n","    client_fn=client_fn_callback,  # a callback to construct a client\n","    num_clients=NUM_CLIENTS,  # total number of clients in the experiment\n","    config=fl.server.ServerConfig(num_rounds=15),  # let's run for 10 rounds\n","    strategy=strategy,  # the strategy that will orchestrate the whole FL pipeline\n","    client_resources=client_resources,\n","    actor_kwargs={\n","        \"on_actor_init_fn\": disable_progress_bar  # disable tqdm on each actor/process spawning virtual clients\n","    },\n",")"]},{"cell_type":"code","execution_count":33,"id":"dcd9c98a","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:02:13.137696Z","iopub.status.busy":"2024-05-21T06:02:13.137377Z","iopub.status.idle":"2024-05-21T06:02:13.498686Z","shell.execute_reply":"2024-05-21T06:02:13.497763Z"},"papermill":{"duration":0.403809,"end_time":"2024-05-21T06:02:13.501007","exception":false,"start_time":"2024-05-21T06:02:13.097198","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["history.metrics_centralized = {'accuracy': [(0, 10.28), (1, 0.0), (2, 0.0), (3, 0.0), (4, 0.0), (5, 0.0), (6, 0.0), (7, 0.0), (8, 5.5), (9, 10.76), (10, 15.12), (11, 18.39), (12, 23.68), (13, 41.56), (14, 46.74), (15, 50.04)]}\n"]},{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7c10f0eb4e50>"]},"execution_count":33,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["print(f\"{history.metrics_centralized = }\")\n","global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round = [data[0] for data in global_accuracy_centralised]\n","acc = [data[1] for data in global_accuracy_centralised]\n","plt.plot(round, acc, label=\"global accuracy centralized\")\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"MNIST - IID - 33 clients with 10 clients per round\")\n","plt.legend()"]},{"cell_type":"code","execution_count":34,"id":"83520be7","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:02:13.580038Z","iopub.status.busy":"2024-05-21T06:02:13.579736Z","iopub.status.idle":"2024-05-21T06:02:13.896767Z","shell.execute_reply":"2024-05-21T06:02:13.895833Z"},"papermill":{"duration":0.35955,"end_time":"2024-05-21T06:02:13.899014","exception":false,"start_time":"2024-05-21T06:02:13.539464","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7c0f8c270940>"]},"execution_count":34,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round_centralised = [data[0] for data in global_accuracy_centralised]\n","plt.plot(round_centralised, [data[1] for data in global_accuracy_centralised], label=\"Standard Task\")\n","plt.plot(range(len(main_acc_values)), main_acc_values, label=\"Main Task\")\n","plt.plot(range(len(poison_acc_values)), poison_acc_values, label=\"Poison Task\")\n","\n","# Thiết lập định dạng của biểu đồ\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"Accuracy Comparison\")\n","plt.legend()"]},{"cell_type":"code","execution_count":35,"id":"8bd3b4d6","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:02:13.983192Z","iopub.status.busy":"2024-05-21T06:02:13.982352Z","iopub.status.idle":"2024-05-21T06:02:13.986794Z","shell.execute_reply":"2024-05-21T06:02:13.985885Z"},"papermill":{"duration":0.049326,"end_time":"2024-05-21T06:02:13.988818","exception":false,"start_time":"2024-05-21T06:02:13.939492","status":"completed"},"tags":[]},"outputs":[],"source":["# !rm -rf /kaggle/working/*"]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30699,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":1696.627404,"end_time":"2024-05-21T06:02:19.256245","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-05-21T05:34:02.628841","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"02ef3e71ecc84bc3af13795100777129":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_916023dcc8574b9593f953e7c85f9666","placeholder":"​","style":"IPY_MODEL_21a854994a854023988988598d69d757","value":"Computing checksums: 100%"}},"086f92e69e2045a0b62738aaeeb677b6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"137117d0e6f34bddb47725af4c529f2f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f28c6d40e47745b991915e6b5d9c2da8","max":2.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_21f661361ed843fbbabfecd4828d2349","value":2.0}},"19fa08a126a74127b8bb160b1e7228f6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1ea88ec4e8ea4411908febc5efbdc9c5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_70fae59aab0c4fc8932145386a8cda60","IPY_MODEL_555d0264319044e68217e38206b11e8c","IPY_MODEL_81ca01ac658f49e5ab1b5ac345e9f9a0"],"layout":"IPY_MODEL_4bb3ca0a37734bff93d5caa0f672eddf"}},"20442c09d7044d0dbf18346ec7ecaab0":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"21a854994a854023988988598d69d757":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"21f661361ed843fbbabfecd4828d2349":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"24023e9889b34a02b3c1853724a16e87":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"38b557290263440d9de8f3008705ad94":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"48725a75474e4d449d8ae074b35d8c59":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4bb3ca0a37734bff93d5caa0f672eddf":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"555d0264319044e68217e38206b11e8c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_20442c09d7044d0dbf18346ec7ecaab0","max":60000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_6fb1ebea367644ad9fa86619bc533718","value":60000.0}},"55f6a2bf48444547bc1e2bdbd9c9ef88":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"62e94202c491463b8a67e22a9f513186":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"654db9b7fdeb4e689b23c017439c94fc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_55f6a2bf48444547bc1e2bdbd9c9ef88","max":10000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_fe8e1139f7f44efbb6428f42d9d2a580","value":10000.0}},"6fb1ebea367644ad9fa86619bc533718":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"70fae59aab0c4fc8932145386a8cda60":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_48725a75474e4d449d8ae074b35d8c59","placeholder":"​","style":"IPY_MODEL_ee71ea9202f14368a1b01e3be443eb3b","value":"Generating train split: 100%"}},"81ca01ac658f49e5ab1b5ac345e9f9a0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b5ec3af378ce40cf95fb5154d5489a34","placeholder":"​","style":"IPY_MODEL_086f92e69e2045a0b62738aaeeb677b6","value":" 60000/60000 [00:00&lt;00:00, 151593.43 examples/s]"}},"8813e8189f3c4479ba2993d724b26f18":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8d2a15bebeb94e84930a8fb1c78d6205":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8f7d013a197048978fb726efcc69cf97","placeholder":"​","style":"IPY_MODEL_19fa08a126a74127b8bb160b1e7228f6","value":" 2/2 [00:00&lt;00:00, 164.36it/s]"}},"8f7d013a197048978fb726efcc69cf97":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"916023dcc8574b9593f953e7c85f9666":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"af145f01f69c482a9ae0e7e9b2676f35":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b5ec3af378ce40cf95fb5154d5489a34":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b64c5c9fde56423ab6b4c27bf663070d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_38b557290263440d9de8f3008705ad94","placeholder":"​","style":"IPY_MODEL_8813e8189f3c4479ba2993d724b26f18","value":"Generating test split: 100%"}},"c88d74ddb5da48f7a7f0652713dbbc5e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_02ef3e71ecc84bc3af13795100777129","IPY_MODEL_137117d0e6f34bddb47725af4c529f2f","IPY_MODEL_8d2a15bebeb94e84930a8fb1c78d6205"],"layout":"IPY_MODEL_af145f01f69c482a9ae0e7e9b2676f35"}},"db662717aa084a27affb3ececb14cfdf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b64c5c9fde56423ab6b4c27bf663070d","IPY_MODEL_654db9b7fdeb4e689b23c017439c94fc","IPY_MODEL_f5b362deaa8a42f6bf960772fb0da814"],"layout":"IPY_MODEL_24023e9889b34a02b3c1853724a16e87"}},"ee71ea9202f14368a1b01e3be443eb3b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f28c6d40e47745b991915e6b5d9c2da8":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f490f01e9e334fd29005728b71ebab8a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f5b362deaa8a42f6bf960772fb0da814":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_62e94202c491463b8a67e22a9f513186","placeholder":"​","style":"IPY_MODEL_f490f01e9e334fd29005728b71ebab8a","value":" 10000/10000 [00:00&lt;00:00, 137930.60 examples/s]"}},"fe8e1139f7f44efbb6428f42d9d2a580":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}