{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/longchung1/sim-newloss-gen-aggregate-fit?scriptVersionId=178873727\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"8bca37a1","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-05-21T05:33:42.749249Z","iopub.status.busy":"2024-05-21T05:33:42.748498Z","iopub.status.idle":"2024-05-21T05:34:38.470329Z","shell.execute_reply":"2024-05-21T05:34:38.469182Z"},"papermill":{"duration":55.736761,"end_time":"2024-05-21T05:34:38.473537","exception":false,"start_time":"2024-05-21T05:33:42.736776","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n","cudf 23.8.0 requires cubinlinker, which is not installed.\r\n","cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","cudf 23.8.0 requires ptxcompiler, which is not installed.\r\n","cuml 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","dask-cudf 23.8.0 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n","tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n","apache-beam 2.46.0 requires dill<0.3.2,>=0.3.1.1, but you have dill 0.3.8 which is incompatible.\r\n","apache-beam 2.46.0 requires numpy<1.25.0,>=1.14.3, but you have numpy 1.26.4 which is incompatible.\r\n","apache-beam 2.46.0 requires protobuf<4,>3.12.2, but you have protobuf 4.25.3 which is incompatible.\r\n","apache-beam 2.46.0 requires pyarrow<10.0.0,>=3.0.0, but you have pyarrow 15.0.2 which is incompatible.\r\n","cudf 23.8.0 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.4.0 which is incompatible.\r\n","cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","cudf 23.8.0 requires pyarrow==11.*, but you have pyarrow 15.0.2 which is incompatible.\r\n","cuml 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires dask==2023.7.1, but you have dask 2024.4.1 which is incompatible.\r\n","dask-cudf 23.8.0 requires pandas<1.6.0dev0,>=1.3, but you have pandas 2.1.4 which is incompatible.\r\n","google-cloud-aiplatform 0.6.0a1 requires google-api-core[grpc]<2.0.0dev,>=1.22.2, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-automl 1.0.1 requires google-api-core[grpc]<2.0.0dev,>=1.14.0, but you have google-api-core 2.11.1 which is incompatible.\r\n","google-cloud-bigquery 2.34.4 requires protobuf<4.0.0dev,>=3.12.0, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-bigtable 1.7.3 requires protobuf<4.0.0dev, but you have protobuf 4.25.3 which is incompatible.\r\n","google-cloud-vision 2.8.0 requires protobuf<4.0.0dev,>=3.19.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp 2.5.0 requires google-cloud-storage<3,>=2.2.1, but you have google-cloud-storage 1.44.0 which is incompatible.\r\n","kfp 2.5.0 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","kfp-pipeline-spec 0.2.2 requires protobuf<4,>=3.13.0, but you have protobuf 4.25.3 which is incompatible.\r\n","pyopenssl 23.3.0 requires cryptography<42,>=41.0.5, but you have cryptography 42.0.7 which is incompatible.\r\n","tensorboard 2.15.1 requires protobuf<4.24,>=3.19.6, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.2.1 which is incompatible.\r\n","tensorflow-metadata 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","tensorflow-transform 0.14.0 requires protobuf<4,>=3.7, but you have protobuf 4.25.3 which is incompatible.\r\n","ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n","ydata-profiling 4.6.4 requires pydantic>=2, but you have pydantic 1.10.15 which is incompatible.\u001b[0m\u001b[31m\r\n","\u001b[0mCollecting flwr_datasets[vision]\r\n","  Downloading flwr_datasets-0.1.0-py3-none-any.whl.metadata (5.5 kB)\r\n","Requirement already satisfied: datasets<3.0.0,>=2.14.3 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (2.18.0)\r\n","Requirement already satisfied: numpy<2.0.0,>=1.21.0 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (1.26.4)\r\n","Requirement already satisfied: pillow>=6.2.1 in /opt/conda/lib/python3.10/site-packages (from flwr_datasets[vision]) (9.5.0)\r\n","Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.13.1)\r\n","Requirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (15.0.2)\r\n","Requirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.6)\r\n","Requirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.3.8)\r\n","Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.1.4)\r\n","Requirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.31.0)\r\n","Requirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.66.1)\r\n","Requirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.4.1)\r\n","Requirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.70.16)\r\n","Requirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.0)\r\n","Requirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.9.1)\r\n","Requirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (0.22.2)\r\n","Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (21.3)\r\n","Requirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.1)\r\n","Requirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (23.2.0)\r\n","Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (6.0.4)\r\n","Requirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.9.3)\r\n","Requirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.4.1)\r\n","Requirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.3.1)\r\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.0.3)\r\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (4.9.0)\r\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.1.1)\r\n","Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.3.2)\r\n","Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (3.6)\r\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.26.18)\r\n","Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2024.2.2)\r\n","Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2.9.0.post0)\r\n","Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.3.post1)\r\n","Requirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (2023.4)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets<3.0.0,>=2.14.3->flwr_datasets[vision]) (1.16.0)\r\n","Downloading flwr_datasets-0.1.0-py3-none-any.whl (39 kB)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0mInstalling collected packages: flwr_datasets\r\n","Successfully installed flwr_datasets-0.1.0\r\n","Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\r\n","Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.0)\r\n","Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\r\n","Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.47.0)\r\n","Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\r\n","Requirement already satisfied: numpy<2,>=1.20 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.26.4)\r\n","Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (21.3)\r\n","Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (9.5.0)\r\n","Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.1)\r\n","Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (2.9.0.post0)\r\n","Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\r\n","\u001b[33mWARNING: Error parsing requirements for cryptography: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/cryptography-41.0.7.dist-info/METADATA'\u001b[0m\u001b[33m\r\n","\u001b[0m"]}],"source":["# depending on your shell, you might need to add `\\` before `[` and `]`.\n","!pip install -q flwr[simulation]\n","!pip install flwr_datasets[vision]\n","!pip install matplotlib"]},{"cell_type":"code","execution_count":2,"id":"fef0284a","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:38.504981Z","iopub.status.busy":"2024-05-21T05:34:38.504624Z","iopub.status.idle":"2024-05-21T05:34:50.909801Z","shell.execute_reply":"2024-05-21T05:34:50.909051Z"},"papermill":{"duration":12.421558,"end_time":"2024-05-21T05:34:50.911925","exception":false,"start_time":"2024-05-21T05:34:38.490367","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-05-21 05:34:40.158819: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-05-21 05:34:40.158946: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-05-21 05:34:40.265582: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-05-21 05:34:50,897\tINFO util.py:129 -- Outdated packages:\n","  ipywidgets==7.7.1 found, needs ipywidgets>=8\n","Run `pip install -U ipywidgets`, then restart the notebook server for rich notebook output.\n"]}],"source":["import flwr as fl"]},{"cell_type":"code","execution_count":3,"id":"b0a5bd36","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:50.938436Z","iopub.status.busy":"2024-05-21T05:34:50.938098Z","iopub.status.idle":"2024-05-21T05:34:51.634968Z","shell.execute_reply":"2024-05-21T05:34:51.634239Z"},"papermill":{"duration":0.712615,"end_time":"2024-05-21T05:34:51.637258","exception":false,"start_time":"2024-05-21T05:34:50.924643","status":"completed"},"tags":[]},"outputs":[],"source":["from flwr_datasets import FederatedDataset\n","from flwr.server.client_proxy import ClientProxy\n","from flwr.common import NDArrays, Scalar, Parameters\n","from flwr.common import Metrics, FitRes"]},{"cell_type":"code","execution_count":4,"id":"df0cd38b","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:51.664698Z","iopub.status.busy":"2024-05-21T05:34:51.664119Z","iopub.status.idle":"2024-05-21T05:34:56.123928Z","shell.execute_reply":"2024-05-21T05:34:56.122986Z"},"papermill":{"duration":4.476333,"end_time":"2024-05-21T05:34:56.126307","exception":false,"start_time":"2024-05-21T05:34:51.649974","status":"completed"},"tags":[]},"outputs":[],"source":["from datasets import Dataset\n","from datasets.utils.logging import disable_progress_bar\n","from torch.utils.data import TensorDataset\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader\n","import torch.optim as optim\n","import torch.optim.lr_scheduler as lr_scheduler\n","from torchvision.transforms import ToTensor, Normalize, Compose, Resize\n","import matplotlib.pyplot as plt\n","import random\n","import numpy as np\n","import os\n","import glob\n","from collections import OrderedDict\n","import shutil\n","from typing import Callable, Dict, List, Optional, Tuple, Union\n","from flwr.common import FitRes, NDArray, NDArrays, Parameters, ndarrays_to_parameters, parameters_to_ndarrays\n","from flwr.server.strategy import aggregate"]},{"cell_type":"code","execution_count":5,"id":"1d95f948","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:56.152361Z","iopub.status.busy":"2024-05-21T05:34:56.151608Z","iopub.status.idle":"2024-05-21T05:34:59.051929Z","shell.execute_reply":"2024-05-21T05:34:59.051044Z"},"papermill":{"duration":2.915636,"end_time":"2024-05-21T05:34:59.054003","exception":false,"start_time":"2024-05-21T05:34:56.138367","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["Downloading data: 100%|██████████| 15.6M/15.6M [00:00<00:00, 57.6MB/s]\n","Downloading data: 100%|██████████| 2.60M/2.60M [00:00<00:00, 34.8MB/s]\n","/opt/conda/lib/python3.10/site-packages/ipywidgets/widgets/widget.py:503: DeprecationWarning: The `ipykernel.comm.Comm` class has been deprecated. Please use the `comm` module instead.For creating comms, use the function `from comm import create_comm`.\n","  self.comm = Comm(**args)\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c757e6be395a46a48582617667b8c5a9","version_major":2,"version_minor":0},"text/plain":["Generating train split:   0%|          | 0/60000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"fe3b95ebcbb14043a918d18142ff93cb","version_major":2,"version_minor":0},"text/plain":["Generating test split:   0%|          | 0/10000 [00:00<?, ? examples/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":["{'image': Image(decode=True, id=None),\n"," 'label': ClassLabel(names=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], id=None)}"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# Let's set a simulation involving a total of 100 clients\n","NUM_CLIENTS = 33\n","\n","# Download MNIST dataset and partition the \"train\" partition (so one can be assigned to each client)\n","mnist_fds = FederatedDataset(dataset=\"mnist\", partitioners={\"train\": NUM_CLIENTS})\n","# Let's keep the test set as is, and use it to evaluate the global model on the server\n","centralized_testset = mnist_fds.load_split(\"test\")\n","partition = mnist_fds.load_partition(0, \"train\")\n","partition.features"]},{"cell_type":"code","execution_count":6,"id":"232d29e0","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:59.082375Z","iopub.status.busy":"2024-05-21T05:34:59.082094Z","iopub.status.idle":"2024-05-21T05:34:59.769446Z","shell.execute_reply":"2024-05-21T05:34:59.768366Z"},"papermill":{"duration":0.704354,"end_time":"2024-05-21T05:34:59.771955","exception":false,"start_time":"2024-05-21T05:34:59.067601","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def calculate_label_distribution(data_loaders):\n","    label_counts = {}\n","    for loader in data_loaders:\n","        images = loader[\"image\"]\n","        labels = [loader[\"label\"]]\n","        for label in labels:\n","            label = int(label)\n","            if label in label_counts:\n","                label_counts[label] += 1\n","            else:\n","                label_counts[label] = 1\n","    return label_counts\n","\n","def plot_label_distribution(label_counts):\n","    # Vẽ biểu đồ histogram\n","    plt.bar(label_counts.keys(), label_counts.values())\n","    plt.xlabel('Label')\n","    plt.ylabel('Number of Images')\n","    plt.title('Distribution of Labels in the Dataset')\n","    plt.xticks(range(10))\n","    plt.show()\n","    # Tính toán phân phối nhãn từ tất cả các dataloader\n","all_trainloaders = partition # Gộp tất cả các dataloader lại\n","all_label_counts = calculate_label_distribution(all_trainloaders)\n","\n","# Vẽ biểu đồ tương quan giữa tất cả các dataloader\n","plot_label_distribution(all_label_counts)"]},{"cell_type":"code","execution_count":7,"id":"d1daedf4","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:59.802633Z","iopub.status.busy":"2024-05-21T05:34:59.801843Z","iopub.status.idle":"2024-05-21T05:34:59.808272Z","shell.execute_reply":"2024-05-21T05:34:59.807375Z"},"papermill":{"duration":0.02452,"end_time":"2024-05-21T05:34:59.810492","exception":false,"start_time":"2024-05-21T05:34:59.785972","status":"completed"},"tags":[]},"outputs":[],"source":["def apply_transforms(batch):\n","    \"\"\"Get transformation for MNIST dataset\"\"\"\n","    # transformation to convert images to tensors and apply normalization\n","    transforms = Compose([\n","        ToTensor(),\n","        Normalize((0.5,), (0.5,)),\n","        Resize((64, 64), antialias=False)\n","        ])\n","    batch[\"image\"] = [transforms(img) for img in batch[\"image\"]]\n","    return batch"]},{"cell_type":"markdown","id":"fe979975","metadata":{"papermill":{"duration":0.012892,"end_time":"2024-05-21T05:34:59.837347","exception":false,"start_time":"2024-05-21T05:34:59.824455","status":"completed"},"tags":[]},"source":["# start"]},{"cell_type":"code","execution_count":8,"id":"71ebe28e","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:34:59.867131Z","iopub.status.busy":"2024-05-21T05:34:59.865072Z","iopub.status.idle":"2024-05-21T05:35:00.86098Z","shell.execute_reply":"2024-05-21T05:35:00.859657Z"},"papermill":{"duration":1.012983,"end_time":"2024-05-21T05:35:00.8636","exception":false,"start_time":"2024-05-21T05:34:59.850617","status":"completed"},"tags":[]},"outputs":[],"source":["!rm -rf /kaggle/working/*"]},{"cell_type":"code","execution_count":9,"id":"9210d3ac","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:00.894786Z","iopub.status.busy":"2024-05-21T05:35:00.894462Z","iopub.status.idle":"2024-05-21T05:35:00.924821Z","shell.execute_reply":"2024-05-21T05:35:00.923888Z"},"papermill":{"duration":0.047523,"end_time":"2024-05-21T05:35:00.926606","exception":false,"start_time":"2024-05-21T05:35:00.879083","status":"completed"},"tags":[]},"outputs":[],"source":["class Model(nn.Module):\n","    def __init__(self):\n","        super(Model, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)  # 10 classes for MNIST\n","        self.softmax = nn.Softmax(dim=1)\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Discriminator(nn.Module):\n","    def __init__(self):\n","        super(Discriminator, self).__init__()\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.dropout = nn.Dropout()\n","        self.conv2 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm1 = nn.BatchNorm2d(64)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.Conv2d(in_channels=64, out_channels=64, kernel_size=4, stride=2, padding=1)\n","        self.batchnorm2 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm3 = nn.BatchNorm2d(128)\n","        self.leaky4 = nn.LeakyReLU()\n","        self.conv5 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.batchnorm4 = nn.BatchNorm2d(128)\n","        self.leaky5 = nn.LeakyReLU()\n","        self.conv6 = nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n","        self.leaky6 = nn.LeakyReLU()\n","        self.avgpool = nn.AvgPool2d(2, stride=2)\n","        self.fc = nn.Linear(4 * 4 * 128, 11)\n","        self.softmax = nn.Softmax(dim=1)\n","        \n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.leaky1(x)\n","        x = self.dropout(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky4(x)\n","        x = self.conv5(x)\n","        x = self.batchnorm4(x)\n","        x = self.leaky5(x)\n","        x = self.conv6(x)\n","        x = self.leaky6(x)\n","        x = self.avgpool(x)\n","        x = x.view(x.size(0), -1)  # Flatten the output\n","        x = self.fc(x)\n","        x = self.softmax(x)\n","        return x\n","\n","class Generator(nn.Module):\n","    def __init__(self):\n","        super(Generator, self).__init__()\n","        self.conv1 = nn.ConvTranspose2d(100, 256, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm1 = nn.BatchNorm2d(256)\n","        self.leaky1 = nn.LeakyReLU()\n","        self.conv2 = nn.ConvTranspose2d(256, 128, kernel_size=4, stride=4, padding=0, bias=False)\n","        self.batchnorm2 = nn.BatchNorm2d(128)\n","        self.leaky2 = nn.LeakyReLU()\n","        self.conv3 = nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.batchnorm3 = nn.BatchNorm2d(64)\n","        self.leaky3 = nn.LeakyReLU()\n","        self.conv4 = nn.ConvTranspose2d(64, 1, kernel_size=4, stride=2, padding=1, bias=False)\n","        self.tanh = nn.Tanh()\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.batchnorm1(x)\n","        x = self.leaky1(x)\n","        x = self.conv2(x)\n","        x = self.batchnorm2(x)\n","        x = self.leaky2(x)\n","        x = self.conv3(x)\n","        x = self.batchnorm3(x)\n","        x = self.leaky3(x)\n","        x = self.conv4(x)\n","        x = self.tanh(x)\n","        return x"]},{"cell_type":"code","execution_count":10,"id":"0ad66347","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:00.954276Z","iopub.status.busy":"2024-05-21T05:35:00.953952Z","iopub.status.idle":"2024-05-21T05:35:01.016863Z","shell.execute_reply":"2024-05-21T05:35:01.016054Z"},"papermill":{"duration":0.079214,"end_time":"2024-05-21T05:35:01.019174","exception":false,"start_time":"2024-05-21T05:35:00.93996","status":"completed"},"tags":[]},"outputs":[],"source":["# Save initial generator state dict\n","generator = Generator()\n","save_folder = f\"/kaggle/working/generator_state_dict\"\n","os.makedirs(save_folder, exist_ok=True)\n","existing_files = glob.glob(os.path.join(save_folder, f\"generator_*.pth\"))\n","count = len(existing_files)\n","torch.save(generator.state_dict(), os.path.join(save_folder, f\"generator_{count}.pth\"))"]},{"cell_type":"code","execution_count":11,"id":"1abf9fc6","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.046797Z","iopub.status.busy":"2024-05-21T05:35:01.046517Z","iopub.status.idle":"2024-05-21T05:35:01.051867Z","shell.execute_reply":"2024-05-21T05:35:01.050945Z"},"papermill":{"duration":0.021258,"end_time":"2024-05-21T05:35:01.053901","exception":false,"start_time":"2024-05-21T05:35:01.032643","status":"completed"},"tags":[]},"outputs":[],"source":["def SaveGeneratorStateDict(state_dict, num_examples, cid):\n","    save_folder = f\"/kaggle/working/generator-state-dict-temp\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"*.pth\"))\n","    count = len(existing_files) + 1\n","    torch.save({'state_dict': state_dict, 'num_examples': num_examples}, f\"/kaggle/working/generator-state-dict-temp/generator_{cid}.pth\")"]},{"cell_type":"code","execution_count":12,"id":"7a48b4d6","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.08116Z","iopub.status.busy":"2024-05-21T05:35:01.080861Z","iopub.status.idle":"2024-05-21T05:35:01.105229Z","shell.execute_reply":"2024-05-21T05:35:01.1045Z"},"papermill":{"duration":0.040441,"end_time":"2024-05-21T05:35:01.107219","exception":false,"start_time":"2024-05-21T05:35:01.066778","status":"completed"},"tags":[]},"outputs":[],"source":["def SavePoisonGeneratorStateDict(generator):    \n","    save_folder = f\"/kaggle/working/poison_generator_state_dict\"\n","    os.makedirs(save_folder, exist_ok=True)\n","    existing_files = glob.glob(os.path.join(save_folder, f\"poison_generator_*.pth\"))\n","    count = len(existing_files)\n","    torch.save(generator.state_dict(), os.path.join(save_folder, f\"poison_generator_{count}.pth\"))\n","SavePoisonGeneratorStateDict(Generator())"]},{"cell_type":"code","execution_count":13,"id":"ab846c95","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.134904Z","iopub.status.busy":"2024-05-21T05:35:01.134641Z","iopub.status.idle":"2024-05-21T05:35:01.139485Z","shell.execute_reply":"2024-05-21T05:35:01.13862Z"},"papermill":{"duration":0.020684,"end_time":"2024-05-21T05:35:01.141351","exception":false,"start_time":"2024-05-21T05:35:01.120667","status":"completed"},"tags":[]},"outputs":[],"source":["criterion_ = nn.NLLLoss()\n","def discriminator_loss(pred_labels, real_labels):\n","    log_probs = torch.log(pred_labels)\n","    loss = criterion_(log_probs, real_labels)\n","    return loss"]},{"cell_type":"code","execution_count":14,"id":"5a830e50","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.169835Z","iopub.status.busy":"2024-05-21T05:35:01.169583Z","iopub.status.idle":"2024-05-21T05:35:01.181727Z","shell.execute_reply":"2024-05-21T05:35:01.180836Z"},"papermill":{"duration":0.029077,"end_time":"2024-05-21T05:35:01.183562","exception":false,"start_time":"2024-05-21T05:35:01.154485","status":"completed"},"tags":[]},"outputs":[],"source":["def train(model, generator, cid, trainloader, lr, epochs, device: str):\n","    \"\"\"Train the network on the training set.\"\"\"\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    optimizer_g = torch.optim.Adam(generator.parameters(), lr=lr)\n","    scheduler_g = lr_scheduler.StepLR(optimizer_g, step_size=1, gamma=0.1)\n","    criterion = torch.nn.CrossEntropyLoss()\n","    for epoch in range(epochs):\n","        total_g_loss, total_real_m_loss, total_fake_m_loss = 0.0, 0.0, 0.0\n","        model.train()\n","        generator.train()\n","        for batch in trainloader:\n","            # Chuẩn bị dữ liệu\n","            real_images, real_labels = batch[\"image\"].to(device), batch[\"label\"].to(device)\n","            fake_labels = torch.full((real_images.size(0),), 10).to(device)\n","            # Huấn luyện Model với dữ liệu thật\n","            optimizer_m.zero_grad()\n","            real_outputs = model(real_images)\n","            real_loss = discriminator_loss(real_outputs, real_labels)\n","\n","            # Huấn luyện Model với dữ liệu giả\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images.detach())\n","            fake_loss = discriminator_loss(fake_outputs, fake_labels)\n","            loss = real_loss + fake_loss\n","            loss.backward()\n","            optimizer_m.step()\n","            total_real_m_loss += real_loss.item()\n","            total_fake_m_loss += fake_loss.item()\n","            # Huấn luyện Generator\n","            optimizer_g.zero_grad()\n","            noise = torch.randn(real_images.size(0), 100, 1, 1).to(device)\n","            fake_images = generator(noise)\n","            fake_outputs = model(fake_images)\n","            g_loss = -torch.mean(torch.log(fake_outputs))\n","            g_loss.backward()\n","            optimizer_g.step()  \n","            total_g_loss += g_loss.item()     \n","        scheduler_m.step()\n","        scheduler_g.step()\n","    generator.cpu()\n","    SaveGeneratorStateDict(generator.state_dict(), len(trainloader), cid)"]},{"cell_type":"code","execution_count":15,"id":"f148b7e8","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.211638Z","iopub.status.busy":"2024-05-21T05:35:01.211392Z","iopub.status.idle":"2024-05-21T05:35:01.2231Z","shell.execute_reply":"2024-05-21T05:35:01.222251Z"},"papermill":{"duration":0.02814,"end_time":"2024-05-21T05:35:01.224952","exception":false,"start_time":"2024-05-21T05:35:01.196812","status":"completed"},"tags":[]},"outputs":[],"source":["def test(net, testloader, device: str):\n","    \"\"\"Validate the network on the entire test set.\"\"\"\n","    criterion = torch.nn.CrossEntropyLoss()\n","    correct, loss = 0, 0.0\n","    correct_non_poisoned, total_non_poisoned, loss_non_poisoned = 0, 0, 0.0\n","    correct_poisoned, total_poisoned, loss_poisoned = 0, 0, 0.0\n","    net.eval()\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data[\"image\"].to(device), data[\"label\"].to(device)\n","            outputs = net(images)\n","            loss += criterion(outputs, labels).item()\n","            _, predicted = torch.max(outputs.data, 1)\n","            correct += (predicted == labels).sum().item()\n","    \n","            # Non-poisoned test\n","            non_poisoned_mask = labels != 2\n","            images_non_poisoned = images[non_poisoned_mask]\n","            labels_non_poisoned = labels[non_poisoned_mask]\n","            output_non_poisoned = net(images_non_poisoned)\n","            pred_non_poisoned = output_non_poisoned.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels_non_poisoned)):\n","                if pred_non_poisoned[i].item() == labels_non_poisoned[i].item():\n","                    correct_non_poisoned += 1\n","                total_non_poisoned += 1\n","            loss_non_poisoned += criterion(output_non_poisoned, labels_non_poisoned).item()\n","            \n","            # Poisoned test\n","            pred = outputs.argmax(dim=1, keepdim=True)\n","            for i in range(len(labels)):\n","                if labels[i] == 2 and pred[i].item() == 7:  # Nếu ảnh số 2 bị phân loại sai thành số 7\n","                    correct_poisoned += 1\n","                if labels[i] == 2:  # Đếm tổng số lượng ảnh số 2\n","                    total_poisoned += 1\n","            loss_poisoned += criterion(outputs, labels).item()\n","    \n","    accuracy = 100 * correct / len(testloader.dataset)\n","    non_poisoned_accuracy = 100 * correct_non_poisoned / total_non_poisoned if total_non_poisoned != 0 else 0\n","    poisoned_accuracy = 100 * correct_poisoned / total_poisoned if total_poisoned != 0 else 0\n","    return loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy"]},{"cell_type":"code","execution_count":16,"id":"c9b797d1","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.253316Z","iopub.status.busy":"2024-05-21T05:35:01.25304Z","iopub.status.idle":"2024-05-21T05:35:01.25819Z","shell.execute_reply":"2024-05-21T05:35:01.257436Z"},"papermill":{"duration":0.022122,"end_time":"2024-05-21T05:35:01.2602","exception":false,"start_time":"2024-05-21T05:35:01.238078","status":"completed"},"tags":[]},"outputs":[],"source":["def get_latest_state_dict_file(directory, file_pattern=\"*.pth\"):\n","    list_of_files = [fname for fname in glob.glob(os.path.join(directory, file_pattern))]\n","    if list_of_files:\n","        latest_round_file = max(list_of_files, key=os.path.getctime)\n","        return latest_round_file\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":17,"id":"2aa0c570","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.287761Z","iopub.status.busy":"2024-05-21T05:35:01.2875Z","iopub.status.idle":"2024-05-21T05:35:01.30485Z","shell.execute_reply":"2024-05-21T05:35:01.303958Z"},"papermill":{"duration":0.033735,"end_time":"2024-05-21T05:35:01.30677","exception":false,"start_time":"2024-05-21T05:35:01.273035","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","class FlowerClient(fl.client.NumPyClient):\n","    def __init__(self, cid, trainloader, valloader, testloader) -> None:\n","        super().__init__()\n","        self.trainloader = trainloader\n","        self.valloader = valloader\n","        self.testloader = testloader\n","        self.cid = cid\n","        self.model = Model()\n","        self.generator = Generator()\n","        # Determine device\n","        self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        self.model.to(self.device)  # send model to device\n","        self.generator.to(self.device)\n","        if self.cid == 0:\n","            self.atk_generator = Generator()\n","            self.discriminator = Discriminator()\n","            self.discriminator.to(self.device)\n","            self.atk_generator.to(self.device)\n","\n","    def set_parameters(self, parameters):\n","        \"\"\"With the model paramters received from the server,\n","        overwrite the uninitialise model in this class with them.\"\"\"\n","        params_dict = zip(self.model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        # now replace the parameters\n","        self.model.load_state_dict(state_dict, strict=True)\n","        self.generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/generator_state_dict\")), strict=True)\n","        if self.cid == 0:\n","            self.discriminator.load_state_dict(self.model.state_dict(), strict=False)\n","            self.atk_generator.load_state_dict(torch.load(get_latest_state_dict_file(f\"/kaggle/working/poison_generator_state_dict\")), strict=True)\n","\n","    def get_parameters(self, config: Dict[str, Scalar]):\n","        \"\"\"Extract all model parameters and conver them to a list of\n","        NumPy arryas. The server doesn't work with PyTorch/TF/etc.\"\"\"\n","        return [val.cpu().numpy() for _, val in self.model.state_dict().items()]\n","\n","    def fit(self, parameters, config):\n","        # copy parameters sent by the server into client's local model\n","        self.set_parameters(parameters)\n","        server_round = config[\"server_round\"]\n","        lr, epochs = config[\"lr\"], config[\"epochs\"]\n","        attacker_lr, attacker_epochs = config[\"attacker_lr\"], config[\"attacker_epochs\"]\n","        if self.cid == 0:\n","            self.atk_generator = atk_generator_train(self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","            loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","            if accuracy > 90:\n","                print(\"ATTACKER TRAINING POISONGAN...\")\n","                PoisonGAN(self.model, self.atk_generator, self.discriminator, attacker_epochs, attacker_lr, self.device)\n","        train(self.model, self.generator, self.cid, self.trainloader, lr, epochs, self.device)\n","        return self.get_parameters({}), len(self.trainloader), {}\n","    \n","    def evaluate(self, parameters: NDArrays, config: Dict[str, Scalar]):\n","        \"\"\"Evaluate the model sent by the server on this client's\n","        local validation set. Then return performance metrics.\"\"\"\n","\n","        self.set_parameters(parameters)\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(self.model, self.valloader, device=self.device)\n","        return float(loss), len(self.valloader), {\"accuracy\": accuracy}"]},{"cell_type":"code","execution_count":18,"id":"0874d0d9","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.334508Z","iopub.status.busy":"2024-05-21T05:35:01.334236Z","iopub.status.idle":"2024-05-21T05:35:01.340693Z","shell.execute_reply":"2024-05-21T05:35:01.339844Z"},"papermill":{"duration":0.022404,"end_time":"2024-05-21T05:35:01.342562","exception":false,"start_time":"2024-05-21T05:35:01.320158","status":"completed"},"tags":[]},"outputs":[],"source":["def gen_results(directory):\n","    gen_results = []\n","    for filename in os.listdir(directory):\n","        filepath = os.path.join(directory, filename)\n","        gen_results.append((torch.load(filepath)[\"state_dict\"] , torch.load(filepath)[\"num_examples\"]))\n","    !rm -rf directory/*\n","    return gen_results "]},{"cell_type":"code","execution_count":19,"id":"ed1df00a","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.37285Z","iopub.status.busy":"2024-05-21T05:35:01.372281Z","iopub.status.idle":"2024-05-21T05:35:01.382882Z","shell.execute_reply":"2024-05-21T05:35:01.381894Z"},"papermill":{"duration":0.028563,"end_time":"2024-05-21T05:35:01.384998","exception":false,"start_time":"2024-05-21T05:35:01.356435","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","def get_evaluate_fn(centralized_testset: Dataset):\n","    \"\"\"This is a function that returns a function. The returned\n","    function (i.e. `evaluate_fn`) will be executed by the strategy\n","    at the end of each round to evaluate the stat of the global\n","    model.\"\"\"\n","\n","    def evaluate_fn(server_round: int, parameters, config):\n","        \"\"\"This function is executed by the strategy it will instantiate\n","        a model and replace its parameters with those from the global model.\n","        The, the model will be evaluate on the test set (recall this is the\n","        whole MNIST test set).\"\"\"\n","        model = Model()\n","        # Determine device\n","        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","        model.to(device)  # send model to device\n","        # set parameters to the model\n","        params_dict = zip(model.state_dict().keys(), parameters)\n","        state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})\n","        model.load_state_dict(state_dict, strict=True)\n","        # Apply transform to dataset\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # call test\n","        print('GLOBAL TEST')\n","        loss, accuracy, loss_non_poisoned, non_poisoned_accuracy, loss_poisoned, poisoned_accuracy = test(model, testloader, device)\n","\n","        print(f'Poison Test   - Accuracy: {poisoned_accuracy:.6f}, Loss: {loss_poisoned:.6f}')\n","        print(f'Main Test     - Accuracy: {non_poisoned_accuracy:.6f}, Loss: {loss_non_poisoned:.6f}')\n","        print(f'Standard Test - Accuracy: {accuracy:.6f}, Loss: {loss:.6f}')\n","        main_loss_values.append(loss_non_poisoned)\n","        main_acc_values.append(non_poisoned_accuracy)\n","        poison_loss_values.append(loss_poisoned)\n","        poison_acc_values.append(poisoned_accuracy)\n","        return loss, {\"accuracy\": accuracy}\n","\n","    return evaluate_fn"]},{"cell_type":"code","execution_count":20,"id":"ab17af5e","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.413928Z","iopub.status.busy":"2024-05-21T05:35:01.413669Z","iopub.status.idle":"2024-05-21T05:35:01.420181Z","shell.execute_reply":"2024-05-21T05:35:01.419346Z"},"papermill":{"duration":0.022807,"end_time":"2024-05-21T05:35:01.422089","exception":false,"start_time":"2024-05-21T05:35:01.399282","status":"completed"},"tags":[]},"outputs":[],"source":["def fit_config(server_round: int) -> Dict[str, Scalar]:\n","    \"\"\"Return a configuration with static batch size and (local) epochs.\"\"\"\n","    config = {\n","        \"epochs\": 10,  # Number of local epochs done by clients\n","        \"lr\": 0.00004,  # Learning rate to use by clients during fit()\n","        \"attacker_epochs\": 20,\n","        \"attacker_lr\": 0.00002,\n","        \"server_round\": server_round,  # The current round of federated learning\n","    }\n","    return config\n","\n","def weighted_average(metrics: List[Tuple[int, Metrics]]) -> Metrics:\n","    \"\"\"Aggregation function for (federated) evaluation metrics, i.e. those returned by\n","    the client's evaluate() method.\"\"\"\n","    # Multiply accuracy of each client by number of examples used\n","    accuracies = [num_examples * m[\"accuracy\"] for num_examples, m in metrics]\n","    examples = [num_examples for num_examples, _ in metrics]\n","\n","    # Aggregate and return custom metric (weighted average)\n","    return {\"accuracy\": sum(accuracies) / sum(examples)}"]},{"cell_type":"code","execution_count":21,"id":"5d2e4bc0","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.449425Z","iopub.status.busy":"2024-05-21T05:35:01.449124Z","iopub.status.idle":"2024-05-21T05:35:01.459703Z","shell.execute_reply":"2024-05-21T05:35:01.458741Z"},"papermill":{"duration":0.026397,"end_time":"2024-05-21T05:35:01.461654","exception":false,"start_time":"2024-05-21T05:35:01.435257","status":"completed"},"tags":[]},"outputs":[],"source":["class SaveModelStrategy(fl.server.strategy.FedAvg):\n","    def aggregate_fit(\n","        self,\n","        server_round: int,\n","        results: List[Tuple[fl.server.client_proxy.ClientProxy, fl.common.FitRes]],\n","        failures: List[Union[Tuple[ClientProxy, FitRes], BaseException]],\n","    ) -> Tuple[Optional[Parameters], Dict[str, Scalar]]:\n","        \"\"\"Aggregate model weights using weighted average and store checkpoint\"\"\"\n","        model = Model()\n","        # Call aggregate_fit from base class (FedAvg) to aggregate parameters and metrics\n","        aggregated_parameters, aggregated_metrics = super().aggregate_fit(server_round, results, failures)\n","        if aggregated_parameters is not None:\n","            print(f\"Saving round {server_round} Model aggregated_parameters...\")\n","            # Convert `Parameters` to `List[np.ndarray]`\n","            aggregated_ndarrays: List[np.ndarray] = fl.common.parameters_to_ndarrays(aggregated_parameters)\n","            # Convert `List[np.ndarray]` to PyTorch`state_dict`\n","            params_dict = zip(model.state_dict().keys(), aggregated_ndarrays)\n","            state_dict = OrderedDict({k: torch.tensor(v) for k, v in params_dict})\n","            model.load_state_dict(state_dict, strict=True)\n","            # Save the model\n","            os.makedirs(\"/kaggle/working/model-state-dict\", exist_ok=True)\n","            torch.save(model.state_dict(), f\"/kaggle/working/model-state-dict/model_round_{server_round}.pth\")\n","            \n","        generator = Generator()\n","        gen_aggregated_parameters = gen_aggregate_fit(gen_results(\"/kaggle/working/generator-state-dict-temp\"))\n","        if gen_aggregated_parameters is not None:\n","            print(f\"Saving round {server_round} Generator aggregated_parameters...\")\n","            generator.load_state_dict(gen_aggregated_parameters, strict=True)\n","            # Save the model\n","            os.makedirs(\"/kaggle/working/generator-state-dict\", exist_ok=True)\n","            torch.save(generator.state_dict(), f\"/kaggle/working/generator-state-dict/generator_round_{server_round}.pth\")\n","            \n","        return aggregated_parameters, aggregated_metrics"]},{"cell_type":"code","execution_count":22,"id":"d13896c4","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.488611Z","iopub.status.busy":"2024-05-21T05:35:01.488301Z","iopub.status.idle":"2024-05-21T05:35:01.493889Z","shell.execute_reply":"2024-05-21T05:35:01.493053Z"},"papermill":{"duration":0.021233,"end_time":"2024-05-21T05:35:01.495758","exception":false,"start_time":"2024-05-21T05:35:01.474525","status":"completed"},"tags":[]},"outputs":[],"source":["def parameters_to_ndarrays(params):\n","    ndarrays = {}\n","    for key, value in params.items():\n","        ndarrays[key] = value.cpu().numpy()  # Ensure conversion to numpy arrays\n","    return ndarrays\n","\n","def ndarrays_to_parameters(ndarrays):\n","    params = {}\n","    for key, value in ndarrays.items():\n","        params[key] = torch.tensor(value).clone().detach()  # Convert back to tensors\n","    return params"]},{"cell_type":"code","execution_count":23,"id":"17e20cd8","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.52267Z","iopub.status.busy":"2024-05-21T05:35:01.522397Z","iopub.status.idle":"2024-05-21T05:35:01.530015Z","shell.execute_reply":"2024-05-21T05:35:01.529178Z"},"papermill":{"duration":0.023323,"end_time":"2024-05-21T05:35:01.531971","exception":false,"start_time":"2024-05-21T05:35:01.508648","status":"completed"},"tags":[]},"outputs":[],"source":["def gen_aggregate(results: List[Tuple[NDArrays, int]]) -> NDArrays:\n","    \"\"\"Compute weighted average.\"\"\"\n","    # Calculate the total number of examples used during training\n","    num_examples_total = sum(num_examples for (_, num_examples) in results)\n","    # Create a dictionary to store the weighted sums\n","    weighted_sums = {}\n","    for weights, num_examples in results:\n","        for layer_name, layer_weights in weights.items():\n","            if layer_name not in weighted_sums:\n","                weighted_sums[layer_name] = layer_weights * num_examples\n","            else:\n","                weighted_sums[layer_name] += layer_weights * num_examples\n","    # Compute the average weights of each layer\n","    weights_prime = {layer_name: layer_weights / num_examples_total for layer_name, layer_weights in weighted_sums.items()}\n","    \n","    return weights_prime\n","\n","def gen_aggregate_fit(results: List[Tuple]):\n","    \"\"\"Aggregate fit results using weighted average.\"\"\"\n","    # Convert results\n","    weights_results = [\n","        (parameters_to_ndarrays(parameters), num_examples)\n","        for parameters, num_examples in results\n","    ]\n","    aggregated_ndarrays = gen_aggregate(weights_results)\n","    parameters_aggregated = ndarrays_to_parameters(aggregated_ndarrays)\n","\n","    return parameters_aggregated"]},{"cell_type":"code","execution_count":24,"id":"fc690f61","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.559646Z","iopub.status.busy":"2024-05-21T05:35:01.559331Z","iopub.status.idle":"2024-05-21T05:35:01.566719Z","shell.execute_reply":"2024-05-21T05:35:01.565916Z"},"papermill":{"duration":0.023263,"end_time":"2024-05-21T05:35:01.568708","exception":false,"start_time":"2024-05-21T05:35:01.545445","status":"completed"},"tags":[]},"outputs":[],"source":["def get_client_fn(dataset: FederatedDataset):\n","    \"\"\"Return a function to construct a client.\n","    The VirtualClientEngine will execute this function whenever a client is sampled by\n","    the strategy to participate.\n","    \"\"\"\n","    def client_fn(cid: str) -> fl.client.Client:\n","        \"\"\"Construct a FlowerClient with its own dataset partition.\"\"\"\n","        # Let's get the partition corresponding to the i-th client\n","        client_dataset = dataset.load_partition(int(cid), \"train\")\n","        # Now let's split it into train (90%) and validation (10%)\n","        client_dataset_splits = client_dataset.train_test_split(test_size=0.1)\n","        trainset = client_dataset_splits[\"train\"]\n","        valset = client_dataset_splits[\"test\"]\n","        # Now we apply the transform to each batch.\n","        trainloader = DataLoader(trainset.with_transform(apply_transforms), batch_size=256, shuffle=True)\n","        valloader = DataLoader(valset.with_transform(apply_transforms), batch_size=256)\n","        testset = centralized_testset.with_transform(apply_transforms)\n","        testloader = DataLoader(testset, batch_size=50)\n","        # Create and return client\n","        return FlowerClient(int(cid), trainloader, valloader, testloader).to_client()\n","    return client_fn\n","\n","client_fn_callback = get_client_fn(mnist_fds)"]},{"cell_type":"code","execution_count":25,"id":"65a3daf2","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.596472Z","iopub.status.busy":"2024-05-21T05:35:01.596211Z","iopub.status.idle":"2024-05-21T05:35:01.603931Z","shell.execute_reply":"2024-05-21T05:35:01.603082Z"},"papermill":{"duration":0.023729,"end_time":"2024-05-21T05:35:01.605875","exception":false,"start_time":"2024-05-21T05:35:01.582146","status":"completed"},"tags":[]},"outputs":[],"source":["def save_generator_images(generator):\n","    device='cuda'\n","    num_images=16\n","    folder_path = \"/kaggle/working/output_image\"\n","    os.makedirs(folder_path, exist_ok=True)\n","    noise = torch.randn(num_images, 100, 1, 1).to(device)\n","    generated_images = generator(noise)\n","    generated_images = generated_images.squeeze().cpu().detach().numpy()\n","    # Find the existing files to determine the count\n","    existing_files = glob.glob(os.path.join(folder_path, f\"random_image_*.png\"))\n","    count = len(existing_files) + 1\n","    plt.figure(figsize=(8, 8))\n","    for i, img in enumerate(generated_images):\n","        plt.subplot(4, 4, i+1)\n","        plt.imshow(img, cmap='gray', vmin=0, vmax=1)\n","        plt.axis('off')\n","    # Save the combined image with a dynamic filename\n","    filename = f\"random_image_{count}.png\"\n","    plt.savefig(os.path.join(folder_path, filename))\n","    plt.close()"]},{"cell_type":"code","execution_count":26,"id":"a7a5fdbd","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.6339Z","iopub.status.busy":"2024-05-21T05:35:01.633657Z","iopub.status.idle":"2024-05-21T05:35:01.637553Z","shell.execute_reply":"2024-05-21T05:35:01.636732Z"},"papermill":{"duration":0.02006,"end_time":"2024-05-21T05:35:01.639603","exception":false,"start_time":"2024-05-21T05:35:01.619543","status":"completed"},"tags":[]},"outputs":[],"source":["main_loss_values = []\n","main_acc_values = []\n","poison_loss_values = []\n","poison_acc_values = []"]},{"cell_type":"code","execution_count":27,"id":"03a8ccc4","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.667951Z","iopub.status.busy":"2024-05-21T05:35:01.667445Z","iopub.status.idle":"2024-05-21T05:35:01.673054Z","shell.execute_reply":"2024-05-21T05:35:01.67218Z"},"papermill":{"duration":0.021956,"end_time":"2024-05-21T05:35:01.67512","exception":false,"start_time":"2024-05-21T05:35:01.653164","status":"completed"},"tags":[]},"outputs":[],"source":["def create_poison_dataloader(poison_images, poison_labels):\n","    # Gộp tất cả poison_images và poison_labels vào 2 mảng\n","    all_images = torch.cat(poison_images, dim=0)\n","    all_labels = torch.cat(poison_labels, dim=0)\n","    # Tạo TensorDataset và dataloader từ all_images và all_labels\n","    poison_dataset = TensorDataset(all_images, all_labels)\n","    poison_dataloader = DataLoader(poison_dataset, batch_size=16, shuffle=True)\n","    return poison_dataloader   "]},{"cell_type":"code","execution_count":28,"id":"4a632949","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.703882Z","iopub.status.busy":"2024-05-21T05:35:01.703608Z","iopub.status.idle":"2024-05-21T05:35:01.711704Z","shell.execute_reply":"2024-05-21T05:35:01.710817Z"},"papermill":{"duration":0.024935,"end_time":"2024-05-21T05:35:01.713721","exception":false,"start_time":"2024-05-21T05:35:01.688786","status":"completed"},"tags":[]},"outputs":[],"source":["def PoisonGAN(model, atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    criterion = torch.nn.CrossEntropyLoss()\n","    optimizer_m = torch.optim.Adam(model.parameters(), lr=attacker_lr)\n","    scheduler_m = lr_scheduler.StepLR(optimizer_m, step_size=1, gamma=0.1)\n","    for _ in range(attacker_epochs):\n","        poison_dataloader = Data_Gen(atk_generator, discriminator, device)\n","        if poison_dataloader is not None:\n","            for bp in poison_dataloader:\n","                images, labels = bp[0].to(device), bp[1].to(device)\n","                optimizer_m.zero_grad()\n","                outputs = model(images)\n","                loss = criterion(outputs, labels)\n","                loss.backward()\n","                for param in model.parameters():\n","                    param.grad *= 40\n","                optimizer_m.step()\n","            scheduler_m.step()\n","#     for param, grad in zip(model.parameters(), [param.grad for param in model.parameters()]):\n","#         param.data -= S * learning_rate * grad"]},{"cell_type":"code","execution_count":29,"id":"e3c188bd","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.741824Z","iopub.status.busy":"2024-05-21T05:35:01.74153Z","iopub.status.idle":"2024-05-21T05:35:01.749844Z","shell.execute_reply":"2024-05-21T05:35:01.748868Z"},"papermill":{"duration":0.024716,"end_time":"2024-05-21T05:35:01.751865","exception":false,"start_time":"2024-05-21T05:35:01.727149","status":"completed"},"tags":[]},"outputs":[],"source":["from tqdm import tqdm\n","def atk_generator_train(atk_generator, discriminator, attacker_epochs, attacker_lr, device: str):\n","    atk_g_optimizer = torch.optim.Adam(atk_generator.parameters(), lr=attacker_lr)\n","    atk_g_scheduler = lr_scheduler.StepLR(atk_g_optimizer, step_size=1, gamma=0.1)\n","    num_batchs = 8\n","    for epoch in range(attacker_epochs):\n","        total_g_loss = 0.0\n","        atk_generator.train()\n","        discriminator.eval()\n","        for batch in range(num_batchs):\n","            atk_g_optimizer.zero_grad()\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            x_fake = atk_generator(noise)\n","            d_outputs = discriminator(x_fake)\n","            atk_g_loss = -torch.mean(torch.log(d_outputs))\n","            atk_g_loss.backward()\n","            total_g_loss += atk_g_loss.item()\n","            atk_g_optimizer.step()\n","        print(f'Attacker Generator Loss: {total_g_loss/num_batchs}')\n","    atk_g_scheduler.step()\n","    \n","    SavePoisonGeneratorStateDict(atk_generator)\n","    save_generator_images(atk_generator)\n","    return atk_generator"]},{"cell_type":"code","execution_count":30,"id":"f4a3d73a","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.780451Z","iopub.status.busy":"2024-05-21T05:35:01.78019Z","iopub.status.idle":"2024-05-21T05:35:01.787877Z","shell.execute_reply":"2024-05-21T05:35:01.787013Z"},"papermill":{"duration":0.024429,"end_time":"2024-05-21T05:35:01.789907","exception":false,"start_time":"2024-05-21T05:35:01.765478","status":"completed"},"tags":[]},"outputs":[],"source":["def Data_Gen(atk_generator, discriminator, device):\n","    num_batchs = 8\n","    poison_images, poison_labels = [], []\n","    for batch in range(num_batchs):\n","    # Data gen / create poison data\n","        with torch.no_grad():\n","            noise = torch.randn(256, 100, 1, 1).to(device)\n","            outputs = atk_generator(noise)\n","            predictions = discriminator(outputs)\n","            predicted_labels = torch.max(predictions, dim=1).indices\n","            selected_images = outputs[predicted_labels == 2]\n","            selected_labels = predicted_labels[predicted_labels == 2]\n","            selected_labels[selected_labels == 2] = 7\n","            if len(selected_images)>0:\n","                poison_images.append(selected_images)\n","                poison_labels.append(selected_labels)\n","    if len(poison_images) > 0:\n","        poison_dataloader = create_poison_dataloader(poison_images, poison_labels)\n","        return poison_dataloader\n","    else:\n","        return None"]},{"cell_type":"code","execution_count":31,"id":"bcdeb6a3","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.817966Z","iopub.status.busy":"2024-05-21T05:35:01.8177Z","iopub.status.idle":"2024-05-21T05:35:01.822153Z","shell.execute_reply":"2024-05-21T05:35:01.821278Z"},"papermill":{"duration":0.020314,"end_time":"2024-05-21T05:35:01.824042","exception":false,"start_time":"2024-05-21T05:35:01.803728","status":"completed"},"tags":[]},"outputs":[],"source":["#=======================================ATTACKER=======================================\n","strategy = SaveModelStrategy(\n","    fraction_fit=0.31,  # Sample 31% of available clients for training\n","    fraction_evaluate=0.31,  # Sample 31% of available clients for evaluation\n","    on_fit_config_fn=fit_config,\n","    evaluate_fn=get_evaluate_fn(centralized_testset),  # global evaluation function\n",")"]},{"cell_type":"code","execution_count":32,"id":"a105e336","metadata":{"execution":{"iopub.execute_input":"2024-05-21T05:35:01.851384Z","iopub.status.busy":"2024-05-21T05:35:01.851145Z","iopub.status.idle":"2024-05-21T06:03:20.195325Z","shell.execute_reply":"2024-05-21T06:03:20.193335Z"},"papermill":{"duration":1698.371692,"end_time":"2024-05-21T06:03:20.208784","exception":false,"start_time":"2024-05-21T05:35:01.837092","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      Starting Flower simulation, config: num_rounds=15, no round_timeout\n","2024-05-21 05:35:04,674\tINFO worker.py:1621 -- Started a local Ray instance.\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Ray initialized with resources: {'object_store_memory': 9011277004.0, 'GPU': 2.0, 'memory': 18022554011.0, 'node:__internal_head__': 1.0, 'node:172.19.2.2': 1.0, 'CPU': 4.0}\n","\u001b[92mINFO \u001b[0m:      Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Resources for each Virtual Client: {'num_cpus': 2, 'num_gpus': 1}\n","\u001b[92mINFO \u001b[0m:      Flower VCE: Creating VirtualClientEngineActorPool with 2 actors\n","\u001b[92mINFO \u001b[0m:      [INIT]\n","\u001b[92mINFO \u001b[0m:      Requesting initial parameters from one random client\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:35:09.195637: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:35:09.195698: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","\u001b[2m\u001b[36m(pid=288)\u001b[0m 2024-05-21 05:35:09.197578: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","\u001b[92mINFO \u001b[0m:      Received initial parameters from one random client\n","\u001b[92mINFO \u001b[0m:      Evaluating initial global parameters\n"]},{"name":"stdout","output_type":"stream","text":["GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      initial parameters (loss, other metrics): 479.599769115448, {'accuracy': 10.28}\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 1]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 100.000000, Loss: 479.599769\n","Main Test     - Accuracy: 11.462979, Loss: 479.572784\n","Standard Test - Accuracy: 10.280000, Loss: 479.599769\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No fit_metrics_aggregation_fn provided\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 1 Model aggregated_parameters...\n","Saving round 1 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (1, 479.6558129787445, {'accuracy': 0.0}, 105.512810408)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.655813\n","Main Test     - Accuracy: 0.000000, Loss: 479.624031\n","Standard Test - Accuracy: 0.000000, Loss: 479.655813\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[93mWARNING \u001b[0m:   No evaluate_metrics_aggregation_fn provided\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 2]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 2 Model aggregated_parameters...\n","Saving round 2 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (2, 479.76146697998047, {'accuracy': 0.0}, 211.25878215700004)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 479.761467\n","Main Test     - Accuracy: 0.000000, Loss: 479.718169\n","Standard Test - Accuracy: 0.000000, Loss: 479.761467\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 3]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3984460830688477\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3983823359012604\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3983353078365326\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3983034789562225\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982798755168915\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982602059841156\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982425034046173\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982278406620026\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982157707214355\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982068300247192\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3982001543045044\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981948494911194\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981899321079254\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981854021549225\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398182213306427\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981796205043793\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398177534341812\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981755077838898\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398173838853836\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3981722593307495\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 3 Model aggregated_parameters...\n","Saving round 3 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (3, 480.0653188228607, {'accuracy': 0.0}, 327.11810930600006)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.065319\n","Main Test     - Accuracy: 0.000000, Loss: 480.011528\n","Standard Test - Accuracy: 0.000000, Loss: 480.065319\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 4]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3990565836429596\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3990119993686676\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398985117673874\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3989629447460175\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398944616317749\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398928254842758\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398914337158203\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398901641368866\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3988891541957855\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398877590894699\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3988666236400604\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3988563120365143\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3988459408283234\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3988374769687653\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398827314376831\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398814857006073\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.39880633354187\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398799806833267\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.398793786764145\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.3987883627414703\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 4 Model aggregated_parameters...\n","Saving round 4 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (4, 481.0713233947754, {'accuracy': 0.0}, 446.256683758)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 481.071323\n","Main Test     - Accuracy: 0.000000, Loss: 481.009965\n","Standard Test - Accuracy: 0.000000, Loss: 481.071323\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 5]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 5 Model aggregated_parameters...\n","Saving round 5 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (5, 484.78672981262207, {'accuracy': 0.0}, 550.9077782080001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 484.786730\n","Main Test     - Accuracy: 0.000000, Loss: 484.743374\n","Standard Test - Accuracy: 0.000000, Loss: 484.786730\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 6]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4302144050598145\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.428126275539398\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4271691739559174\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4266293346881866\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4262179732322693\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.425845742225647\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.425521284341812\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4251955151557922\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4247188568115234\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4241171181201935\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4237345457077026\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4235275983810425\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.423346072435379\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4231527149677277\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.422784775495529\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4223375618457794\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.422148644924164\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.421979993581772\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.421826660633087\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4216158390045166\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 6 Model aggregated_parameters...\n","Saving round 6 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (6, 490.19917011260986, {'accuracy': 0.0}, 669.045764058)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 490.199170\n","Main Test     - Accuracy: 0.000000, Loss: 490.182490\n","Standard Test - Accuracy: 0.000000, Loss: 490.199170\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 7]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 7 Model aggregated_parameters...\n","Saving round 7 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (7, 488.08039689064026, {'accuracy': 0.0}, 775.2534281830001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 488.080397\n","Main Test     - Accuracy: 0.000000, Loss: 488.057965\n","Standard Test - Accuracy: 0.000000, Loss: 488.080397\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 8]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.479276180267334\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.473916709423065\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4718616008758545\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4705989360809326\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.469595730304718\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4685460031032562\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4673900604248047\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.466549724340439\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4657362699508667\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.464299499988556\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4629587531089783\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4621823728084564\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4616168439388275\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.461133450269699\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.460736006498337\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4603790640830994\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4599942564964294\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.459455907344818\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.458649605512619\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.4580137729644775\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 8 Model aggregated_parameters...\n","Saving round 8 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (8, 486.81655955314636, {'accuracy': 0.0}, 895.252910677)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 486.816560\n","Main Test     - Accuracy: 0.000000, Loss: 486.786556\n","Standard Test - Accuracy: 0.000000, Loss: 486.816560\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 9]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4597565829753876\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4573430120944977\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4559229910373688\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.454597622156143\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.453134000301361\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.451416164636612\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4503501057624817\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4496127665042877\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.449110984802246\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.448695868253708\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.448296397924423\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.447906017303467\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4475346505641937\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4471960961818695\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.446866035461426\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.446576178073883\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.446260780096054\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4458232522010803\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.445172816514969\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.444628030061722\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 9 Model aggregated_parameters...\n","Saving round 9 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (9, 484.8636577129364, {'accuracy': 0.0}, 1012.431167488)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 484.863658\n","Main Test     - Accuracy: 0.000000, Loss: 484.835114\n","Standard Test - Accuracy: 0.000000, Loss: 484.863658\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 10]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 10 Model aggregated_parameters...\n","Saving round 10 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (10, 483.3174571990967, {'accuracy': 0.0}, 1117.127163324)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 483.317457\n","Main Test     - Accuracy: 0.000000, Loss: 483.289258\n","Standard Test - Accuracy: 0.000000, Loss: 483.317457\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 11]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4134441614151\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4114743769168854\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4104889631271362\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.409871995449066\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4094251096248627\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.409116417169571\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4088518917560577\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.408631682395935\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.408450275659561\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4082836508750916\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.40811949968338\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4079521000385284\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.407781273126602\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.407605618238449\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4074293971061707\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4072404503822327\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4069834649562836\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.406705319881439\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4064046442508698\n","\u001b[2m\u001b[36m(ClientAppActor pid=288)\u001b[0m Attacker Generator Loss: 2.4060444831848145\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 11 Model aggregated_parameters...\n","Saving round 11 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (11, 481.95468854904175, {'accuracy': 0.0}, 1235.9247613730001)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 481.954689\n","Main Test     - Accuracy: 0.000000, Loss: 481.929689\n","Standard Test - Accuracy: 0.000000, Loss: 481.954689\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 12]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 12 Model aggregated_parameters...\n","Saving round 12 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (12, 480.91909646987915, {'accuracy': 0.0}, 1339.955400921)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.919096\n","Main Test     - Accuracy: 0.000000, Loss: 480.897240\n","Standard Test - Accuracy: 0.000000, Loss: 480.919096\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 13]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 13 Model aggregated_parameters...\n","Saving round 13 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (13, 480.15421175956726, {'accuracy': 0.0}, 1447.0201745)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 0.000000, Loss: 480.154212\n","Main Test     - Accuracy: 0.000000, Loss: 480.130779\n","Standard Test - Accuracy: 0.000000, Loss: 480.154212\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 14]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n","\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 14 Model aggregated_parameters...\n","Saving round 14 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (14, 479.700896024704, {'accuracy': 2.37}, 1552.327280988)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 2.906977, Loss: 479.700896\n","Main Test     - Accuracy: 2.642730, Loss: 479.665020\n","Standard Test - Accuracy: 2.370000, Loss: 479.700896\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [ROUND 15]\n","\u001b[92mINFO \u001b[0m:      configure_fit: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.39800301194191\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397988349199295\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979833126068115\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979814052581787\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979803025722504\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979796171188354\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.39797905087471\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979786932468414\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979783058166504\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979780673980713\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979778587818146\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397977590560913\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397977262735367\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979770839214325\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979766964912415\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979764580726624\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397976338863373\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397975981235504\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.3979758620262146\n","\u001b[2m\u001b[36m(ClientAppActor pid=289)\u001b[0m Attacker Generator Loss: 2.397975742816925\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_fit: received 10 results and 0 failures\n"]},{"name":"stdout","output_type":"stream","text":["Saving round 15 Model aggregated_parameters...\n","Saving round 15 Generator aggregated_parameters...\n","GLOBAL TEST\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      fit progress: (15, 479.44915747642517, {'accuracy': 10.86}, 1674.49845527)\n","\u001b[92mINFO \u001b[0m:      configure_evaluate: strategy sampled 10 clients (out of 33)\n"]},{"name":"stdout","output_type":"stream","text":["Poison Test   - Accuracy: 80.620155, Loss: 479.449157\n","Main Test     - Accuracy: 12.109723, Loss: 479.396084\n","Standard Test - Accuracy: 10.860000, Loss: 479.449157\n"]},{"name":"stderr","output_type":"stream","text":["\u001b[92mINFO \u001b[0m:      aggregate_evaluate: received 10 results and 0 failures\n","\u001b[92mINFO \u001b[0m:      \n","\u001b[92mINFO \u001b[0m:      [SUMMARY]\n","\u001b[92mINFO \u001b[0m:      Run finished 15 rounds in 1675.90s\n","\u001b[92mINFO \u001b[0m:      History (loss, distributed):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 1: 2.3982861757278444\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 2.398801326751709\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 2.400333213806152\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 2.405273938179016\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 2.4238606691360474\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 2.4510483741760254\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 2.440352749824524\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 2.433858633041382\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 2.4240283727645875\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 2.4166273355484007\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 2.409611368179321\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 2.4044333696365356\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 2.4007073640823364\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 2.3985011339187623\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 2.397245907783508\\n')History (loss, centralized):\n","\u001b[92mINFO \u001b[0m:      \t('\\tround 0: 479.599769115448\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 1: 479.6558129787445\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 2: 479.76146697998047\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 3: 480.0653188228607\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 4: 481.0713233947754\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 5: 484.78672981262207\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 6: 490.19917011260986\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 7: 488.08039689064026\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 8: 486.81655955314636\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 9: 484.8636577129364\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 10: 483.3174571990967\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 11: 481.95468854904175\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 12: 480.91909646987915\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 13: 480.15421175956726\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 14: 479.700896024704\\n'\n","\u001b[92mINFO \u001b[0m:      \t '\\tround 15: 479.44915747642517\\n')History (metrics, centralized):\n","\u001b[92mINFO \u001b[0m:      \t{'accuracy': [(0, 10.28),\n","\u001b[92mINFO \u001b[0m:      \t              (1, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (2, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (3, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (4, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (5, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (6, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (7, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (8, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (9, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (10, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (11, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (12, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (13, 0.0),\n","\u001b[92mINFO \u001b[0m:      \t              (14, 2.37),\n","\u001b[92mINFO \u001b[0m:      \t              (15, 10.86)]}\n","\u001b[92mINFO \u001b[0m:      \n"]}],"source":["# With a dictionary, you tell Flower's VirtualClientEngine that each\n","# client needs exclusive access to these many resources in order to run\n","client_resources = {\"num_cpus\": 2, \"num_gpus\": 1}\n","\n","# Let's disable tqdm progress bar in the main thread (used by the server)\n","disable_progress_bar()\n","history = fl.simulation.start_simulation(\n","    client_fn=client_fn_callback,  # a callback to construct a client\n","    num_clients=NUM_CLIENTS,  # total number of clients in the experiment\n","    config=fl.server.ServerConfig(num_rounds=15),  # let's run for 10 rounds\n","    strategy=strategy,  # the strategy that will orchestrate the whole FL pipeline\n","    client_resources=client_resources,\n","    actor_kwargs={\n","        \"on_actor_init_fn\": disable_progress_bar  # disable tqdm on each actor/process spawning virtual clients\n","    },\n",")"]},{"cell_type":"code","execution_count":33,"id":"67ddb994","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:03:20.30425Z","iopub.status.busy":"2024-05-21T06:03:20.30331Z","iopub.status.idle":"2024-05-21T06:03:20.687014Z","shell.execute_reply":"2024-05-21T06:03:20.686076Z"},"papermill":{"duration":0.4332,"end_time":"2024-05-21T06:03:20.689319","exception":false,"start_time":"2024-05-21T06:03:20.256119","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["history.metrics_centralized = {'accuracy': [(0, 10.28), (1, 0.0), (2, 0.0), (3, 0.0), (4, 0.0), (5, 0.0), (6, 0.0), (7, 0.0), (8, 0.0), (9, 0.0), (10, 0.0), (11, 0.0), (12, 0.0), (13, 0.0), (14, 2.37), (15, 10.86)]}\n"]},{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7b6f70859060>"]},"execution_count":33,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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hoZi5syZAIBOnTph7NixVuffvn0bGo0Gu3btKvD1KKwter0eb731FipXrgx3d3e0aNECf/zxh+Xx1atXw8fHB9u3b0edOnXg4eGB7t2748aNGwByhwvXrFmDzZs3Q6FQQKFQ4I8//ij0NRg1apTl+5/fa/Coh4eWVq9ebbnPw/+mT59uOf+rr75CnTp1oNPpULt2bXzxxRdW1zt06BAaN24MnU6HyMhIHD16tND7E5G45m37B4/P+R1f77skWgxMZB4iCAIysnOK/S8z22jT+YX9EwSh2HFOnDgRf/75J3755RdER0dj7969hSYUJpMJffv2xd27d7Fnzx5ER0fj33//xbPPPmt13oULF/DDDz9gy5Yt2LZtG44ePYrXXnvN8nhqaioGDRqEmJgYHDhwADVr1kTPnj2Rmppa7NjT09MxceJEHD58GLt27YJSqUT//v1hMpkAAGlpaWjfvj2uX7+OX375BcePH8fbb79tefy3335D//790bNnTxw9ehS7du1C8+bNi31/s3fffRfjx4/HmTNn0K1bN2RlZaFp06b47bffcOrUKYwePRojRozAkSNHLM957733MGfOHEyZMgWnT59GVFQUKlWqBAB48cUXERUVBb1ebzl/7dq1qFy5Mjp16pRvDEW1ZezYsdi/fz++//57nDhxAs888wy6d++O8+fPW87JyMjAggUL8O233yImJgZXrlzBW2+9BQB46623MHDgQEtyc+PGDTz++OOFvgaNGjXCli1bLK/BsGHDcOjQoWK9ps8++6zlPjdu3MC6devg4uKC1q1bAwC+++47TJ06FTNnzsSZM2cwa9YsTJkyBWvWrAGQ+73v3bs36tatiyNHjmD69OmWthCRc4pPygQABPu4ihYDh5Yekmkwou7U7aLc+/SH3eCmKfrbkZqaijVr1iAqKgqdO3cGAKxatQrBwcEFPmfXrl04efIkLl26hJCQEADAN998g3r16iE2NhbNmjUDAGRlZeGbb75B5cqVAQCfffYZevXqhU8++QSBgYHo1KkTIiMj4eXlBaVSieXLl8PHxwd79uxB7969i9XOp556yurrlStXwt/fH6dPn0b9+vURFRWF27dvIzY2FhUrVgQA1KhRw3L+zJkzMWjQIMyYMcNyrGHDhsW698MmTJiAAQMGWB17+EPz9ddfx7Zt27Bp0yZ07NgRqamp+PTT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oaGCTqcTqlWrJkyePFnQ6/Vih2Y3u3fvzvd3dsSIEYIg5E7BnjJlilCpUiVBq9UKnTt3Fs6ePStu0KVQWHsvXbpU4HvY7t27xQ69RIr6/j6qPEy/VgiCjJa0JCIionKFNTJEREQkWUxkiIiISLKYyBAREZFkMZEhIiIiyWIiQ0RERJLFRIaIiIgki4kMERERSRYTGSIiAB06dMCECRPEDoOIbMREhojKzMiRI6FQKKBQKKBWqxEeHo63334bWVlZYodGRBLFvZaIqEx1794dq1atgsFgwJEjRzBixAgoFArMnTtX7NCISILYI0NEZUqr1SIwMBAhISHo168funTpgujoaACAXq/HuHHjEBAQAJ1OhzZt2iA2Ntby3NWrV8PHx8fqeps2bYJCobB8PX36dDRq1AjffvstqlatCm9vbwwaNAipqamWc9LT0zF8+HB4eHggKCgIn3zyiWMbTUQOw0SGiERz6tQp/PXXX5ZdiN9++21s2LABa9asQVxcHGrUqIFu3brh7t27Nl334sWL2LRpE3799Vf8+uuv2LNnD+bMmWN5fNKkSdizZw82b96MHTt24I8//kBcXJxd20ZEZYOJDBGVqV9//RUeHh7Q6XSIiIhAQkICJk2ahPT0dCxduhTz589Hjx49ULduXaxYsQKurq74+uuvbbqHyWTC6tWrUb9+fbRt2xbDhg3Drl27AABpaWn4+uuvsWDBAnTu3BkRERFYs2YNcnJyHNFcInIw1sgQUZnq2LEjli5divT0dCxatAguLi546qmncOLECRgMBrRu3dpyrlqtRvPmzXHmzBmb7lG1alV4enpavg4KCkJCQgKA3N6a7OxstGjRwvJ4xYoVUatWrVK2jIjEwESGiMqUu7s7atSoAQBYuXIlGjZsiK+//hrNmjUr8rlKpRKCIFgdMxgMec5Tq9VWXysUCphMplJETUTOikNLRCQapVKJ999/Hx988AGqV68OjUaDP//80/K4wWBAbGws6tatCwDw9/dHamoq0tPTLeccO3bMpntWr14darUaBw8etBy7d+8ezp07V7rGEJEomMgQkaieeeYZqFQqLF26FK+++iomTZqEbdu24fTp03jppZeQkZGBUaNGAQBatGgBNzc3vP/++7h48SKioqKwevVqm+7n4eGBUaNGYdKkSfj9999x6tQpjBw5Ekol3w6JpIhDS0QkKhcXF4wdOxbz5s3DpUuXYDKZMGzYMKSmpiIyMhLbt29HhQoVAOTWsqxduxaTJk3CihUr0LlzZ0yfPh2jR4+26Z7z589HWloa+vTpA09PT7z55ptITk52RPOIyMEUwqMDzkREREQSwb5UIiIikiwmMkRERCRZTGSIiIhIspjIEBERkWQxkSEiIiLJYiJDREREksVEhoiIiCSLiQwRERFJFhMZIiIikiwmMkRERCRZTGSIiIhIspjIEBERkWT9P0EsuDOFR2BYAAAAAElFTkSuQmCC","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["print(f\"{history.metrics_centralized = }\")\n","global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round = [data[0] for data in global_accuracy_centralised]\n","acc = [data[1] for data in global_accuracy_centralised]\n","plt.plot(round, acc, label=\"global accuracy centralized\")\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"MNIST - IID - 33 clients with 10 clients per round\")\n","plt.legend()"]},{"cell_type":"code","execution_count":34,"id":"23333a5f","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:03:20.779574Z","iopub.status.busy":"2024-05-21T06:03:20.779195Z","iopub.status.idle":"2024-05-21T06:03:21.176552Z","shell.execute_reply":"2024-05-21T06:03:21.175586Z"},"papermill":{"duration":0.445176,"end_time":"2024-05-21T06:03:21.178867","exception":false,"start_time":"2024-05-21T06:03:20.733691","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7b6e24294550>"]},"execution_count":34,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["global_accuracy_centralised = history.metrics_centralized[\"accuracy\"]\n","round_centralised = [data[0] for data in global_accuracy_centralised]\n","plt.plot(round_centralised, [data[1] for data in global_accuracy_centralised], label=\"Standard Task\")\n","plt.plot(range(len(main_acc_values)), main_acc_values, label=\"Main Task\")\n","plt.plot(range(len(poison_acc_values)), poison_acc_values, label=\"Poison Task\")\n","\n","# Thiết lập định dạng của biểu đồ\n","plt.grid()\n","plt.ylabel(\"Accuracy (%)\")\n","plt.xlabel(\"Round\")\n","plt.title(\"Accuracy Comparison\")\n","plt.legend()"]},{"cell_type":"code","execution_count":35,"id":"b7ff74e0","metadata":{"execution":{"iopub.execute_input":"2024-05-21T06:03:21.276919Z","iopub.status.busy":"2024-05-21T06:03:21.276043Z","iopub.status.idle":"2024-05-21T06:03:21.280623Z","shell.execute_reply":"2024-05-21T06:03:21.279694Z"},"papermill":{"duration":0.055888,"end_time":"2024-05-21T06:03:21.282983","exception":false,"start_time":"2024-05-21T06:03:21.227095","status":"completed"},"tags":[]},"outputs":[],"source":["# !rm -rf /kaggle/working/*"]}],"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30699,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":1786.456762,"end_time":"2024-05-21T06:03:26.555323","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-05-21T05:33:40.098561","version":"2.5.0"},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{"02cccc9c04cf452b9cc71368132faca2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c21bcf14a3064685821ec5e430643976","max":10000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_5481c124d5f74836a14d5567cf8fd67f","value":10000.0}},"09f423da6764404f8447fb9f78978ca3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3ea13036d07046129e1c9038408b3845","placeholder":"​","style":"IPY_MODEL_1cb0cadb65694dd188f0014cc8ebcef8","value":"Computing checksums: 100%"}},"0a036e6dc3ca41d4b1480017f69541e5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4c8c3c6eff9f49cab7f5c3e7643ddf5c","placeholder":"​","style":"IPY_MODEL_f8156b619ba24c64b20da83f86e7edba","value":"Generating train split: 100%"}},"0cad52859b414e6a983ae13e9ed67719":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_09f423da6764404f8447fb9f78978ca3","IPY_MODEL_333a6bb494f94f50acd6186464488916","IPY_MODEL_8e65e2dd698d404cad97133dda75b85d"],"layout":"IPY_MODEL_a464927631484253ae62ed99808cafa5"}},"0d442f1890194d5192b1a6d41769be4a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"12c8d7fca35546a58febfb67b31e864d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cec3c56c055e43b491643457e4c49b87","placeholder":"​","style":"IPY_MODEL_c31c47188f5d41b3b55a078db7712ded","value":" 60000/60000 [00:00&lt;00:00, 165259.29 examples/s]"}},"1cb0cadb65694dd188f0014cc8ebcef8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"26a3107fff094b7db63c25fc695ef375":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c307c9282f6e426686fb81d0cacb4af2","placeholder":"​","style":"IPY_MODEL_0d442f1890194d5192b1a6d41769be4a","value":" 10000/10000 [00:00&lt;00:00, 147628.02 examples/s]"}},"320f06c4dcc24731bf6ec0c9627824b5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"333a6bb494f94f50acd6186464488916":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e3ce8f3c69634c43878fb5dc3f768a27","max":2.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_3bd2e0037bbf4668ac9ee89bc113d528","value":2.0}},"3401f4d02e8d47d4977dfc92b0665c5d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3bd2e0037bbf4668ac9ee89bc113d528":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"3ea13036d07046129e1c9038408b3845":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4c8c3c6eff9f49cab7f5c3e7643ddf5c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5481c124d5f74836a14d5567cf8fd67f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6ac990e30dc0458f9771594daac2da83":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"72429faf65de4413a87bc9ada73d27e6":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8e65e2dd698d404cad97133dda75b85d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ea355951fc534d79b52f4fd0868d4e61","placeholder":"​","style":"IPY_MODEL_320f06c4dcc24731bf6ec0c9627824b5","value":" 2/2 [00:00&lt;00:00, 192.85it/s]"}},"a464927631484253ae62ed99808cafa5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c21bcf14a3064685821ec5e430643976":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c307c9282f6e426686fb81d0cacb4af2":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c31c47188f5d41b3b55a078db7712ded":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c757e6be395a46a48582617667b8c5a9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0a036e6dc3ca41d4b1480017f69541e5","IPY_MODEL_cf8b2bfab40c46209978e8ab32554c11","IPY_MODEL_12c8d7fca35546a58febfb67b31e864d"],"layout":"IPY_MODEL_6ac990e30dc0458f9771594daac2da83"}},"cc510c030b9a499c9db94eafeaa6574f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cea71ddf5a9f445b8cc33be2fb5db5dd":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f1af8503590d49029b610ccf728a9751","placeholder":"​","style":"IPY_MODEL_3401f4d02e8d47d4977dfc92b0665c5d","value":"Generating test split: 100%"}},"cec3c56c055e43b491643457e4c49b87":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cf8b2bfab40c46209978e8ab32554c11":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_72429faf65de4413a87bc9ada73d27e6","max":60000.0,"min":0.0,"orientation":"horizontal","style":"IPY_MODEL_cc510c030b9a499c9db94eafeaa6574f","value":60000.0}},"e3ce8f3c69634c43878fb5dc3f768a27":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ea355951fc534d79b52f4fd0868d4e61":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f12cac1391bd401c8f3c2a65a22e1dc2":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f1af8503590d49029b610ccf728a9751":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f8156b619ba24c64b20da83f86e7edba":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fe3b95ebcbb14043a918d18142ff93cb":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_cea71ddf5a9f445b8cc33be2fb5db5dd","IPY_MODEL_02cccc9c04cf452b9cc71368132faca2","IPY_MODEL_26a3107fff094b7db63c25fc695ef375"],"layout":"IPY_MODEL_f12cac1391bd401c8f3c2a65a22e1dc2"}}},"version_major":2,"version_minor":0}}},"nbformat":4,"nbformat_minor":5}